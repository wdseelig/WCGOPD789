diff --git a/sites/all/modules/contrib/captcha/LICENSE.txt b/sites/all/modules/contrib/captcha/LICENSE.txt
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/sites/all/modules/contrib/captcha/README.txt b/sites/all/modules/contrib/captcha/README.txt
new file mode 100644
index 0000000..0affa5f
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/README.txt
@@ -0,0 +1,30 @@
+Readme file for the CAPTCHA module for Drupal
+---------------------------------------------
+
+captcha.module is the basic CAPTCHA module, offering general CAPTCHA
+administration and a simple math challenge.
+
+Submodule image_captcha.module offers an image based challenge.
+
+Installation:
+  Installation is like with all normal drupal modules:
+  extract the 'captcha' folder from the tar ball to the
+  modules directory from your website (typically sites/all/modules).
+
+Dependencies:
+  The basic CAPTCHA module has no dependencies, nothing special is required.
+
+Conflicts/known issues:
+  CAPTCHA and page caching do not work together currently.
+  However, the CAPTCHA module does support the Drupal core page
+  caching mechanism: it just disables the caching of the pages
+  where it has to put its challenges.
+  If you use other caching mechanisms, it is possible that CAPTCHA's
+  won't work, and you get error messages like 'CAPTCHA validation
+  error: unknown CAPTCHA session ID'.
+
+Configuration:
+  The configuration page is at admin/config/people/captcha,
+  where you can configure the CAPTCHA module
+  and enable challenges for the desired forms.
+  You can also tweak the image CAPTCHA to your liking.
diff --git a/sites/all/modules/contrib/captcha/captcha.admin.inc b/sites/all/modules/contrib/captcha/captcha.admin.inc
new file mode 100644
index 0000000..ac7dc8a
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.admin.inc
@@ -0,0 +1,546 @@
+<?php
+
+/**
+ * @file
+ * Functionality and helper functions for CAPTCHA administration.
+ */
+
+/**
+ * Return an array with the available CAPTCHA types, for use as options array for a select form elements.
+ *
+ * @param bool $add_special_options
+ *   if true: also add a 'none' and 'default' option
+ *
+ * @return array
+ *   Mapping "$module/$type" to
+ *   "$type (from module $module)" with $module the module name implementing the CAPTCHA
+ *   and $type the name of the CAPTCHA type.
+ */
+function _captcha_available_challenge_types($add_special_options = TRUE) {
+  $captcha_types = array();
+  if ($add_special_options) {
+    $captcha_types['none'] = t('- No challenge -');
+    $captcha_types['default'] = t('Default challenge type');
+  }
+  // We do our own version of Drupal's module_invoke_all() here because
+  // we want to build an array with custom keys and values.
+  foreach (module_implements('captcha') as $module) {
+    $result = call_user_func_array($module . '_captcha', array('list'));
+    if (is_array($result)) {
+      foreach ($result as $type) {
+        $captcha_types["$module/$type"] = t('@type (from module @module)', array('@type' => $type, '@module' => $module));
+      }
+    }
+  }
+  return $captcha_types;
+}
+
+/**
+ * Form builder function for the general CAPTCHA configuration.
+ */
+function captcha_admin_settings() {
+  module_load_include('inc', 'captcha');
+
+  // Use JavaScript for some added usability on admin form.
+  drupal_add_js(drupal_get_path('module', 'captcha') . '/captcha.js');
+
+  // Configuration of which forms to protect, with what challenge.
+  $form['captcha_form_protection'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Form protection'),
+    '#description' => t("Select the challenge type you want for each of the listed forms (identified by their so called <em>form_id</em>'s). You can easily add arbitrary forms with the textfield at the bottom of the table or with the help of the option <em>Add CAPTCHA administration links to forms</em> below."),
+  );
+  $form['captcha_form_protection']['captcha_default_challenge'] = array(
+    '#type' => 'select',
+    '#title' => t('Default challenge type'),
+    '#description' => t('Select the default challenge type for CAPTCHAs. This can be overriden for each form if desired.'),
+    '#options' => _captcha_available_challenge_types(FALSE),
+    '#default_value' => variable_get('captcha_default_challenge', 'captcha/Math'),
+  );
+  // List known form_ids.
+  $form['captcha_form_protection']['captcha_form_id_overview'] = array(
+    '#theme' => 'captcha_admin_settings_captcha_points',
+    '#tree' => TRUE,
+  );
+  $form['captcha_form_protection']['captcha_form_id_overview']['captcha_captcha_points'] = array();
+  $captcha_type_options = _captcha_available_challenge_types();
+  $captcha_points = captcha_get_captcha_points();
+  foreach ($captcha_points as $captcha_point) {
+    $elem = array();
+    $elem['form_id'] = array(
+      '#markup' => $captcha_point->form_id,
+    );
+    // Select widget for CAPTCHA type.
+    if (isset($captcha_point->module) && $captcha_point->module) {
+      $captcha_type = $captcha_point->module . '/' . $captcha_point->captcha_type;
+    }
+    elseif (isset($captcha_point->captcha_type) && ($captcha_point->captcha_type == 'default')) {
+      $captcha_type = 'default';
+    }
+    else {
+      $captcha_type = 'none';
+    }
+    $elem['captcha_type'] = array(
+      '#type' => 'select',
+      '#default_value' => $captcha_type,
+      '#options' => $captcha_type_options,
+    );
+    $ops = array();
+    if (module_exists('ctools') && $captcha_point->export_type & EXPORT_IN_CODE) {
+      if ($captcha_point->export_type & EXPORT_IN_DATABASE) {
+        $ops[] = l(t('revert'), "admin/config/people/captcha/captcha/captcha_point/{$captcha_point->form_id}/delete");
+      }
+      // TODO Disable exported points.
+    }
+    else {
+      $ops[] = l(t('delete'), "admin/config/people/captcha/captcha/captcha_point/{$captcha_point->form_id}/delete");
+    }
+    $elem['operations'] = array('#markup' => implode(", ", $ops));
+
+    $form['captcha_form_protection']['captcha_form_id_overview']['captcha_captcha_points'][$captcha_point->form_id] = $elem;
+  }
+
+  // Form items for new form_id.
+  $form['captcha_form_protection']['captcha_form_id_overview']['captcha_new_captcha_point'] = array();
+  // Textfield for form_id.
+  $form['captcha_form_protection']['captcha_form_id_overview']['captcha_new_captcha_point']['form_id'] = array(
+    '#type' => 'textfield',
+    '#size' => 16,
+  );
+  // Select widget for CAPTCHA type.
+  $form['captcha_form_protection']['captcha_form_id_overview']['captcha_new_captcha_point']['captcha_type'] = array(
+    '#type' => 'select',
+    '#default_value' => 'none',
+    '#options' => $captcha_type_options,
+  );
+
+  // Checkbox to add default CAPTCHA to all non listed forms as well.
+  $form['captcha_form_protection']['captcha_default_challenge_on_nonlisted_forms'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Default challenge on non-listed forms.'),
+    '#default_value' => variable_get('captcha_default_challenge_on_nonlisted_forms', FALSE),
+    '#description' => t('Normally, no challenge is added to forms that are not listed above. Enabling this option will add the default challenge instead.'),
+  );
+
+  // Field for the CAPTCHA administration mode.
+  $form['captcha_form_protection']['captcha_administration_mode'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Add CAPTCHA administration links to forms'),
+    '#default_value' => variable_get('captcha_administration_mode', FALSE),
+    '#description' => t('This option makes it easy to manage CAPTCHA settings on forms. When enabled, users with the <em>administer CAPTCHA settings</em> permission will see a fieldset with CAPTCHA administration links on all forms, except on administrative pages.'),
+  );
+  // Field for the CAPTCHAs on admin pages.
+  $form['captcha_form_protection']['captcha_allow_on_admin_pages'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Allow CAPTCHAs and CAPTCHA administration links on administrative pages'),
+    '#default_value' => variable_get('captcha_allow_on_admin_pages', FALSE),
+    '#description' => t("This option makes it possible to add CAPTCHAs to forms on administrative pages. CAPTCHAs are disabled by default on administrative pages (which shouldn't be accessible to untrusted users normally) to avoid the related overhead. In some situations, e.g. in the case of demo sites, it can be usefull to allow CAPTCHAs on administrative pages."),
+  );
+
+  // Button for clearing the CAPTCHA placement cache.
+  // Based on Drupal core's "Clear all caches" (performance settings page).
+  $form['captcha_form_protection']['captcha_placement_caching'] = array(
+    '#type' => 'item',
+    '#title' => t('CAPTCHA placement caching'),
+    '#description' => t('For efficiency, the positions of the CAPTCHA elements in each of the configured forms are cached. Most of the time, the structure of a form does not change and it would be a waste to recalculate the positions every time. Occasionally however, the form structure can change (e.g. during site building) and clearing the CAPTCHA placement cache can be required to fix the CAPTCHA placement.'),
+  );
+  $form['captcha_form_protection']['captcha_placement_caching']['captcha_placement_cache_clear'] = array(
+    '#type' => 'submit',
+    '#value' => t('Clear the CAPTCHA placement cache'),
+    '#submit' => array('captcha_clear_captcha_placement_cache_submit'),
+  );
+
+  // Configuration option for adding a CAPTCHA description.
+  $form['captcha_add_captcha_description'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Add a description to the CAPTCHA'),
+    '#description' => t('Add a configurable description to explain the purpose of the CAPTCHA to the visitor.'),
+    '#default_value' => variable_get('captcha_add_captcha_description', TRUE),
+  );
+  // Textfield(s) for the CAPTCHA description.
+  if (module_exists('locale')) {
+    $langs = locale_language_list();
+    $form['captcha_descriptions'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('CAPTCHA description'),
+      '#description' => t('Configurable description of the CAPTCHA. An empty entry will reset the description to default.'),
+      '#attributes' => array('id' => 'edit-captcha-description-wrapper'),
+    );
+    foreach ($langs as $lang_code => $lang_name) {
+      $form['captcha_descriptions']["captcha_description_$lang_code"] = array(
+        '#type' => 'textfield',
+        '#title' => t('For language %lang_name (code %lang_code)', array('%lang_name' => $lang_name, '%lang_code' => $lang_code)),
+        '#default_value' => _captcha_get_description($lang_code),
+        '#maxlength' => 256,
+      );
+    }
+  }
+  else {
+    $form['captcha_description'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Challenge description'),
+      '#description' => t('Configurable description of the CAPTCHA. An empty entry will reset the description to default.'),
+      '#default_value' => _captcha_get_description(),
+      '#maxlength' => 256,
+      '#attributes' => array('id' => 'edit-captcha-description-wrapper'),
+    );
+  }
+
+  // Option for case sensitive/insensitive validation of the responses.
+  $form['captcha_default_validation'] = array(
+    '#type' => 'radios',
+    '#title' => t('Default CAPTCHA validation'),
+    '#description' => t('Define how the response should be processed by default. Note that the modules that provide the actual challenges can override or ignore this.'),
+    '#options' => array(
+      CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE => t('Case sensitive validation: the response has to exactly match the solution.'),
+      CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE => t('Case insensitive validation: lowercase/uppercase errors are ignored.'),
+    ),
+    '#default_value' => variable_get('captcha_default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE),
+  );
+
+  // Field for CAPTCHA persistence.
+  // TODO for D7: Rethink/simplify the explanation and UI strings.
+  $form['captcha_persistence'] = array(
+    '#type' => 'radios',
+    '#title' => t('Persistence'),
+    '#default_value' => variable_get('captcha_persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE),
+    '#options' => array(
+      CAPTCHA_PERSISTENCE_SHOW_ALWAYS => t('Always add a challenge.'),
+      CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE => t('Omit challenges in a multi-step/preview workflow once the user successfully responds to a challenge.'),
+      CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE => t('Omit challenges on a form type once the user successfully responds to a challenge on a form of that type.'),
+      CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL => t('Omit challenges on all forms once the user successfully responds to any challenge on the site.'),
+    ),
+    '#description' => t('Define if challenges should be omitted during the rest of a session once the user successfully responds to a challenge.'),
+  );
+
+  // Enable wrong response counter.
+  $form['captcha_enable_stats'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Enable statistics'),
+    '#description' => t('Keep CAPTCHA related counters in the <a href="!statusreport">status report</a>. Note that this comes with a performance penalty as updating the counters results in clearing the variable cache.', array('!statusreport' => url('admin/reports/status'))),
+    '#default_value' => variable_get('captcha_enable_stats', FALSE),
+  );
+
+  // Option for logging wrong responses.
+  $form['captcha_log_wrong_responses'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Log wrong responses'),
+    '#description' => t('Report information about wrong responses to the <a href="!dblog">log</a>.', array('!dblog' => url('admin/reports/dblog'))),
+    '#default_value' => variable_get('captcha_log_wrong_responses', FALSE),
+  );
+
+  // Submit button.
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save configuration'),
+  );
+
+  return $form;
+}
+
+/**
+ * Custom theme function for a table of (form_id -> CAPTCHA type) settings.
+ */
+function theme_captcha_admin_settings_captcha_points($variables) {
+  $form = $variables['form'];
+  $header = array('form_id', t('Challenge type'), t('Operations'));
+  $rows = array();
+  // Existing CAPTCHA points.
+  foreach (element_children($form['captcha_captcha_points']) as $key) {
+    $row = array();
+    $row[] = drupal_render($form['captcha_captcha_points'][$key]['form_id']);
+    $row[] = drupal_render($form['captcha_captcha_points'][$key]['captcha_type']);
+    $row[] = drupal_render($form['captcha_captcha_points'][$key]['operations']);
+    $rows[] = $row;
+  }
+  // For new CAPTCHA point.
+  $row = array();
+  $row[] = drupal_render($form['captcha_new_captcha_point']['form_id']);
+  $row[] = drupal_render($form['captcha_new_captcha_point']['captcha_type']);
+  $row[] = '';
+  $rows[] = $row;
+
+  $output = theme('table', array('header' => $header, 'rows' => $rows));
+  return $output;
+}
+
+/**
+ * Validation handler for captcha_admin_settings form.
+ */
+function captcha_admin_settings_validate($form, $form_state) {
+  $form_id = $form_state['values']['captcha_form_id_overview']['captcha_new_captcha_point']['form_id'];
+  if (!preg_match('/^[a-z0-9_]*$/', $form_id)) {
+    form_set_error('captcha_form_id_overview][captcha_new_captcha_point][form_id', t('Illegal form_id'));
+  }
+}
+
+/**
+ * Submission function for captcha_admin_settings form.
+ */
+function captcha_admin_settings_submit($form, &$form_state) {
+
+  variable_set('captcha_administration_mode', $form_state['values']['captcha_administration_mode']);
+  variable_set('captcha_allow_on_admin_pages', $form_state['values']['captcha_allow_on_admin_pages']);
+
+  variable_set('captcha_default_challenge', $form_state['values']['captcha_default_challenge']);
+  variable_set('captcha_default_challenge_on_nonlisted_forms', $form_state['values']['captcha_default_challenge_on_nonlisted_forms']);
+
+  // Process CAPTCHA points.
+  if (isset($form_state['values']['captcha_form_id_overview']['captcha_captcha_points'])) {
+    // Load existing data.
+    $captcha_points = captcha_get_captcha_points();
+    foreach ($form_state['values']['captcha_form_id_overview']['captcha_captcha_points'] as $captcha_point_form_id => $data) {
+      // If this is an in-code captcha point and its settings are unchanged,
+      // don't save to the database.
+      if (module_exists('ctools') && isset($captcha_points[$captcha_point_form_id])) {
+        // Parse module and captcha_type from submitted values.
+        if (is_string($data['captcha_type']) && substr_count($data['captcha_type'], '/') == 1) {
+          list($module, $captcha_type) = explode('/', $data['captcha_type']);
+        }
+        else {
+          $module = '';
+          $captcha_type = $data['captcha_type'];
+        }
+
+        $point = $captcha_points[$captcha_point_form_id];
+        if ($point->export_type & EXPORT_IN_CODE && !($point->export_type & EXPORT_IN_DATABASE) && $point->module == $module && $point->captcha_type == $captcha_type) {
+          continue;
+        }
+      }
+      captcha_set_form_id_setting($captcha_point_form_id, $data['captcha_type']);
+    }
+  }
+
+  // Add new CAPTCHA point?
+  $captcha_point_form_id = $form_state['values']['captcha_form_id_overview']['captcha_new_captcha_point']['form_id'];
+  if (!empty($captcha_point_form_id)) {
+    $captcha_type = $form_state['values']['captcha_form_id_overview']['captcha_new_captcha_point']['captcha_type'];
+    captcha_set_form_id_setting($captcha_point_form_id, $captcha_type);
+    drupal_set_message(t('Added CAPTCHA point.'), 'status');
+  }
+
+  // CAPTCHA description stuff.
+  variable_set('captcha_add_captcha_description', $form_state['values']['captcha_add_captcha_description']);
+  // Save (or reset) the CAPTCHA descriptions.
+  if (module_exists('locale')) {
+    $langs = locale_language_list();
+    foreach ($langs as $lang_code => $lang_name) {
+      $description = $form_state['values']["captcha_description_$lang_code"];
+      if ($description) {
+        variable_set("captcha_description_$lang_code", $description);
+      }
+      else {
+        variable_del("captcha_description_$lang_code");
+        drupal_set_message(t('Reset of CAPTCHA description for language %language.', array('%language' => $lang_name)), 'status');
+      }
+    }
+  }
+  else {
+    $description = $form_state['values']['captcha_description'];
+    if ($description) {
+      variable_set('captcha_description', $description);
+    }
+    else {
+      variable_del('captcha_description');
+      drupal_set_message(t('Reset of CAPTCHA description.'), 'status');
+    }
+  }
+
+  variable_set('captcha_default_validation', $form_state['values']['captcha_default_validation']);
+  variable_set('captcha_persistence', $form_state['values']['captcha_persistence']);
+  variable_set('captcha_enable_stats', $form_state['values']['captcha_enable_stats']);
+  variable_set('captcha_log_wrong_responses', $form_state['values']['captcha_log_wrong_responses']);
+
+  drupal_set_message(t('The CAPTCHA settings have been saved.'), 'status');
+}
+
+/**
+ * Submit callback; clear CAPTCHA placement cache.
+ */
+function captcha_clear_captcha_placement_cache_submit($form, &$form_state) {
+  variable_del('captcha_placement_map_cache');
+  drupal_set_message(t('Cleared the CAPTCHA placement cache.'));
+}
+
+/**
+ * Central handler for CAPTCHA point administration (adding, disabling, deleting).
+ */
+function captcha_point_admin($captcha_point_form_id = NULL, $op = NULL) {
+  module_load_include('inc', 'captcha');
+
+  // If $captcha_point_form_id and action $op given: do the action.
+  if ($captcha_point_form_id) {
+    switch ($op) {
+      case 'disable':
+        return drupal_get_form('captcha_point_disable_confirm', $captcha_point_form_id, FALSE);
+
+      case 'delete':
+        return drupal_get_form('captcha_point_disable_confirm', $captcha_point_form_id, TRUE);
+    }
+    // Return edit form for CAPTCHA point.
+    return drupal_get_form('captcha_point_admin_form', $captcha_point_form_id);
+  }
+  // Return add form for CAPTCHA point.
+  return drupal_get_form('captcha_point_admin_form');
+}
+
+/**
+ * Admin form.
+ */
+function captcha_point_admin_form($form, $form_state, $captcha_point_form_id = NULL) {
+  $form = array();
+  $default_captcha_type = 'none';
+  if (isset($captcha_point_form_id)) {
+    // Use given CAPTCHA point form_id.
+    $form['captcha_point_form_id'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Form ID'),
+      '#description' => t('The Drupal form_id of the form to add the CAPTCHA to.'),
+      '#value' => check_plain($captcha_point_form_id),
+      '#disabled' => TRUE,
+    );
+    $captcha_point = captcha_get_form_id_setting($captcha_point_form_id);
+    if ($captcha_point) {
+      $default_captcha_type = "{$captcha_point->module}/{$captcha_point->captcha_type}";
+    }
+  }
+  else {
+    // Textfield for CAPTCHA point form_id.
+    $form['captcha_point_form_id'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Form ID'),
+      '#description' => t('The Drupal form_id of the form to add the CAPTCHA to.'),
+    );
+  }
+  // Select widget for CAPTCHA type.
+  $form['captcha_type'] = array(
+    '#type' => 'select',
+    '#title' => t('Challenge type'),
+    '#description' => t('The CAPTCHA type to use for this form.'),
+    '#default_value' => $default_captcha_type,
+    '#options' => _captcha_available_challenge_types(),
+  );
+  // Redirect to general CAPTCHA settings page after submission.
+  $form['#redirect'] = 'admin/config/people/captcha';
+  // Submit button.
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+  return $form;
+}
+
+/**
+ * Validation function for captcha_point_admin_form.
+ */
+function captcha_point_admin_form_validate($form, $form_state) {
+  if (!preg_match('/^[a-z0-9_]+$/', $form_state['values']['captcha_point_form_id'])) {
+    form_set_error('captcha_point_form_id', t('Illegal form_id'));
+  }
+}
+
+/**
+ * Submit function for captcha_point_admin_form.
+ */
+function captcha_point_admin_form_submit($form, $form_state) {
+  $captcha_point_form_id = $form_state['values']['captcha_point_form_id'];
+  $captcha_type = $form_state['values']['captcha_type'];
+  captcha_set_form_id_setting($captcha_point_form_id, $captcha_type);
+  drupal_set_message(t('Saved CAPTCHA point settings.'), 'status');
+}
+
+/**
+ * Confirm dialog for disabling/deleting a CAPTCHA point.
+ */
+function captcha_point_disable_confirm($form, &$form_state, $captcha_point_form_id, $delete) {
+  $form = array();
+  $form['captcha_point_form_id'] = array(
+    '#type' => 'value',
+    '#value' => $captcha_point_form_id,
+  );
+  $form['captcha_point_delete'] = array(
+    '#type' => 'value',
+    '#value' => $delete,
+  );
+  if ($delete) {
+    $message = t('Are you sure you want to delete the CAPTCHA for form_id %form_id?', array('%form_id' => $captcha_point_form_id));
+    $yes = t('Delete');
+  }
+  else {
+    $message = t('Are you sure you want to disable the CAPTCHA for form_id %form_id?', array('%form_id' => $captcha_point_form_id));
+    $yes = t('Disable');
+  }
+  return confirm_form($form, $message, 'admin/config/people/captcha/captcha', '', $yes);
+}
+
+/**
+ * Submission handler of CAPTCHA point disabling/deleting confirm_form.
+ */
+function captcha_point_disable_confirm_submit($form, &$form_state) {
+  $captcha_point_form_id = $form_state['values']['captcha_point_form_id'];
+  $delete = $form_state['values']['captcha_point_delete'];
+  if ($delete) {
+    captcha_set_form_id_setting($captcha_point_form_id, NULL);
+    drupal_set_message(t('Deleted CAPTCHA for form %form_id.', array('%form_id' => $captcha_point_form_id)));
+  }
+  else {
+    captcha_set_form_id_setting($captcha_point_form_id, 'none');
+    drupal_set_message(t('Disabled CAPTCHA for form %form_id.', array('%form_id' => $captcha_point_form_id)));
+  }
+  $form_state['redirect'] = 'admin/config/people/captcha/captcha';
+}
+
+/**
+ * Helper function for generating an example challenge.
+ */
+function _captcha_generate_example_challenge($module, $type) {
+  return array(
+    '#type' => 'captcha',
+    '#captcha_type' => $module . '/' . $type,
+    '#captcha_admin_mode' => TRUE,
+  );
+}
+
+/**
+ * Funtion for generating a page with CAPTCHA examples.
+ *
+ * If the arguments $module and $challenge are not set, generate a list with
+ * examples of the available CAPTCHA types.
+ * If $module and $challenge are set, generate 10 examples of the concerning
+ * CAPTCHA.
+ */
+function captcha_examples($form, $form_state, $module, $challenge) {
+  module_load_include('inc', 'captcha');
+
+  $form = array();
+  if ($module && $challenge) {
+    // Generate 10 example challenges.
+    for ($i = 0; $i < 10; $i++) {
+      $form["challenge_{$i}"] = _captcha_generate_example_challenge($module, $challenge);
+    }
+  }
+  else {
+    // Generate a list with examples of the available CAPTCHA types.
+    $form['info'] = array(
+      '#markup' => t('This page gives an overview of all available challenge types, generated with their current settings.'),
+    );
+    foreach (module_implements('captcha') as $mkey => $module) {
+      $challenges = call_user_func_array($module . '_captcha', array('list'));
+      if ($challenges) {
+        foreach ($challenges as $ckey => $challenge) {
+          $form["captcha_{$mkey}_{$ckey}"] = array(
+            '#type' => 'fieldset',
+            '#title' => t('Challenge %challenge by module %module', array('%challenge' => $challenge, '%module' => $module)),
+            'challenge' => _captcha_generate_example_challenge($module, $challenge),
+            'more_examples' => array(
+              '#markup' => l(t('10 more examples of this challenge.'), "admin/config/people/captcha/captcha/examples/$module/$challenge"),
+            ),
+          );
+        }
+      }
+    }
+  }
+  return $form;
+}
diff --git a/sites/all/modules/contrib/captcha/captcha.inc b/sites/all/modules/contrib/captcha/captcha.inc
new file mode 100644
index 0000000..4dc6f82
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.inc
@@ -0,0 +1,463 @@
+<?php
+
+/**
+ * @file
+ * General CAPTCHA functionality and helper functions.
+ */
+
+/**
+ * Helper function for adding/updating a CAPTCHA point.
+ *
+ * @param string $form_id
+ *   the form ID to configure.
+ *
+ * @param string $captcha_type
+ *   the setting for the given form_id, can be:
+ *   - 'none' to disable CAPTCHA,
+ *   - 'default' to use the default challenge type
+ *   - NULL to remove the entry for the CAPTCHA type
+ *   - something of the form 'image_captcha/Image'
+ *   - an object with attributes $captcha_type->module and $captcha_type->captcha_type
+ */
+function captcha_set_form_id_setting($form_id, $captcha_type) {
+  // Handle 'none'.
+  if ($captcha_type == 'none') {
+    db_merge('captcha_points')
+      ->key(array('form_id' => $form_id))
+      ->fields(array('module' => NULL, 'captcha_type' => NULL))
+      ->execute();
+  }
+  // Handle 'default'.
+  elseif ($captcha_type == 'default') {
+    db_merge('captcha_points')
+      ->key(array('form_id' => $form_id))
+      ->fields(array('module' => NULL, 'captcha_type' => 'default'))
+      ->execute();
+  }
+  // Handle NULL.
+  elseif ($captcha_type == NULL) {
+    db_delete('captcha_points')->condition('form_id', $form_id)->execute();
+  }
+  // Handle a captcha_type object.
+  elseif (is_object($captcha_type) && !empty($captcha_type->module) && !empty($captcha_type->captcha_type)) {
+    db_merge('captcha_points')
+      ->key(array('form_id' => $form_id))
+      ->fields(array('module' => $captcha_type->module, 'captcha_type' => $captcha_type->captcha_type))
+      ->execute();
+  }
+  // Handle a captcha_type string.
+  elseif (is_string($captcha_type) && substr_count($captcha_type, '/') == 1) {
+    list($module, $type) = explode('/', $captcha_type);
+    db_merge('captcha_points')
+      ->key(array('form_id' => $form_id))
+      ->fields(array('module' => $module, 'captcha_type' => $type))
+      ->execute();
+  }
+  else {
+    drupal_set_message(
+      t('Failed to set a CAPTCHA type for form %form_id: could not interpret value "@captcha_type"',
+      array(
+        '%form_id' => $form_id,
+        '@captcha_type' => (string) $captcha_type,
+      )
+      ),
+      'warning'
+    );
+  }
+}
+
+/**
+ * Get the CAPTCHA setting for a given form_id.
+ *
+ * @param string $form_id
+ *   the form_id to query for
+ *
+ * @param bool $symbolic
+ *   flag to return as (symbolic) strings instead of object.
+ *
+ * @return NULL
+ *   if no setting is known
+ *   or a captcha_point object with fields 'module' and 'captcha_type'.
+ *   If argument $symbolic is true, returns (symbolic) as 'none', 'default'
+ *   or in the form 'captcha/Math'.
+ */
+function captcha_get_form_id_setting($form_id, $symbolic = FALSE) {
+  // Fetch setting from database.
+  if (module_exists('ctools')) {
+    ctools_include('export');
+    $object = ctools_export_load_object('captcha_points', 'names', array($form_id));
+    $captcha_point = array_pop($object);
+  }
+  else {
+    $result = db_query("SELECT module, captcha_type FROM {captcha_points} WHERE form_id = :form_id",
+      array(':form_id' =>  $form_id));
+    $captcha_point = $result->fetchObject();
+  }
+
+  // If no setting is available in database for the given form,
+  // but 'captcha_default_challenge_on_nonlisted_forms' is enabled, pick the default type anyway.
+  if (!$captcha_point && variable_get('captcha_default_challenge_on_nonlisted_forms', FALSE)) {
+    $captcha_point = (object) array('captcha_type' => 'default');
+  }
+
+  // Handle (default) settings and symbolic mode.
+  if (!$captcha_point) {
+    $captcha_point = NULL;
+  }
+  elseif (!empty($captcha_point->captcha_type) && $captcha_point->captcha_type == 'default') {
+    if (!$symbolic) {
+      list($module, $type) = explode('/', variable_get('captcha_default_challenge', 'captcha/Math'));
+      $captcha_point->module = $module;
+      $captcha_point->captcha_type = $type;
+    }
+    else {
+      $captcha_point = 'default';
+    }
+  }
+  elseif (empty($captcha_point->module) && empty($captcha_point->captcha_type) && $symbolic) {
+    $captcha_point = 'none';
+  }
+  elseif ($symbolic) {
+    $captcha_point = $captcha_point->module . '/' . $captcha_point->captcha_type;
+  }
+
+  return $captcha_point;
+}
+
+/**
+ * Helper function to load all captcha points.
+ *
+ * @return array of all captcha_points
+ */
+function captcha_get_captcha_points() {
+  if (module_exists('ctools')) {
+    ctools_include('export');
+    $captcha_points = ctools_export_load_object('captcha_points', 'all');
+  }
+  else {
+    $captcha_points = array();
+    $result = db_select('captcha_points', 'cp')->fields('cp')->orderBy('form_id')->execute();
+    foreach ($result as $captcha_point) {
+      $captcha_points[] = $captcha_point;
+    }
+  }
+  return $captcha_points;
+}
+
+/**
+ * Helper function for generating a new CAPTCHA session.
+ *
+ * @param string $form_id
+ *   the form_id of the form to add a CAPTCHA to.
+ *
+ * @param int $status
+ *   the initial status of the CAPTHCA session.
+ *
+ * @return int
+ *   the session ID of the new CAPTCHA session.
+ */
+function _captcha_generate_captcha_session($form_id = NULL, $status = CAPTCHA_STATUS_UNSOLVED) {
+  global $user;
+  // Initialize solution with random data.
+  $solution = md5(mt_rand());
+  // Insert an entry and thankfully receive the value of the autoincrement field 'csid'.
+  $captcha_sid = db_insert('captcha_sessions')
+  ->fields(array(
+    'uid' => $user->uid,
+    'sid' => session_id(),
+    'ip_address' => ip_address(),
+    'timestamp' => REQUEST_TIME,
+    'form_id' => $form_id,
+    'solution' => $solution,
+    'status' => $status,
+    'attempts' => 0,
+  ))
+  ->execute();
+  return $captcha_sid;
+}
+
+/**
+ * Helper function for updating the solution in the CAPTCHA session table.
+ *
+ * @param int $captcha_sid
+ *   the CAPTCHA session ID to update.
+ *
+ * @param string $solution
+ *   the new solution to associate with the given CAPTCHA session.
+ */
+function _captcha_update_captcha_session($captcha_sid, $solution) {
+  db_update('captcha_sessions')
+    ->condition('csid', $captcha_sid)
+    ->fields(array(
+      'timestamp' => REQUEST_TIME,
+      'solution' => $solution,
+    ))
+    ->execute();
+}
+
+/**
+ * Helper function for checking if CAPTCHA is required for user.
+ *
+ * Based on the CAPTCHA persistence setting, the CAPTCHA session ID and
+ * user session info.
+ */
+function _captcha_required_for_user($captcha_sid, $form_id) {
+  // Get the CAPTCHA persistence setting.
+  $captcha_persistence = variable_get('captcha_persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+
+  // First check: should we always add a CAPTCHA?
+  if ($captcha_persistence == CAPTCHA_PERSISTENCE_SHOW_ALWAYS) {
+    return TRUE;
+  }
+
+  // Get the status of the current CAPTCHA session.
+  $captcha_session_status = db_query('SELECT status FROM {captcha_sessions} WHERE csid = :csid', array(':csid' => $captcha_sid))->fetchField();
+  // Second check: if the current session is already solved: omit further CAPTCHAs.
+  if ($captcha_session_status == CAPTCHA_STATUS_SOLVED) {
+    return FALSE;
+  }
+
+  // Third check: look at the persistence level (per form instance, per form or per user).
+  if ($captcha_persistence == CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE) {
+    return TRUE;
+  }
+  else {
+    $captcha_success_form_ids = isset($_SESSION['captcha_success_form_ids']) ? (array) ($_SESSION['captcha_success_form_ids']) : array();
+    switch ($captcha_persistence) {
+      case CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL:
+        return (count($captcha_success_form_ids) == 0);
+
+      case CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE:
+        return !isset($captcha_success_form_ids[$form_id]);
+    }
+  }
+
+  // We should never get to this point, but to be sure, we return TRUE.
+  return TRUE;
+}
+
+
+/**
+ * Get the CAPTCHA description as configured on the general CAPTCHA settings page.
+ *
+ * If the locale module is enabled, the description will be returned
+ * for the current language the page is rendered for. This language
+ * can optionally been overridden with the $lang_code argument.
+ *
+ * @param string|null $lang_code
+ *   an optional language code to get the description for.
+ *
+ * @return string
+ *   String with (localized) CAPTCHA description.
+ */
+function _captcha_get_description($lang_code = NULL) {
+  // If no language code is given: use the language of the current page.
+  global $language;
+  $lang_code = isset($lang_code) ? $lang_code : $language->language;
+  // The hardcoded but localizable default.
+  $default = t('This question is for testing whether or not you are a human visitor and to prevent automated spam submissions.', array(), array('langcode' => $lang_code));
+  // Look up the configured CAPTCHA description or fall back on the (localized) default.
+  if (module_exists('locale')) {
+    $description = variable_get("captcha_description_$lang_code", $default);
+  }
+  else {
+    $description = variable_get('captcha_description', $default);
+  }
+  return filter_xss_admin($description);
+}
+
+/**
+ * Parse or interpret the given captcha_type.
+ *
+ * @param string $captcha_type
+ *   string representation of the CAPTCHA type,
+ *      e.g. 'default', 'none', 'captcha/Math', 'image_captcha/Image'
+ *
+ * @return array
+ *   list($captcha_module, $captcha_type)
+ */
+function _captcha_parse_captcha_type($captcha_type) {
+  if ($captcha_type == 'none') {
+    return array(NULL, NULL);
+  }
+  if ($captcha_type == 'default') {
+    $captcha_type = variable_get('captcha_default_challenge', 'captcha/Math');
+  }
+  return explode('/', $captcha_type);
+}
+
+/**
+ * Helper function to get placement information for a given form_id.
+ *
+ * @param string $form_id
+ *   the form_id to get the placement information for.
+ *
+ * @param array $form
+ *   if a form corresponding to the given form_id, if there
+ *   is no placement info for the given form_id, this form is examined to
+ *   guess the placement.
+ *
+ * @return array
+ *   placement info array (@see _captcha_insert_captcha_element() for more
+ *   info about the fields 'path', 'key' and 'weight'.
+ */
+function _captcha_get_captcha_placement($form_id, $form) {
+  // Get CAPTCHA placement map from cache. Two levels of cache:
+  // static variable in this function and storage in the variables table.
+  static $placement_map = NULL;
+  // Try first level cache.
+  if ($placement_map === NULL) {
+    // If first level cache missed: try second level cache.
+    $placement_map = variable_get('captcha_placement_map_cache', NULL);
+
+    if ($placement_map === NULL) {
+      // If second level cache missed: initialize the placement map
+      // and let other modules hook into this with the hook_captcha_placement_map hook.
+      // By default however, probably all Drupal core forms are already correctly
+      // handled with the best effort guess based on the 'actions' element (see below).
+      $placement_map = module_invoke_all('captcha_placement_map');
+    }
+  }
+
+  // Query the placement map.
+  if (array_key_exists($form_id, $placement_map)) {
+    $placement = $placement_map[$form_id];
+  }
+  // If no placement info is available in placement map: make a best effort guess.
+  else {
+    // If there is an "actions" button group, a good placement is just before that.
+    if (isset($form['actions']) && isset($form['actions']['#type']) && $form['actions']['#type'] === 'actions') {
+      $placement = array(
+        'path' => array(),
+        'key' => 'actions',
+        // #type 'actions' defaults to 100.
+        'weight' => (isset($form['actions']['#weight']) ? $form['actions']['#weight'] - 1 : 99),
+      );
+    }
+    else {
+      // Search the form for buttons and guess placement from it.
+      $buttons = _captcha_search_buttons($form);
+      if (count($buttons)) {
+        // Pick first button.
+        // TODO: make this more sofisticated? Use cases needed.
+        $placement = $buttons[0];
+      }
+      else {
+        // Use NULL when no buttons were found.
+        $placement = NULL;
+      }
+    }
+
+    // Store calculated placement in cache.
+    $placement_map[$form_id] = $placement;
+    variable_set('captcha_placement_map_cache', $placement_map);
+  }
+
+  return $placement;
+}
+
+/**
+ * Helper function for searching the buttons in a form.
+ *
+ * @param array $form
+ *   the form to search button elements in
+ *
+ * @return array
+ *   an array of paths to the buttons.
+ *   A path is an array of keys leading to the button, the last
+ *   item in the path is the weight of the button element
+ *   (or NULL if undefined).
+ */
+function _captcha_search_buttons($form) {
+  $buttons = array();
+  foreach (element_children($form) as $key) {
+    // Look for submit or button type elements.
+    if (isset($form[$key]['#type']) && ($form[$key]['#type'] == 'submit' || $form[$key]['#type'] == 'button')) {
+      $weight = isset($form[$key]['#weight']) ? $form[$key]['#weight'] : NULL;
+      $buttons[] = array(
+        'path' => array(),
+        'key' => $key,
+        'weight' => $weight,
+      );
+    }
+    // Process children recurively.
+    $children_buttons = _captcha_search_buttons($form[$key]);
+    foreach ($children_buttons as $b) {
+      $b['path'] = array_merge(array($key), $b['path']);
+      $buttons[] = $b;
+    }
+  }
+  return $buttons;
+}
+
+/**
+ * Helper function to insert a CAPTCHA element in a form before a given form element.
+ *
+ * @param array $form
+ *   the form to add the CAPTCHA element to.
+ *
+ * @param array $placement
+ *   information where the CAPTCHA element should be inserted.
+ *   $placement should be an associative array with fields:
+ *     - 'path': path (array of path items) of the container in the form where the
+ *       CAPTCHA element should be inserted.
+ *     - 'key': the key of the element before which the CAPTCHA element
+ *       should be inserted. If the field 'key' is undefined or NULL, the CAPTCHA will
+ *       just be appended in the container.
+ *     - 'weight': if 'key' is not NULL: should be the weight of the element defined by 'key'.
+ *       If 'key' is NULL and weight is not NULL: set the weight property of the CAPTCHA element
+ *       to this value.
+ *
+ * @param array $captcha_element
+ *   the CAPTCHA element to insert.
+ */
+function _captcha_insert_captcha_element(&$form, $placement, $captcha_element) {
+  // Get path, target and target weight or use defaults if not available.
+  $target_key = isset($placement['key']) ? $placement['key'] : NULL;
+  $target_weight = isset($placement['weight']) ? $placement['weight'] : NULL;
+  $path = isset($placement['path']) ? $placement['path'] : array();
+
+  // Walk through the form along the path.
+  $form_stepper = &$form;
+  foreach ($path as $step) {
+    if (isset($form_stepper[$step])) {
+      $form_stepper = & $form_stepper[$step];
+    }
+    else {
+      // Given path is invalid: stop stepping and
+      // continue in best effort (append instead of insert).
+      $target_key = NULL;
+      break;
+    }
+  }
+
+  // If no target is available: just append the CAPTCHA element to the container.
+  if ($target_key == NULL || !array_key_exists($target_key, $form_stepper)) {
+    // Optionally, set weight of CAPTCHA element.
+    if ($target_weight != NULL) {
+      $captcha_element['#weight'] = $target_weight;
+    }
+    $form_stepper['captcha'] = $captcha_element;
+  }
+  // If there is a target available: make sure the CAPTCHA element comes right before it.
+  else {
+    // If target has a weight: set weight of CAPTCHA element a bit smaller
+    // and just append the CAPTCHA: sorting will fix the ordering anyway.
+    if ($target_weight != NULL) {
+      $captcha_element['#weight'] = $target_weight - .1;
+      $form_stepper['captcha'] = $captcha_element;
+    }
+    else {
+      // If we can't play with weights: insert the CAPTCHA element at the right position.
+      // Because PHP lacks a function for this (array_splice() comes close,
+      // but it does not preserve the key of the inserted element), we do it by hand:
+      // chop of the end, append the CAPTCHA element and put the end back.
+      $offset = array_search($target_key, array_keys($form_stepper));
+      $end = array_splice($form_stepper, $offset);
+      $form_stepper['captcha'] = $captcha_element;
+      foreach ($end as $k => $v) {
+        $form_stepper[$k] = $v;
+      }
+    }
+  }
+}
diff --git a/sites/all/modules/contrib/captcha/captcha.info b/sites/all/modules/contrib/captcha/captcha.info
new file mode 100644
index 0000000..5764f7d
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.info
@@ -0,0 +1,18 @@
+name = CAPTCHA
+description = Base CAPTCHA module for adding challenges to arbitrary forms.
+package = "Spam control"
+core = 7.x
+configure = admin/config/people/captcha
+
+files[] = captcha.module
+files[] = captcha.inc
+files[] = captcha.admin.inc
+files[] = captcha.install
+files[] = captcha.test
+
+; Information added by Drupal.org packaging script on 2017-09-06
+version = "7.x-1.5"
+core = "7.x"
+project = "captcha"
+datestamp = "1504724060"
+
diff --git a/sites/all/modules/contrib/captcha/captcha.install b/sites/all/modules/contrib/captcha/captcha.install
new file mode 100644
index 0000000..b34a779
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.install
@@ -0,0 +1,343 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the CAPTCHA module.
+ */
+
+/**
+ * Implementation of hook_schema().
+ */
+function captcha_schema() {
+  // Table for positions and types of the challenges.
+  $schema['captcha_points'] = array(
+    'description' => 'This table describes which challenges should be added to which forms.',
+    'export' => array(
+      'key' => 'form_id',
+      'identifier' => 'captcha',
+      'default hook' => 'captcha_default_points',  // Function hook name.
+      'status' => 'mark_status',
+      'api' => array(
+        'owner' => 'captcha',
+        'api' => 'captcha',  // Base name for api include files.
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+    'fields' => array(
+      'form_id' => array(
+        'description' => 'The form_id of the form to add a CAPTCHA to.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'module' => array(
+        'description' => 'The module that provides the challenge.',
+        'type' => 'varchar',
+        'length' => 64,
+      ),
+      'captcha_type' => array(
+        'description' => 'The challenge type to use.',
+        'type' => 'varchar',
+        'length' => 64,
+      ),
+    ),
+    'primary key' => array('form_id'),
+  );
+  // Table for the CAPTCHA sessions.
+  $schema['captcha_sessions'] = array(
+    'description' => 'Stores the data about CAPTCHA sessions (solution, IP address, timestamp, ...).',
+    'fields' => array(
+      'csid' => array(
+        'description' => 'CAPTCHA session ID.',
+        'type' => 'serial',
+        'not null' => TRUE,
+      ),
+      'token' => array(
+        'description' => 'One time CAPTCHA token.',
+        'type' => 'varchar',
+        'length' => 64,
+        'not null' => FALSE,
+      ),
+      'uid' => array(
+        'description' => "User's {users}.uid.",
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'sid' => array(
+        'description' => "Session ID of the user.",
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'ip_address' => array(
+        'description' => 'IP address of the visitor.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => FALSE,
+      ),
+      'timestamp' => array(
+        'description' => 'A Unix timestamp indicating when the challenge was generated.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'form_id' => array(
+        'description' => 'The form_id of the form where the CAPTCHA is added to.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+      ),
+      'solution' => array(
+        'description' => 'Solution of the challenge.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'status' => array(
+        'description' => 'Status of the CAPTCHA session (unsolved, solved, ...)',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'attempts' => array(
+        'description' => 'The number of attempts.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'primary key' => array('csid'),
+    'indexes' => array(
+      'csid_ip' => array('csid', 'ip_address'),
+    ),
+  );
+
+  return $schema;
+}
+
+/**
+ * Implements of hook_requirements().
+ */
+function captcha_requirements($phase) {
+  $requirements = array();
+  $t = get_t();
+  if ($phase == 'runtime' && variable_get('captcha_enable_stats', FALSE)) {
+    // Show the wrong response counter in the status report.
+    $requirements['captcha_wrong_response_counter'] = array(
+      'title' => $t('CAPTCHA'),
+      'value' => format_plural(
+        variable_get('captcha_wrong_response_counter', 0),
+        'Already 1 blocked form submission',
+        'Already @count blocked form submissions'
+      ),
+      'severity' => REQUIREMENT_INFO,
+    );
+  }
+  return $requirements;
+}
+
+/**
+ * Implements of hook_install().
+ */
+function captcha_install() {
+  $t = get_t();
+
+  // Be friendly to your users: what to do after install?
+  drupal_set_message($t('You can now <a href="!captcha_admin">configure the CAPTCHA module</a> for your site.',
+    array('!captcha_admin' => url('admin/config/people/captcha'))), 'status');
+
+  // Explain to users that page caching may be disabled.
+  if (variable_get('cache', 0) != 0) {
+    drupal_set_message($t('Note that the CAPTCHA module disables <a href="!performance_admin">page caching</a> of pages that include a CAPTCHA challenge.',
+      array('!performance_admin' => url('admin/config/development/performance'))), 'warning');
+  }
+
+}
+
+/**
+ * Implements of hook_uninstall().
+ */
+function captcha_uninstall() {
+  drupal_uninstall_schema('captcha');
+  db_query("DELETE FROM {variable} WHERE name LIKE 'captcha_%'");
+  cache_clear_all('variables', 'cache');
+}
+
+/**
+ * Implements of hook_update_N().
+ */
+function captcha_update_6200() {
+  $items = array();
+
+  // Table for the CAPTCHA sessions.
+  $schema['captcha_sessions'] = array(
+    'description' => 'Stores the data about CAPTCHA sessions (solution, IP address, timestamp, ...).',
+    'fields' => array(
+      'csid' => array(
+        'description' => 'CAPTCHA session ID.',
+        'type' => 'serial',
+        'not null' => TRUE,
+      ),
+      'uid' => array(
+        'description' => "User's {users}.uid.",
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'sid' => array(
+        'description' => "Session ID of the user.",
+        'type' => 'varchar',
+        'length' => 64,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'ip_address' => array(
+        'description' => 'IP address of the visitor.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => FALSE,
+      ),
+      'timestamp' => array(
+        'description' => 'A Unix timestamp indicating when the challenge was generated.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'form_id' => array(
+        'description' => 'The form_id of the form where the CAPTCHA is added to.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+      ),
+      'solution' => array(
+        'description' => 'Solution of the challenge.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'status' => array(
+        'description' => 'Status of the CAPTCHA session (unsolved, solved, ...)',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'attempts' => array(
+        'description' => 'The number of attempts.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'primary key' => array('csid'),
+    'indexes' => array(
+      'csid_ip' => array('csid', 'ip_address'),
+    ),
+  );
+
+  db_create_table($items, 'captcha_sessions', $schema['captcha_sessions']);
+
+  return $items;
+}
+
+/**
+ * Implements of hook_update_N().
+ *
+ * Change the captcha points with the old text CAPTCHA, which was
+ * removed from the 6.x-2.x branch, to the simple math CAPTCHA.
+ */
+function captcha_update_6201() {
+  $items = array();
+  $items[] = update_sql("UPDATE {captcha_points} SET module = 'captcha', type = 'Math' WHERE module = 'text_captcha' AND type = 'Text';");
+  return $items;
+}
+
+/**
+ * Implements of hook_update_N().
+ *
+ * Add a CAPTCHA token column to captcha_sessions table.
+ */
+function captcha_update_6202() {
+  $ret = array();
+  db_add_column($ret, 'captcha_sessions', 'token', 'varchar(64)');
+  return $ret;
+}
+
+/**
+ * Implements of hook_update_N().
+ *
+ * Rename the type field to captcha_type in captcha_points.
+ */
+function captcha_update_6203() {
+  $ret = array();
+  db_change_field($ret, 'captcha_points', 'type', 'captcha_type', array('type' => 'varchar', 'length' => 64));
+  return $ret;
+}
+
+/**
+ * Migrate form configuration for changed form ids in Drupal 7.
+ */
+function captcha_update_7000() {
+  // 'user_register' became 'user_register_form'.
+  db_update('captcha_points')
+    ->fields(array('form_id' => 'user_register_form'))
+    ->condition('form_id', 'user_register')
+    ->execute();
+  // 'contact_mail_page' became 'contact_site_form'.
+  db_update('captcha_points')
+    ->fields(array('form_id' => 'contact_site_form'))
+    ->condition('form_id', 'contact_mail_page')
+    ->execute();
+  // 'contact_mail_user' became 'contact_personal_form'.
+  db_update('captcha_points')
+    ->fields(array('form_id' => 'contact_personal_form'))
+    ->condition('form_id', 'contact_mail_user')
+    ->execute();
+
+  // The D6-style comment_form form_id is split per node type
+  // in D7: comment_node_{type}_form, e.g. comment_node_page_form.
+  // Get the current settings for 'comment_form'.
+  $captcha_point = db_query(
+    "SELECT * FROM {captcha_points} WHERE form_id = :comment_form_id",
+    array(':comment_form_id' => 'comment_form')
+  )->fetchObject();
+  if ($captcha_point !== FALSE) {
+    // Create entries for D7-style node form IDs.
+    $module = $captcha_point->module;
+    $captcha_type = $captcha_point->captcha_type;
+    foreach (node_type_get_names() as $type => $name) {
+      $form_id = 'comment_node_' . $type . '_form';
+      db_insert('captcha_points')
+        ->fields(array(
+          'form_id' => $form_id,
+          'module' => $module,
+          'captcha_type' => $captcha_type,
+        ))
+        ->execute();
+    }
+    // Delete outdated entry.
+    db_delete('captcha_points')
+      ->condition('form_id', 'comment_form')
+      ->execute();
+  }
+}
+
+/**
+ * Increase the Session Id field size.
+ */
+function captcha_update_7001() {
+  $schema = captcha_schema();
+
+  db_change_field('captcha_sessions', 'sid', 'sid', array(
+    'description' => "Session ID of the user.",
+    'type' => 'varchar',
+    'length' => 128,
+    'not null' => TRUE,
+    'default' => '',
+  ));
+}
diff --git a/sites/all/modules/contrib/captcha/captcha.js b/sites/all/modules/contrib/captcha/captcha.js
new file mode 100644
index 0000000..fe3114d
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.js
@@ -0,0 +1,40 @@
+(function ($) {
+
+  Drupal.behaviors.captcha = {
+    attach: function (context) {
+
+      // Turn off autocompletion for the CAPTCHA response field.
+      // We do it here with JavaScript (instead of directly in the markup)
+      // because this autocomplete attribute is not standard and
+      // it would break (X)HTML compliance.
+      $("#edit-captcha-response").attr("autocomplete", "off");
+
+    }
+  };
+
+  Drupal.behaviors.captchaAdmin = {
+    attach: function (context) {
+      // Add onclick handler to checkbox for adding a CAPTCHA description
+      // so that the textfields for the CAPTCHA description are hidden
+      // when no description should be added.
+      // @todo: div.form-item-captcha-description depends on theming, maybe
+      // it's better to add our own wrapper with id (instead of a class).
+      $("#edit-captcha-add-captcha-description").click(function() {
+        if ($("#edit-captcha-add-captcha-description").is(":checked")) {
+          // Show the CAPTCHA description textfield(s).
+          $("div.form-item-captcha-description").show('slow');
+        }
+        else {
+          // Hide the CAPTCHA description textfield(s).
+          $("div.form-item-captcha-description").hide('slow');
+        }
+      });
+      // Hide the CAPTCHA description textfields if option is disabled on page load.
+      if (!$("#edit-captcha-add-captcha-description").is(":checked")) {
+        $("div.form-item-captcha-description").hide();
+      }
+    }
+
+  };
+
+})(jQuery);
diff --git a/sites/all/modules/contrib/captcha/captcha.module b/sites/all/modules/contrib/captcha/captcha.module
new file mode 100644
index 0000000..50cbe15
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.module
@@ -0,0 +1,857 @@
+<?php
+
+/**
+ * @file
+ * This module enables basic CAPTCHA functionality:
+ * administrators can add a CAPTCHA to desired forms that users without
+ * the 'skip CAPTCHA' permission (typically anonymous visitors) have
+ * to solve.
+ */
+
+/**
+ * Constants for CAPTCHA persistence.
+ * TODO: change these integers to strings because the CAPTCHA settings form saves them as strings in the variables table anyway?
+ */
+
+// Always add a CAPTCHA (even on every page of a multipage workflow).
+define('CAPTCHA_PERSISTENCE_SHOW_ALWAYS', 0);
+// Only one CAPTCHA has to be solved per form instance/multi-step workflow.
+define('CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE', 1);
+// Once the user answered correctly for a CAPTCHA on a certain form type,
+// no more CAPTCHAs will be offered anymore for that form.
+define('CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE', 2);
+// Once the user answered correctly for a CAPTCHA on the site,
+// no more CAPTCHAs will be offered anymore.
+define('CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL', 3);
+
+define('CAPTCHA_STATUS_UNSOLVED', 0);
+define('CAPTCHA_STATUS_SOLVED', 1);
+define('CAPTCHA_STATUS_EXAMPLE', 2);
+
+define('CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE', 0);
+define('CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE', 1);
+
+/**
+ * Implementation of hook_help().
+ */
+function captcha_help($path, $arg) {
+  switch ($path) {
+    case 'admin/help#captcha':
+      $output = '<p>' . t('"CAPTCHA" is an acronym for "Completely Automated Public Turing test to tell Computers and Humans Apart". It is typically a challenge-response test to determine whether the user is human. The CAPTCHA module is a tool to fight automated submission by malicious users (spamming) of for example comments forms, user registration forms, guestbook forms, etc. You can extend the desired forms with an additional challenge, which should be easy for a human to solve correctly, but hard enough to keep automated scripts and spam bots out.') . '</p>';
+      $output .= '<p>' . t('Note that the CAPTCHA module interacts with page caching (see <a href="!performancesettings">performance settings</a>). Because the challenge should be unique for each generated form, the caching of the page it appears on is prevented. Make sure that these forms do not appear on too many pages or you will lose much caching efficiency. For example, if you put a CAPTCHA on the user login block, which typically appears on each page for anonymous visitors, caching will practically be disabled. The comment submission forms are another example. In this case you should set the <em>Location of comment submission form</em> to <em>Display on separate page</em> in the comment settings of the relevant <a href="!contenttypes">content types</a> for better caching efficiency.',
+        array(
+          '!performancesettings' => url('admin/config/development/performance'),
+          '!contenttypes' => url('admin/structure/types'),
+        )
+      ) . '</p>';
+      $output .= '<p>' . t('CAPTCHA is a trademark of Carnegie Mellon University.') . '</p>';
+      return $output;
+
+    case 'admin/config/people/captcha':
+    case 'admin/config/people/captcha/captcha':
+    case 'admin/config/people/captcha/captcha/settings':
+      $output = '<p>' . t('A CAPTCHA can be added to virtually each Drupal form. Some default forms are already provided in the form list, but arbitrary forms can be easily added and managed when the option <em>Add CAPTCHA administration links to forms</em> is enabled.') . '</p>';
+      $output .= '<p>' . t('Users with the <em>Skip CAPTCHA</em> <a href="@perm">permission</a> won\'t be offered a challenge. Be sure to grant this permission to the trusted users (e.g. site administrators). If you want to test a protected form, be sure to do it as a user without the <em>Skip CAPTCHA</em> permission (e.g. as anonymous user).', array('@perm' => url('admin/people/permissions'))) . '</p>';
+      return $output;
+  }
+}
+
+/**
+ * Implements of hook_menu().
+ */
+function captcha_menu() {
+  $items = array();
+  // Main configuration page of the basic CAPTCHA module.
+  $items['admin/config/people/captcha'] = array(
+    'title' => 'CAPTCHA',
+    'description' => 'Administer how and where CAPTCHAs are used.',
+    'file' => 'captcha.admin.inc',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('captcha_admin_settings'),
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_NORMAL_ITEM,
+  );
+  // The default local task (needed when other modules want to offer,
+  // alternative CAPTCHA types and their own configuration page as local task).
+  $items['admin/config/people/captcha/captcha'] = array(
+    'title' => 'CAPTCHA',
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => -20,
+  );
+  $items['admin/config/people/captcha/captcha/settings'] = array(
+    'title' => 'General settings',
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => 0,
+  );
+  $items['admin/config/people/captcha/captcha/examples'] = array(
+    'title' => 'Examples',
+    'description' => 'An overview of the available challenge types with examples.',
+    'file' => 'captcha.admin.inc',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('captcha_examples', 6, 7),
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_LOCAL_TASK,
+    'weight' => 5,
+  );
+  $items['admin/config/people/captcha/captcha/captcha_point'] = array(
+    'title' => 'CAPTCHA point administration',
+    'file' => 'captcha.admin.inc',
+    'page callback' => 'captcha_point_admin',
+    'page arguments' => array(6, 7),
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_CALLBACK,
+  );
+  return $items;
+}
+
+/**
+ * Implements of hook_permission().
+ */
+function captcha_permission() {
+  return array(
+    'administer CAPTCHA settings' => array(
+      'title' => t('Administer CAPTCHA settings'),
+    ),
+    'skip CAPTCHA' => array(
+      'title' => t('Skip CAPTCHA'),
+      'description' => t('Users with this permission will not be offered a CAPTCHA.'),
+    ),
+  );
+}
+
+/**
+ * Implements of hook_theme().
+ */
+function captcha_theme() {
+  return array(
+    'captcha_admin_settings_captcha_points' => array(
+      'render element' => 'form',
+    ),
+    'captcha' => array(
+      'render element' => 'element',
+    ),
+  );
+}
+
+/**
+ * Implements of hook_cron().
+ *
+ * Remove old entries from captcha_sessions table.
+ */
+function captcha_cron() {
+  // Remove challenges older than 1 day.
+  db_delete('captcha_sessions')
+    ->condition('timestamp', REQUEST_TIME - 60 * 60 * 24, '<')
+    ->execute();
+}
+
+/**
+ * Implements of hook_element_info().
+ */
+function captcha_element_info() {
+  // Define the CAPTCHA form element with default properties.
+  $captcha_element = array(
+    '#input' => TRUE,
+    '#process' => array('captcha_element_process'),
+    // The type of challenge: e.g. 'default', 'none', 'captcha/Math', 'image_captcha/Image'.
+    '#captcha_type' => 'default',
+    // Forces captcha validation for all cases if TRUE.
+    '#captcha_always' => FALSE,
+    '#default_value' => '',
+    // CAPTCHA in admin mode: presolve the CAPTCHA and always show it (despite previous successful responses).
+    '#captcha_admin_mode' => FALSE,
+    // The default CAPTCHA validation function.
+    // TODO: should this be a single string or an array of strings (combined in OR fashion)?
+    '#captcha_validate' => 'captcha_validate_strict_equality',
+  );
+  // Override the default CAPTCHA validation function for case insensitive validation.
+  // TODO: shouldn't this be done somewhere else, e.g. in form_alter?
+  if (CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE == variable_get('captcha_default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE)) {
+    $captcha_element['#captcha_validate'] = 'captcha_validate_case_insensitive_equality';
+  }
+  return array('captcha' => $captcha_element);
+}
+
+/**
+ * Process callback for CAPTCHA form element.
+ */
+function captcha_element_process($element, &$form_state, $complete_form) {
+
+  module_load_include('inc', 'captcha');
+
+  // Add JavaScript for general CAPTCHA functionality.
+  drupal_add_js(drupal_get_path('module', 'captcha') . '/captcha.js');
+
+  // Prevent caching of the page with CAPTCHA elements.
+  // This needs to be done even if the CAPTCHA will be ommitted later:
+  // other untrusted users should not get a cached page when
+  // the current untrusted user can skip the current CAPTCHA.
+  drupal_page_is_cacheable(FALSE);
+
+  // Get the form ID of the form we are currently processing (which is not
+  // necessary the same form that is submitted (if any).
+  $this_form_id = $complete_form['form_id']['#value'];
+
+  // Get the CAPTCHA session ID.
+  // If there is a submitted form: try to retrieve and reuse the
+  // CAPTCHA session ID from the posted data.
+  list($posted_form_id, $posted_captcha_sid) = _captcha_get_posted_captcha_info($element, $form_state, $this_form_id);
+  if ($this_form_id == $posted_form_id && isset($posted_captcha_sid)) {
+    $captcha_sid = $posted_captcha_sid;
+  }
+  else {
+    // Generate a new CAPTCHA session if we could not reuse one from a posted form.
+    $captcha_sid = _captcha_generate_captcha_session($this_form_id, CAPTCHA_STATUS_UNSOLVED);
+  }
+
+  // Store CAPTCHA session ID as hidden field.
+  // Strictly speaking, it is not necessary to send the CAPTCHA session id
+  // with the form, as the one time CAPTCHA token (see lower) is enough.
+  // However, we still send it along, because it can help debugging
+  // problems on live sites with only access to the markup.
+  $element['captcha_sid'] = array(
+    '#type' => 'hidden',
+    '#value' => $captcha_sid,
+  );
+
+  $captcha_token = db_select('captcha_sessions', 'c')
+    ->fields('c', array('token'))
+    ->condition('csid', $captcha_sid)
+    ->execute()
+    ->fetchField();
+  if (!isset($captcha_token) && !$form_state['submitted']) {
+    // Additional one-time CAPTCHA token: store in database and send with form.
+    $captcha_token = md5(mt_rand());
+    db_update('captcha_sessions')
+      ->fields(array('token' => $captcha_token))
+      ->condition('csid', $captcha_sid)
+      ->execute();
+  }
+
+  $element['captcha_token'] = array(
+    '#type' => 'hidden',
+    '#value' => $captcha_token,
+  );
+
+  // Get implementing module and challenge for CAPTCHA.
+  list($captcha_type_module, $captcha_type_challenge) = _captcha_parse_captcha_type($element['#captcha_type']);
+
+  // Store CAPTCHA information for further processing in
+  // - $form_state['captcha_info'], which survives a form rebuild (e.g. node
+  //   preview), useful in _captcha_get_posted_captcha_info().
+  // - $element['#captcha_info'], for post processing functions that do not
+  //   receive a $form_state argument (e.g. the pre_render callback).
+  $form_state['captcha_info'] = array(
+    'this_form_id' => $this_form_id,
+    'posted_form_id' => $posted_form_id,
+    'captcha_sid' => $captcha_sid,
+    'module' => $captcha_type_module,
+    'captcha_type' => $captcha_type_challenge,
+  );
+  $element['#captcha_info'] = array(
+    'form_id' => $this_form_id,
+    'captcha_sid' => $captcha_sid,
+  );
+
+  if (_captcha_required_for_user($captcha_sid, $this_form_id) || $element['#captcha_admin_mode'] || $element['#captcha_always']) {
+    // Generate a CAPTCHA and its solution
+    // (note that the CAPTCHA session ID is given as third argument).
+    $captcha = module_invoke($captcha_type_module, 'captcha', 'generate', $captcha_type_challenge, $captcha_sid);
+    if (!isset($captcha['form']) || !isset($captcha['solution'])) {
+      // The selected module did not return what we expected: log about it and quit.
+      watchdog('CAPTCHA',
+        'CAPTCHA problem: unexpected result from hook_captcha() of module %module when trying to retrieve challenge type %type for form %form_id.',
+        array(
+          '%type' => $captcha_type_challenge,
+          '%module' => $captcha_type_module,
+          '%form_id' => $this_form_id,
+        ),
+        WATCHDOG_ERROR);
+      return $element;
+    }
+    // Add form elements from challenge as children to CAPTCHA form element.
+    $element['captcha_widgets'] = $captcha['form'];
+
+    // Add a validation callback for the CAPTCHA form element (when not in admin mode).
+    if (!$element['#captcha_admin_mode']) {
+      $element['#element_validate'] = array('captcha_validate');
+    }
+
+    // Set a custom CAPTCHA validate function if requested.
+    if (isset($captcha['captcha_validate'])) {
+      $element['#captcha_validate'] = $captcha['captcha_validate'];
+    }
+
+    // Set the theme function.
+    $element['#theme'] = 'captcha';
+
+    // Add pre_render callback for additional CAPTCHA processing.
+    if (!isset($element['#pre_render'])) {
+      $element['#pre_render'] = array();
+    }
+    $element['#pre_render'][] = 'captcha_pre_render_process';
+
+    // Store the solution in the #captcha_info array.
+    $element['#captcha_info']['solution'] = $captcha['solution'];
+
+    // Make sure we can use a top level form value $form_state['values']['captcha_response'], even if the form has #tree=true.
+    $element['#tree'] = FALSE;
+
+  }
+
+  return $element;
+}
+
+/**
+ * Implementation of hook_captcha_default_points_alter().
+ *
+ * Provide some default captchas only if defaults are not already
+ * provided by other modules.
+ */
+function captcha_captcha_default_points_alter(&$items) {
+  $modules = array(
+    'comment' => array(
+    ),
+    'contact' => array(
+      'contact_site_form',
+      'contact_personal_form'
+    ),
+    'forum' => array(
+      'forum_node_form',
+    ),
+    'user' => array(
+      'user_register_form',
+      'user_pass',
+      'user_login',
+      'user_login_block',
+    ),
+  );
+  // Add comment form_ids of all currently known node types.
+  foreach (node_type_get_names() as $type => $name) {
+    $modules['comment'][] = 'comment_node_' . $type . '_form';
+  }
+
+  foreach ($modules as $module => $form_ids) {
+    // Only give defaults if the module exists.
+    if (module_exists($module)) {
+      foreach ($form_ids as $form_id) {
+        // Ensure a default has not been provided already.
+        if (!isset($items[$form_id])) {
+          $captcha = new stdClass;
+          $captcha->disabled = FALSE;
+          $captcha->api_version = 1;
+          $captcha->form_id = $form_id;
+          $captcha->module = '';
+          $captcha->captcha_type = 'default';
+          $items[$form_id] = $captcha;
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Theme function for a CAPTCHA element.
+ *
+ * Render it in a fieldset if a description of the CAPTCHA
+ * is available. Render it as is otherwise.
+ */
+function theme_captcha($variables) {
+  $element = $variables['element'];
+  if (!empty($element['#description']) && isset($element['captcha_widgets'])) {
+    $fieldset = array(
+      '#type' => 'fieldset',
+      '#title' => t('CAPTCHA'),
+      '#description' => $element['#description'],
+      '#children' => drupal_render_children($element),
+      '#attributes' => array('class' => array('captcha')),
+    );
+    return theme('fieldset', array('element' => $fieldset));
+  }
+  else {
+    return '<div class="captcha">' . drupal_render_children($element) . '</div>';
+  }
+}
+
+/**
+ * Implements of hook_form_alter().
+ *
+ * This function adds a CAPTCHA to forms for untrusted users if needed and adds
+ * CAPTCHA administration links for site administrators if this option is enabled.
+ */
+function captcha_form_alter(&$form, &$form_state, $form_id) {
+
+  if (!user_access('skip CAPTCHA')) {
+    // Visitor does not have permission to skip CAPTCHAs.
+    module_load_include('inc', 'captcha');
+
+    // Get CAPTCHA type and module for given form_id.
+    $captcha_point = captcha_get_form_id_setting($form_id);
+    if ($captcha_point && !empty($captcha_point->captcha_type)) {
+      module_load_include('inc', 'captcha');
+      // Build CAPTCHA form element.
+      $captcha_element = array(
+        '#type' => 'captcha',
+        '#captcha_type' => $captcha_point->module . '/' . $captcha_point->captcha_type,
+      );
+      // Add a CAPTCHA description if required.
+      if (variable_get('captcha_add_captcha_description', TRUE)) {
+        $captcha_element['#description'] = _captcha_get_description();
+      }
+
+      // Get placement in form and insert in form.
+      $captcha_placement = _captcha_get_captcha_placement($form_id, $form);
+      _captcha_insert_captcha_element($form, $captcha_placement, $captcha_element);
+    }
+  }
+  elseif (
+    variable_get('captcha_administration_mode', FALSE)
+    && user_access('administer CAPTCHA settings')
+    && (arg(0) != 'admin' || variable_get('captcha_allow_on_admin_pages', FALSE))
+  ) {
+    // Add CAPTCHA administration tools.
+    module_load_include('inc', 'captcha');
+
+    $captcha_point = captcha_get_form_id_setting($form_id);
+    // For administrators: show CAPTCHA info and offer link to configure it.
+    $captcha_element = array(
+      '#type' => 'fieldset',
+      '#title' => t('CAPTCHA'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#attributes' => array('class' => array('captcha-admin-links')),
+    );
+    if ($captcha_point !== NULL && $captcha_point->captcha_type) {
+      $captcha_element['#title'] = t('CAPTCHA: challenge "@type" enabled', array('@type' => $captcha_point->captcha_type));
+      $captcha_element['#description'] = t('Untrusted users will see a CAPTCHA here (<a href="@settings">general CAPTCHA settings</a>).',
+        array('@settings' => url('admin/config/people/captcha'))
+      );
+      $captcha_element['challenge'] = array(
+        '#type' => 'item',
+        '#title' => t('Enabled challenge'),
+        '#markup' => t('%type by module %module (<a href="@change">change</a>, <a href="@disable">disable</a>)', array(
+          '%type' => $captcha_point->captcha_type,
+          '%module' => $captcha_point->module,
+          '@change' => url("admin/config/people/captcha/captcha/captcha_point/$form_id", array('query' => drupal_get_destination())),
+          '@disable' => url("admin/config/people/captcha/captcha/captcha_point/$form_id/disable", array('query' => drupal_get_destination())),
+        )),
+      );
+      // Add an example challenge with solution.
+      // This does not work with the reCAPTCHA and Egglue challenges as
+      // discussed in http://drupal.org/node/487032 and
+      // http://drupal.org/node/525586. As a temporary workaround, we
+      // blacklist the reCAPTCHA and Egglue challenges and do not show
+      // an example challenge.
+      // TODO: Once the issues mentioned above are fixed, this workaround
+      // should be removed.
+      if ($captcha_point->module != 'recaptcha' && $captcha_point->module != 'egglue_captcha') {
+        $captcha_element['example'] = array(
+          '#type' => 'fieldset',
+          '#title' => t('Example'),
+          '#description' => t('This is a pre-solved, non-blocking example of this challenge.'),
+        );
+        $captcha_element['example']['example_captcha'] = array(
+          '#type' => 'captcha',
+          '#captcha_type' => $captcha_point->module . '/' . $captcha_point->captcha_type,
+          '#captcha_admin_mode' => TRUE,
+        );
+      }
+    }
+    else {
+      $captcha_element['#title'] = t('CAPTCHA: no challenge enabled');
+      $captcha_element['add_captcha'] = array(
+        '#markup' => l(t('Place a CAPTCHA here for untrusted users.'), "admin/config/people/captcha/captcha/captcha_point/$form_id", array('query' => drupal_get_destination()))
+      );
+
+    }
+    // Get placement in form and insert in form.
+    $captcha_placement = _captcha_get_captcha_placement($form_id, $form);
+    _captcha_insert_captcha_element($form, $captcha_placement, $captcha_element);
+
+  }
+
+  // Add a warning about caching on the Perfomance settings page.
+  if ($form_id == 'system_performance_settings') {
+    $icon = theme(
+      'image',
+      array(
+        'path' => 'misc/watchdog-warning.png',
+        'width' => 18,
+        'height' => 18,
+        'alt' => t('warning'),
+        'title' => t('warning'),
+      )
+    );
+    $form['caching']['captcha'] = array(
+      '#type' => 'item',
+      '#title' => t('CAPTCHA'),
+      '#markup' => t(
+        '!icon The CAPTCHA module will disable the caching of pages that contain a CAPTCHA element.',
+        array(
+          '!icon' => '<span class="icon">' . $icon . '</span>'
+        )
+      ),
+      '#attributes' => array('class' => array('warning')),
+    );
+  }
+
+}
+
+/**
+ * CAPTCHA validation function to tests strict equality.
+ *
+ * @param string $solution
+ *   the solution of the test.
+ *
+ * @param string $response
+ *   the response to the test.
+ *
+ * @return bool
+ *   TRUE when equal (ignoring spaces), FALSE otherwise.
+ */
+function captcha_validate_strict_equality($solution, $response) {
+  return $solution === $response;
+}
+
+/**
+ * CAPTCHA validation function to tests case insensitive equality.
+ *
+ * @param string $solution
+ *   the solution of the test.
+ *
+ * @param string $response
+ *   the response to the test.
+ *
+ * @return bool
+ *   TRUE when equal (ignoring spaces), FALSE otherwise.
+ */
+function captcha_validate_case_insensitive_equality($solution, $response) {
+  return drupal_strtolower($solution) === drupal_strtolower($response);
+}
+
+/**
+ * CAPTCHA validation function to tests equality while ignoring spaces.
+ *
+ * @param string $solution
+ *   the solution of the test.
+ *
+ * @param string $response
+ *   the response to the test.
+ *
+ * @return bool
+ *   TRUE when equal (ignoring spaces), FALSE otherwise.
+ */
+function captcha_validate_ignore_spaces($solution, $response) {
+  return preg_replace('/\s/', '', $solution) === preg_replace('/\s/', '', $response);
+}
+
+/**
+ * CAPTCHA validation function to tests case insensitive equality while ignoring spaces.
+ *
+ * @param string $solution
+ *   the solution of the test.
+ *
+ * @param string $response
+ *   the response to the test.
+ *
+ * @return bool
+ *   TRUE when equal (ignoring spaces), FALSE otherwise.
+ */
+function captcha_validate_case_insensitive_ignore_spaces($solution, $response) {
+  return preg_replace('/\s/', '', drupal_strtolower($solution)) === preg_replace('/\s/', '', drupal_strtolower($response));
+}
+
+/**
+ * Helper function for getting the posted CAPTCHA info (posted form_id and
+ * CAPTCHA sessions ID) from a form in case it is posted.
+ *
+ * This function hides the form processing mess for several use cases an
+ * browser bug workarounds.
+ * For example: $element['#post'] can typically be used to get the posted
+ * form_id and captcha_sid, but in the case of node preview situations
+ * (with correct CAPTCHA response) that does not work and we can get them from
+ * $form_state['clicked_button']['#post'].
+ * However with Internet Explorer 7, the latter does not work either when
+ * submitting the forms (with only one text field) with the enter key
+ * (see http://drupal.org/node/534168), in which case we also have to check
+ * $form_state['buttons']['button']['0']['#post'].
+ *
+ * @todo for Drupal 7 version: is this IE7 workaround still needed?
+ *
+ * @param array $element
+ *   the CAPTCHA element.
+ *
+ * @param array $form_state
+ *   the form state structure to extract the info from.
+ *
+ * @param string $this_form_id
+ *   the form ID of the form we are currently processing
+ *     (which is not necessarily the form that was posted).
+ *
+ * @return array
+ *   an array with $posted_form_id and $post_captcha_sid (with NULL values
+ *     if the values could not be found, e.g. for a fresh form).
+ */
+function _captcha_get_posted_captcha_info($element, $form_state, $this_form_id) {
+  //Handle Ajax scenarios
+  if (!empty($form_state['rebuild_info'])) {
+    if (!empty($form_state['captcha_info']['posted_form_id'])) {
+      $posted_form_id = $form_state['captcha_info']['posted_form_id'];
+    }
+    else {
+      $posted_form_id = $form_state['input']['form_id'];
+    }
+
+    $posted_captcha_sid = $form_state['captcha_info']['captcha_sid'];
+  }
+  else if ($form_state['submitted'] && isset($form_state['captcha_info'])) {
+    // We are handling (or rebuilding) an already submitted form,
+    // so we already determined the posted form ID and CAPTCHA session ID
+    // for this form (from before submitting). Reuse this info.
+    $posted_form_id = $form_state['captcha_info']['posted_form_id'];
+    $posted_captcha_sid = $form_state['captcha_info']['captcha_sid'];
+  }
+  else {
+    // We have to determine the posted form ID and CAPTCHA session ID
+    // from the post data.
+    // Because we possibly use raw post data here,
+    // we should be extra cautious and filter this data.
+    $posted_form_id = isset($form_state['input']['form_id']) ? preg_replace("/[^a-z0-9_]/", "", (string) $form_state['input']['form_id']) : NULL;
+    $posted_captcha_sid = isset($form_state['input']['captcha_sid']) ? (int) $form_state['input']['captcha_sid'] : NULL;
+    $posted_captcha_token = !empty($form_state['input']['captcha_token']) ? preg_replace("/[^a-zA-Z0-9]/", "", (string) $form_state['input']['captcha_token']) : NULL;
+
+    if ($posted_form_id == $this_form_id) {
+      // Check if the posted CAPTCHA token is valid for the posted CAPTCHA
+      // session ID. Note that we could just check the validity of the CAPTCHA
+      // token and extract the CAPTCHA session ID from that (without looking at
+      // the actual posted CAPTCHA session ID). However, here we check both
+      // the posted CAPTCHA token and session ID: it is a bit more stringent
+      // and the database query should also be more efficient (because there is
+      // an index on the CAPTCHA session ID).
+      if ($posted_captcha_sid != NULL) {
+        $expected_captcha_token = db_query(
+          "SELECT token FROM {captcha_sessions} WHERE csid = :csid",
+          array(':csid' => $posted_captcha_sid)
+        )->fetchField();
+
+        if ($expected_captcha_token !== $posted_captcha_token) {
+          drupal_set_message(t('CAPTCHA session reuse attack detected.'), 'error');
+          // Invalidate the CAPTCHA session.
+          $posted_captcha_sid = NULL;
+        }
+
+        // Invalidate CAPTCHA token to avoid reuse.
+        db_update('captcha_sessions')
+          ->fields(array('token' => NULL))
+          ->condition('csid', $posted_captcha_sid)
+          ->execute();
+      }
+    }
+    else {
+      // The CAPTCHA session ID is specific to the posted form.
+      // Return NULL, so a new session will be generated for this other form.
+      $posted_captcha_sid = NULL;
+    }
+  }
+  return array($posted_form_id, $posted_captcha_sid);
+}
+
+/**
+ * CAPTCHA validation handler.
+ *
+ * This function is placed in the main captcha.module file to make sure that
+ * it is available (even for cached forms, which don't fire
+ * captcha_form_alter(), and subsequently don't include additional include
+ * files).
+ */
+function captcha_validate($element, &$form_state) {
+  // If disable captcha mode is enabled, bypass captcha validation.
+  if (variable_get('disable_captcha', FALSE)) {
+    return;
+  }
+
+  $captcha_info = $form_state['captcha_info'];
+  $form_id = $captcha_info['this_form_id'];
+
+  // Get CAPTCHA response.
+  $captcha_response = $form_state['values']['captcha_response'];
+
+  // Get CAPTCHA session from CAPTCHA info
+  // TODO: is this correct in all cases: see comment and code in previous revisions?
+  $csid = $captcha_info['captcha_sid'];
+
+  $solution = db_query(
+    'SELECT solution FROM {captcha_sessions} WHERE csid = :csid',
+    array(':csid' => $csid)
+    )
+    ->fetchField();
+
+  // @todo: what is the result when there is no entry for the captcha_session? in D6 it was FALSE, what in D7?
+  if ($solution === FALSE) {
+    // Unknown challenge_id.
+    // TODO: this probably never happens anymore now that there is detection
+    // for CAPTCHA session reuse attacks in _captcha_get_posted_captcha_info().
+    form_set_error('captcha', t('CAPTCHA validation error: unknown CAPTCHA session ID. Contact the site administrator if this problem persists.'));
+    watchdog('CAPTCHA',
+      'CAPTCHA validation error: unknown CAPTCHA session ID (%csid).',
+      array('%csid' => var_export($csid, TRUE)),
+      WATCHDOG_ERROR);
+  }
+  else {
+    // Get CAPTCHA validate function or fall back on strict equality.
+    $captcha_validate = $element['#captcha_validate'];
+    if (!function_exists($captcha_validate)) {
+      $captcha_validate = 'captcha_validate_strict_equality';
+    }
+    // Check the response with the CAPTCHA validation function.
+    // Apart from the traditional expected $solution and received $response,
+    // we also provide the CAPTCHA $element and $form_state arrays for more advanced use cases.
+    if ($captcha_validate($solution, $captcha_response, $element, $form_state)) {
+      // Correct answer.
+
+      // Store form_id in session (but only if it is useful to do so, avoid setting stuff in session unnecessarily).
+      $captcha_persistence = variable_get('captcha_persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+      if ($captcha_persistence == CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL || $captcha_persistence == CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE) {
+        $_SESSION['captcha_success_form_ids'][$form_id] = $form_id;
+      }
+
+      // Record success.
+      db_update('captcha_sessions')
+        ->condition('csid', $csid)
+        ->fields(array('status' => CAPTCHA_STATUS_SOLVED))
+        ->expression('attempts', 'attempts + 1')
+        ->execute();
+    }
+    else {
+      // Wrong answer.
+      db_update('captcha_sessions')
+        ->condition('csid', $csid)
+        ->expression('attempts', 'attempts + 1')
+        ->execute();
+      // Set form error.
+      form_set_error('captcha_response', t('The answer you entered for the CAPTCHA was not correct.'));
+      // Update wrong response counter.
+      if (variable_get('captcha_enable_stats', FALSE)) {
+        variable_set('captcha_wrong_response_counter', variable_get('captcha_wrong_response_counter', 0) + 1);
+      }
+      // Log to watchdog if needed.
+      if (variable_get('captcha_log_wrong_responses', FALSE)) {
+        watchdog('CAPTCHA',
+          '%form_id post blocked by CAPTCHA module: challenge %challenge (by module %module), user answered "@response", but the solution was "@solution".',
+          array(
+            '%form_id' => $form_id,
+            '@response' => $captcha_response, '@solution' => $solution,
+            '%challenge' => $captcha_info['captcha_type'], '%module' => $captcha_info['module'],
+          ),
+          WATCHDOG_NOTICE);
+      }
+    }
+  }
+}
+
+/**
+ * Pre-render callback for additional processing of a CAPTCHA form element.
+ *
+ * This encompasses tasks that should happen after the general FAPI processing
+ * (building, submission and validation) but before rendering (e.g. storing the solution).
+ *
+ * @param array $element
+ *   the CAPTCHA form element
+ *
+ * @return array
+ *   the manipulated element
+ */
+function captcha_pre_render_process($element) {
+  module_load_include('inc', 'captcha');
+
+  // Get form and CAPTCHA information.
+  $captcha_info = $element['#captcha_info'];
+  $form_id = $captcha_info['form_id'];
+  $captcha_sid = (int) ($captcha_info['captcha_sid']);
+  // Check if CAPTCHA is still required.
+  // This check is done in a first phase during the element processing
+  // (@see captcha_process), but it is also done here for better support
+  // of multi-page forms. Take previewing a node submission for example:
+  // when the challenge is solved correctely on preview, the form is still
+  // not completely submitted, but the CAPTCHA can be skipped.
+  if (_captcha_required_for_user($captcha_sid, $form_id) || $element['#captcha_admin_mode'] || $element['#captcha_always']) {
+    // Update captcha_sessions table: store the solution of the generated CAPTCHA.
+    _captcha_update_captcha_session($captcha_sid, $captcha_info['solution']);
+
+    // Handle the response field if it is available and if it is a textfield.
+    if (isset($element['captcha_widgets']['captcha_response']['#type']) && $element['captcha_widgets']['captcha_response']['#type'] == 'textfield') {
+      // Before rendering: presolve an admin mode challenge or
+      // empty the value of the captcha_response form item.
+      $value = $element['#captcha_admin_mode'] ? $captcha_info['solution'] : '';
+      $element['captcha_widgets']['captcha_response']['#value'] = $value;
+    }
+  }
+  else {
+    // Remove CAPTCHA widgets from form.
+    unset($element['captcha_widgets']);
+  }
+
+  return $element;
+}
+
+/**
+ * Default implementation of hook_captcha().
+ */
+function captcha_captcha($op, $captcha_type = '') {
+  switch ($op) {
+    case 'list':
+      return array('Math');
+
+    case 'generate':
+      if ($captcha_type == 'Math') {
+        $result = array();
+        $answer = mt_rand(1, 20);
+        $x = mt_rand(1, $answer);
+        $y = $answer - $x;
+        $result['solution'] = "$answer";
+        // Build challenge widget.
+        // Note that we also use t() for the math challenge itself. This makes
+        // it possible to 'rephrase' the challenge a bit through localization
+        // or string overrides.
+        $result['form']['captcha_response'] = array(
+          '#type' => 'textfield',
+          '#title' => t('Math question'),
+          '#description' => t('Solve this simple math problem and enter the result. E.g. for 1+3, enter 4.'),
+          '#field_prefix' => t('@x + @y = ', array('@x' => $x, '@y' => $y)),
+          '#size' => 4,
+          '#maxlength' => 2,
+          '#required' => TRUE,
+        );
+        return $result;
+      }
+      elseif ($captcha_type == 'Test') {
+        // This challenge is not visible through the administrative interface
+        // as it is not listed in captcha_captcha('list'),
+        // but it is meant for debugging and testing purposes.
+        // TODO for Drupal 7 version: This should be done with a mock module,
+        // but Drupal 6 does not support this (mock modules can not be hidden).
+        $result = array(
+          'solution' => 'Test 123',
+          'form' => array(),
+        );
+        $result['form']['captcha_response'] = array(
+          '#type' => 'textfield',
+          '#title' => t('Test one two three'),
+          '#required' => TRUE,
+        );
+        return $result;
+      }
+      break;
+  }
+}
+
+/**
+ * Implements hook_modules_enabled().
+ */
+function captcha_modules_enabled() {
+  // When new modules are enabled: clear the CAPTCHA placement cache, so that
+  // new hook_captcha_placement_map hooks can be triggered.
+  variable_del('captcha_placement_map_cache');
+}
diff --git a/sites/all/modules/contrib/captcha/captcha.test b/sites/all/modules/contrib/captcha/captcha.test
new file mode 100644
index 0000000..41b6ab0
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha.test
@@ -0,0 +1,1143 @@
+<?php
+
+/**
+ * @file
+ * Tests for CAPTCHA module.
+ */
+
+// TODO: write test for CAPTCHAs on admin pages
+// TODO: test for default challenge type
+// TODO: test about placement (comment form, node forms, log in form, etc)
+// TODO: test if captcha_cron does it work right
+// TODO: test custom CAPTCHA validation stuff
+// TODO: test if entry on status report (Already X blocked form submissions) works
+// TODO: test space ignoring validation of image CAPTCHA
+
+// TODO: refactor the 'comment_body[' . LANGUAGE_NONE . '][0][value]' stuff
+
+// Some constants for better reuse.
+define('CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE',
+  'The answer you entered for the CAPTCHA was not correct.');
+
+define('CAPTCHA_SESSION_REUSE_ATTACK_ERROR_MESSAGE',
+  'CAPTCHA session reuse attack detected.');
+
+define('CAPTCHA_UNKNOWN_CSID_ERROR_MESSAGE',
+  'CAPTCHA validation error: unknown CAPTCHA session ID. Contact the site administrator if this problem persists.');
+
+
+
+/**
+ * Base class for CAPTCHA tests.
+ *
+ * Provides common setup stuff and various helper functions
+ */
+abstract class CaptchaBaseWebTestCase extends DrupalWebTestCase {
+
+  /**
+   * User with various administrative permissions.
+   * @var Drupal user
+   */
+  protected $admin_user;
+
+  /**
+   * Normal visitor with limited permissions
+   * @var Drupal user;
+   */
+  protected $normal_user;
+
+  /**
+   * Form ID of comment form on standard (page) node
+   * @var string
+   */
+  const COMMENT_FORM_ID = 'comment_node_page_form';
+
+  /**
+   * Drupal path of the (general) CAPTCHA admin page
+   */
+  const CAPTCHA_ADMIN_PATH = 'admin/config/people/captcha';
+
+
+  function setUp() {
+    // Load two modules: the captcha module itself and the comment module for testing anonymous comments.
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+    parent::setUp(array_merge(array('captcha', 'comment'), $modules));
+    module_load_include('inc', 'captcha');
+
+    // Create a normal user.
+    $permissions = array(
+      'access comments', 'post comments', 'skip comment approval',
+      'access content', 'create page content', 'edit own page content',
+    );
+    $this->normal_user = $this->drupalCreateUser($permissions);
+
+    // Create an admin user.
+    $permissions[] = 'administer CAPTCHA settings';
+    $permissions[] = 'skip CAPTCHA';
+    $permissions[] = 'administer permissions';
+    $permissions[] = 'administer content types';
+    $this->admin_user = $this->drupalCreateUser($permissions);
+
+    // Put comments on page nodes on a separate page (default in D7: below post).
+    variable_set('comment_form_location_page', COMMENT_FORM_SEPARATE_PAGE);
+
+  }
+
+  /**
+   * Assert that the response is accepted:
+   * no "unknown CSID" message, no "CSID reuse attack detection" message,
+   * no "wrong answer" message.
+   */
+  protected function assertCaptchaResponseAccepted() {
+    // There should be no error message about unknown CAPTCHA session ID.
+    $this->assertNoText(t(CAPTCHA_UNKNOWN_CSID_ERROR_MESSAGE),
+      'CAPTCHA response should be accepted (known CSID).',
+      'CAPTCHA');
+    // There should be no error message about CSID reuse attack.
+    $this->assertNoText(t(CAPTCHA_SESSION_REUSE_ATTACK_ERROR_MESSAGE),
+      'CAPTCHA response should be accepted (no CAPTCHA session reuse attack detection).',
+      'CAPTCHA');
+    // There should be no error message about wrong response.
+    $this->assertNoText(t(CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE),
+      'CAPTCHA response should be accepted (correct response).',
+      'CAPTCHA');
+  }
+
+  /**
+   * Assert that there is a CAPTCHA on the form or not.
+   * @param bool $presence whether there should be a CAPTCHA or not.
+   */
+  protected function assertCaptchaPresence($presence) {
+    if ($presence) {
+      $this->assertText(_captcha_get_description(),
+        'There should be a CAPTCHA on the form.', 'CAPTCHA');
+    }
+    else {
+      $this->assertNoText(_captcha_get_description(),
+        'There should be no CAPTCHA on the form.', 'CAPTCHA');
+    }
+  }
+
+  /**
+   * Helper function to create a node with comments enabled.
+   *
+   * @return
+   *   Created node object.
+   */
+  protected function createNodeWithCommentsEnabled($type='page') {
+    $node_settings = array(
+      'type' => $type,
+      'comment' => COMMENT_NODE_OPEN,
+    );
+    $node = $this->drupalCreateNode($node_settings);
+    return $node;
+  }
+
+  /**
+   * Helper function to generate a form values array for comment forms
+   */
+  protected function getCommentFormValues() {
+    $edit = array(
+      'subject' => 'comment_subject ' . $this->randomName(32),
+      'comment_body[' . LANGUAGE_NONE . '][0][value]' => 'comment_body ' . $this->randomName(256),
+    );
+    return $edit;
+  }
+
+  /**
+   * Helper function to generate a form values array for node forms
+   */
+  protected function getNodeFormValues() {
+    $edit = array(
+      'title' => 'node_title ' . $this->randomName(32),
+      'body[' . LANGUAGE_NONE . '][0][value]' => 'node_body ' . $this->randomName(256),
+    );
+    return $edit;
+  }
+
+
+  /**
+   * Get the CAPTCHA session id from the current form in the browser.
+   */
+  protected function getCaptchaSidFromForm() {
+    $elements = $this->xpath('//input[@name="captcha_sid"]');
+    $captcha_sid = (int) $elements[0]['value'];
+    return $captcha_sid;
+  }
+  /**
+   * Get the CAPTCHA token from the current form in the browser.
+   */
+  protected function getCaptchaTokenFromForm() {
+    $elements = $this->xpath('//input[@name="captcha_token"]');
+    $captcha_token = (int) $elements[0]['value'];
+    return $captcha_token;
+  }
+
+  /**
+   * Get the solution of the math CAPTCHA from the current form in the browser.
+   */
+  protected function getMathCaptchaSolutionFromForm() {
+    // Get the math challenge.
+    $elements = $this->xpath('//div[@class="form-item form-type-textfield form-item-captcha-response"]/span[@class="field-prefix"]');
+    $challenge = (string) $elements[0];
+    // Extract terms and operator from challenge.
+    $matches = array();
+    $ret = preg_match('/\\s*(\\d+)\\s*(-|\\+)\\s*(\\d+)\\s*=\\s*/', $challenge, $matches);
+    // Solve the challenge
+    $a = (int) $matches[1];
+    $b = (int) $matches[3];
+    $solution = $matches[2] == '-' ? $a - $b : $a + $b;
+    return $solution;
+  }
+
+  /**
+   * Helper function to allow comment posting for anonymous users.
+   */
+  protected function allowCommentPostingForAnonymousVisitors() {
+    // Log in as admin.
+    $this->drupalLogin($this->admin_user);
+    // Post user permissions form
+    $edit = array(
+      '1[access comments]' => true,
+      '1[post comments]' => true,
+      '1[skip comment approval]' => true,
+    );
+    $this->drupalPost('admin/people/permissions', $edit, 'Save permissions');
+    $this->assertText('The changes have been saved.');
+    // Log admin out
+    $this->drupalLogout();
+  }
+
+}
+
+
+
+class CaptchaTestCase extends CaptchaBaseWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => t('General CAPTCHA functionality'),
+      'description' => t('Testing of the basic CAPTCHA functionality.'),
+      'group' => t('CAPTCHA'),
+    );
+  }
+
+  /**
+   * Testing the protection of the user log in form.
+   */
+  function testCaptchaOnLoginForm() {
+    // Create user and test log in without CAPTCHA.
+    $user = $this->drupalCreateUser();
+    $this->drupalLogin($user);
+    // Log out again.
+    $this->drupalLogout();
+
+    // Set a CAPTCHA on login form
+    captcha_set_form_id_setting('user_login', 'captcha/Math');
+
+    // Check if there is a CAPTCHA on the login form (look for the title).
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+
+    // Try to log in, which should fail.
+    $edit = array(
+      'name' => $user->name,
+      'pass' => $user->pass_raw,
+      'captcha_response' => '?',
+    );
+    $this->drupalPost('user', $edit, t('Log in'));
+    // Check for error message.
+    $this->assertText(t(CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE),
+      'CAPTCHA should block user login form', 'CAPTCHA');
+
+    // And make sure that user is not logged in: check for name and password fields on ?q=user
+    $this->drupalGet('user');
+    $this->assertField('name', t('Username field found.'), 'CAPTCHA');
+    $this->assertField('pass', t('Password field found.'), 'CAPTCHA');
+
+  }
+
+
+  /**
+   * Assert function for testing if comment posting works as it should.
+   *
+   * Creates node with comment writing enabled, tries to post comment
+   * with given CAPTCHA response (caller should enable the desired
+   * challenge on page node comment forms) and checks if the result is as expected.
+   *
+   * @param $captcha_response the response on the CAPTCHA
+   * @param $should_pass boolean describing if the posting should pass or should be blocked
+   * @param $message message to prefix to nested asserts
+   */
+  protected function assertCommentPosting($captcha_response, $should_pass, $message) {
+    // Make sure comments on pages can be saved directely without preview.
+    variable_set('comment_preview_page', DRUPAL_OPTIONAL);
+
+    // Create a node with comments enabled.
+    $node = $this->createNodeWithCommentsEnabled();
+
+    // Post comment on node.
+    $edit = $this->getCommentFormValues();
+    $comment_subject = $edit['subject'];
+    $comment_body = $edit['comment_body[' . LANGUAGE_NONE . '][0][value]'];
+    $edit['captcha_response'] = $captcha_response;
+    $this->drupalPost('comment/reply/' . $node->nid, $edit, t('Save'));
+
+    if ($should_pass) {
+      // There should be no error message.
+      $this->assertCaptchaResponseAccepted();
+      // Get node page and check that comment shows up.
+      $this->drupalGet('node/' . $node->nid);
+      $this->assertText($comment_subject, $message .' Comment should show up on node page.', 'CAPTCHA');
+      $this->assertText($comment_body, $message . ' Comment should show up on node page.', 'CAPTCHA');
+    }
+    else {
+      // Check for error message.
+      $this->assertText(t(CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE), $message .' Comment submission should be blocked.', 'CAPTCHA');
+      // Get node page and check that comment is not present.
+      $this->drupalGet('node/' . $node->nid);
+      $this->assertNoText($comment_subject, $message .' Comment should not show up on node page.', 'CAPTCHA');
+      $this->assertNoText($comment_body, $message . ' Comment should not show up on node page.', 'CAPTCHA');
+    }
+  }
+
+  /*
+   * Testing the case sensistive/insensitive validation.
+   */
+  function testCaseInsensitiveValidation() {
+    // Set Test CAPTCHA on comment form
+    captcha_set_form_id_setting(self::COMMENT_FORM_ID, 'captcha/Test');
+
+    // Log in as normal user.
+    $this->drupalLogin($this->normal_user);
+
+    // Test case sensitive posting.
+    variable_set('captcha_default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE);
+    $this->assertCommentPosting('Test 123', TRUE, 'Case sensitive validation of right casing.');
+    $this->assertCommentPosting('test 123', FALSE, 'Case sensitive validation of wrong casing.');
+    $this->assertCommentPosting('TEST 123', FALSE, 'Case sensitive validation of wrong casing.');
+
+    // Test case insensitive posting (the default)
+    variable_set('captcha_default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE);
+    $this->assertCommentPosting('Test 123', TRUE, 'Case insensitive validation of right casing.');
+    $this->assertCommentPosting('test 123', TRUE, 'Case insensitive validation of wrong casing.');
+    $this->assertCommentPosting('TEST 123', TRUE, 'Case insensitive validation of wrong casing.');
+
+  }
+
+  /**
+   * Test if the CAPTCHA description is only shown if there are challenge widgets to show.
+   * For example, when a comment is previewed with correct CAPTCHA answer,
+   * a challenge is generated and added to the form but removed in the pre_render phase.
+   * The CAPTCHA description should not show up either.
+   *
+   * \see testCaptchaSessionReuseOnNodeForms()
+   */
+  function testCaptchaDescriptionAfterCommentPreview() {
+    // Set Test CAPTCHA on comment form.
+    captcha_set_form_id_setting(self::COMMENT_FORM_ID, 'captcha/Test');
+
+    // Log in as normal user.
+    $this->drupalLogin($this->normal_user);
+
+    // Create a node with comments enabled.
+    $node = $this->createNodeWithCommentsEnabled();
+
+    // Preview comment with correct CAPTCHA answer.
+    $edit = $this->getCommentFormValues();
+    $edit['captcha_response'] = 'Test 123';
+    $this->drupalPost('comment/reply/' . $node->nid, $edit, t('Preview'));
+
+    // Check that there is no CAPTCHA after preview.
+    $this->assertCaptchaPresence(FALSE);
+  }
+
+  /**
+   * Test if the CAPTCHA session ID is reused when previewing nodes:
+   * node preview after correct response should not show CAPTCHA anymore.
+   * The preview functionality of comments and nodes works slightly different under the hood.
+   * CAPTCHA module should be able to handle both.
+   *
+   * \see testCaptchaDescriptionAfterCommentPreview()
+   */
+  function testCaptchaSessionReuseOnNodeForms() {
+    // Set Test CAPTCHA on page form.
+    captcha_set_form_id_setting('page_node_form', 'captcha/Test');
+
+    // Log in as normal user.
+    $this->drupalLogin($this->normal_user);
+
+    // Page settings to post, with correct CAPTCHA answer.
+    $edit = $this->getNodeFormValues();
+    $edit['captcha_response'] = 'Test 123';
+    // Preview the node
+    $this->drupalPost('node/add/page', $edit, t('Preview'));
+
+    // Check that there is no CAPTCHA after preview.
+    $this->assertCaptchaPresence(FALSE);
+  }
+
+
+  /**
+   * CAPTCHA should also be put on admin pages even if visitor
+   * has no access
+   */
+  function testCaptchaOnLoginBlockOnAdminPagesIssue893810() {
+    // Set a CAPTCHA on login block form
+    captcha_set_form_id_setting('user_login_block', 'captcha/Math');
+
+    // Check if there is a CAPTCHA on home page.
+    $this->drupalGet('node');
+    $this->assertCaptchaPresence(TRUE);
+
+    // Check there is a CAPTCHA on "forbidden" admin pages
+    $this->drupalGet('admin');
+    $this->assertCaptchaPresence(TRUE);
+  }
+
+}
+
+
+class CaptchaAdminTestCase extends CaptchaBaseWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => t('CAPTCHA administration functionality'),
+      'description' => t('Testing of the CAPTCHA administration interface and functionality.'),
+      'group' => t('CAPTCHA'),
+    );
+  }
+
+  /**
+   * Test access to the admin pages.
+   */
+  function testAdminAccess() {
+    $this->drupalLogin($this->normal_user);
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH);
+    file_put_contents('tmp.simpletest.html', $this->drupalGetContent());
+    $this->assertText(t('Access denied'), 'Normal users should not be able to access the CAPTCHA admin pages', 'CAPTCHA');
+
+    $this->drupalLogin($this->admin_user);
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH);
+    $this->assertNoText(t('Access denied'), 'Admin users should be able to access the CAPTCHA admin pages', 'CAPTCHA');
+  }
+
+  /**
+   * Test the CAPTCHA point setting getter/setter.
+   */
+  function testCaptchaPointSettingGetterAndSetter() {
+    $comment_form_id = self::COMMENT_FORM_ID;
+    // Set to 'none'.
+    captcha_set_form_id_setting($comment_form_id, 'none');
+    $result = captcha_get_form_id_setting($comment_form_id);
+    $this->assertNotNull($result, 'Setting and getting CAPTCHA point: none', 'CAPTCHA');
+    $this->assertNull($result->module, 'Setting and getting CAPTCHA point: none', 'CAPTCHA');
+    $this->assertNull($result->captcha_type, 'Setting and getting CAPTCHA point: none', 'CAPTCHA');
+    $result = captcha_get_form_id_setting($comment_form_id, TRUE);
+    $this->assertEqual($result, 'none', 'Setting and symbolic getting CAPTCHA point: "none"', 'CAPTCHA');
+    // Set to 'default'
+    captcha_set_form_id_setting($comment_form_id, 'default');
+    variable_set('captcha_default_challenge', 'foo/bar');
+    $result = captcha_get_form_id_setting($comment_form_id);
+    $this->assertNotNull($result, 'Setting and getting CAPTCHA point: default', 'CAPTCHA');
+    $this->assertEqual($result->module, 'foo', 'Setting and getting CAPTCHA point: default', 'CAPTCHA');
+    $this->assertEqual($result->captcha_type, 'bar', 'Setting and getting CAPTCHA point: default', 'CAPTCHA');
+    $result = captcha_get_form_id_setting($comment_form_id, TRUE);
+    $this->assertEqual($result, 'default', 'Setting and symbolic getting CAPTCHA point: "default"', 'CAPTCHA');
+    // Set to 'baz/boo'.
+    captcha_set_form_id_setting($comment_form_id, 'baz/boo');
+    $result = captcha_get_form_id_setting($comment_form_id);
+    $this->assertNotNull($result, 'Setting and getting CAPTCHA point: baz/boo', 'CAPTCHA');
+    $this->assertEqual($result->module, 'baz', 'Setting and getting CAPTCHA point: baz/boo', 'CAPTCHA');
+    $this->assertEqual($result->captcha_type, 'boo', 'Setting and getting CAPTCHA point: baz/boo', 'CAPTCHA');
+    $result = captcha_get_form_id_setting($comment_form_id, TRUE);
+    $this->assertEqual($result, 'baz/boo', 'Setting and symbolic getting CAPTCHA point: "baz/boo"', 'CAPTCHA');
+    // Set to NULL (which should delete the CAPTCHA point setting entry).
+    captcha_set_form_id_setting($comment_form_id, NULL);
+    $result = captcha_get_form_id_setting($comment_form_id);
+    $this->assertNull($result, 'Setting and getting CAPTCHA point: NULL', 'CAPTCHA');
+    $result = captcha_get_form_id_setting($comment_form_id, TRUE);
+    $this->assertNull($result, 'Setting and symbolic getting CAPTCHA point: NULL', 'CAPTCHA');
+    // Set with object.
+    $captcha_type = new stdClass;
+    $captcha_type->module = 'baba';
+    $captcha_type->captcha_type = 'fofo';
+    captcha_set_form_id_setting($comment_form_id, $captcha_type);
+    $result = captcha_get_form_id_setting($comment_form_id);
+    $this->assertNotNull($result, 'Setting and getting CAPTCHA point: baba/fofo', 'CAPTCHA');
+    $this->assertEqual($result->module, 'baba', 'Setting and getting CAPTCHA point: baba/fofo', 'CAPTCHA');
+    $this->assertEqual($result->captcha_type, 'fofo', 'Setting and getting CAPTCHA point: baba/fofo', 'CAPTCHA');
+    $result = captcha_get_form_id_setting($comment_form_id, TRUE);
+    $this->assertEqual($result, 'baba/fofo', 'Setting and symbolic getting CAPTCHA point: "baba/fofo"', 'CAPTCHA');
+
+  }
+
+
+  /**
+   * Helper function for checking CAPTCHA setting of a form.
+   *
+   * @param $form_id the form_id of the form to investigate.
+   * @param $challenge_type what the challenge type should be:
+   *   NULL, 'none', 'default' or something like 'captcha/Math'
+   */
+  protected function assertCaptchaSetting($form_id, $challenge_type) {
+    $result = captcha_get_form_id_setting(self::COMMENT_FORM_ID, TRUE);
+    $this->assertEqual($result, $challenge_type,
+      t('Check CAPTCHA setting for form: expected: @expected, received: @received.',
+      array('@expected' => var_export($challenge_type, TRUE), '@received' => var_export($result, TRUE))),
+      'CAPTCHA');
+  }
+
+  /**
+   * Testing of the CAPTCHA administration links.
+   */
+  function testCaptchAdminLinks() {
+    // Log in as admin
+    $this->drupalLogin($this->admin_user);
+
+    // Enable CAPTCHA administration links.
+    $edit = array(
+      'captcha_administration_mode' => TRUE,
+    );
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH, $edit, 'Save configuration');
+
+    // Create a node with comments enabled.
+    $node = $this->createNodeWithCommentsEnabled();
+
+    // Go to node page
+    $this->drupalGet('node/' . $node->nid);
+
+    // Click the add new comment link
+    $this->clickLink(t('Add new comment'));
+    $add_comment_url = $this->getUrl();
+    // Remove fragment part from comment URL to avoid problems with later asserts
+    $add_comment_url = strtok($add_comment_url, "#");
+
+    ////////////////////////////////////////////////////////////
+    // Click the CAPTCHA admin link to enable a challenge.
+    $this->clickLink(t('Place a CAPTCHA here for untrusted users.'));
+    // Enable Math CAPTCHA.
+    $edit = array('captcha_type' => 'captcha/Math');
+    $this->drupalPost($this->getUrl(), $edit, t('Save'));
+
+    // Check if returned to original comment form.
+    $this->assertUrl($add_comment_url, array(),
+      'After setting CAPTCHA with CAPTCHA admin links: should return to original form.', 'CAPTCHA');
+    // Check if CAPTCHA was successfully enabled (on CAPTCHA admin links fieldset).
+    $this->assertText(t('CAPTCHA: challenge "@type" enabled', array('@type' => 'Math')),
+      'Enable a challenge through the CAPTCHA admin links', 'CAPTCHA');
+    // Check if CAPTCHA was successfully enabled (through API).
+    $this->assertCaptchaSetting(self::COMMENT_FORM_ID, 'captcha/Math');
+
+    //////////////////////////////////////////////////////
+    // Edit challenge type through CAPTCHA admin links.
+    $this->clickLink(t('change'));
+    // Enable Math CAPTCHA.
+    $edit = array('captcha_type' => 'default');
+    $this->drupalPost($this->getUrl(), $edit, t('Save'));
+
+    // Check if returned to original comment form.
+    $this->assertEqual($add_comment_url, $this->getUrl(),
+      'After editing challenge type CAPTCHA admin links: should return to original form.', 'CAPTCHA');
+    // Check if CAPTCHA was successfully changed (on CAPTCHA admin links fieldset).
+    // This is actually the same as the previous setting because the captcha/Math is the
+    // default for the default challenge. TODO Make sure the edit is a real change.
+    $this->assertText(t('CAPTCHA: challenge "@type" enabled', array('@type' => 'Math')),
+      'Enable a challenge through the CAPTCHA admin links', 'CAPTCHA');
+    // Check if CAPTCHA was successfully edited (through API).
+    $this->assertCaptchaSetting(self::COMMENT_FORM_ID, 'default');
+
+
+
+    //////////////////////////////////////////////////////
+    // Disable challenge through CAPTCHA admin links.
+    $this->clickLink(t('disable'));
+    // And confirm.
+    $this->drupalPost($this->getUrl(), array(), 'Disable');
+
+    // Check if returned to original comment form.
+    $this->assertEqual($add_comment_url, $this->getUrl(),
+      'After disablin challenge with CAPTCHA admin links: should return to original form.', 'CAPTCHA');
+    // Check if CAPTCHA was successfully disabled (on CAPTCHA admin links fieldset).
+    $this->assertText(t('CAPTCHA: no challenge enabled'),
+      'Disable challenge through the CAPTCHA admin links', 'CAPTCHA');
+    // Check if CAPTCHA was successfully disabled (through API).
+    $this->assertCaptchaSetting(self::COMMENT_FORM_ID, 'none');
+
+  }
+
+
+  function testUntrustedUserPosting() {
+    // Set CAPTCHA on comment form.
+    captcha_set_form_id_setting(self::COMMENT_FORM_ID, 'captcha/Math');
+
+    // Create a node with comments enabled.
+    $node = $this->createNodeWithCommentsEnabled();
+
+    // Log in as normal (untrusted) user.
+    $this->drupalLogin($this->normal_user);
+
+    // Go to node page and click the "add comment" link.
+    $this->drupalGet('node/' . $node->nid);
+    $this->clickLink(t('Add new comment'));
+    $add_comment_url = $this->getUrl();
+
+    // Check if CAPTCHA is visible on form.
+    $this->assertCaptchaPresence(TRUE);
+    // Try to post a comment with wrong answer.
+    $edit = $this->getCommentFormValues();
+    $edit['captcha_response'] = 'xx';
+    $this->drupalPost($add_comment_url, $edit, t('Preview'));
+    $this->assertText(t(CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE),
+      'wrong CAPTCHA should block form submission.', 'CAPTCHA');
+
+    //TODO: more testing for untrusted posts.
+  }
+
+
+
+  /**
+   * Test XSS vulnerability on CAPTCHA description.
+   */
+  function testXssOnCaptchaDescription() {
+    // Set CAPTCHA on user register form.
+    captcha_set_form_id_setting('user_register', 'captcha/Math');
+
+    // Put JavaScript snippet in CAPTCHA description.
+    $this->drupalLogin($this->admin_user);
+    $xss = '<script type="text/javascript">alert("xss")</script>';
+    $edit = array('captcha_description' => $xss);
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH, $edit, 'Save configuration');
+
+    // Visit user register form and check if JavaScript snippet is there.
+    $this->drupalLogout();
+    $this->drupalGet('user/register');
+    $this->assertNoRaw($xss, 'JavaScript should not be allowed in CAPTCHA description.', 'CAPTCHA');
+
+  }
+
+  /**
+   * Test the CAPTCHA placement clearing.
+   */
+  function testCaptchaPlacementCacheClearing() {
+    // Set CAPTCHA on user register form.
+    captcha_set_form_id_setting('user_register_form', 'captcha/Math');
+    // Visit user register form to fill the CAPTCHA placement cache.
+    $this->drupalGet('user/register');
+    // Check if there is CAPTCHA placement cache.
+    $placement_map = variable_get('captcha_placement_map_cache', NULL);
+    $this->assertNotNull($placement_map, 'CAPTCHA placement cache should be set.');
+    // Clear the cache
+    $this->drupalLogin($this->admin_user);
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH, array(), t('Clear the CAPTCHA placement cache'));
+    // Check that the placement cache is unset
+    $placement_map = variable_get('captcha_placement_map_cache', NULL);
+    $this->assertNull($placement_map, 'CAPTCHA placement cache should be unset after cache clear.');
+  }
+
+  /**
+   * Helper function to get the CAPTCHA point setting straight from the database.
+   * @param string $form_id
+   * @return stdClass object
+   */
+  private function getCaptchaPointSettingFromDatabase($form_id) {
+    $result = db_query(
+      "SELECT * FROM {captcha_points} WHERE form_id = :form_id",
+      array(':form_id' => $form_id)
+    )->fetchObject();
+    return $result;
+  }
+
+  /**
+   * Method for testing the CAPTCHA point administration
+   */
+  function testCaptchaPointAdministration() {
+    // Generate CAPTCHA point data:
+    // Drupal form ID should consist of lowercase alphanumerics and underscore)
+    $captcha_point_form_id = 'form_' . strtolower($this->randomName(32));
+    // the Math CAPTCHA by the CAPTCHA module is always available, so let's use it
+    $captcha_point_module = 'captcha';
+    $captcha_point_type = 'Math';
+
+    // Log in as admin
+    $this->drupalLogin($this->admin_user);
+
+    // Set CAPTCHA point through admin/user/captcha/captcha/captcha_point
+    $form_values = array(
+      'captcha_point_form_id' => $captcha_point_form_id,
+      'captcha_type' => $captcha_point_module .'/'. $captcha_point_type,
+    );
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point', $form_values, t('Save'));
+    $this->assertText(t('Saved CAPTCHA point settings.'),
+      'Saving of CAPTCHA point settings');
+
+    // Check in database
+    $result = $this->getCaptchaPointSettingFromDatabase($captcha_point_form_id);
+    $this->assertEqual($result->module, $captcha_point_module,
+      'Enabled CAPTCHA point should have module set');
+    $this->assertEqual($result->captcha_type, $captcha_point_type,
+      'Enabled CAPTCHA point should have type set');
+
+    // Disable CAPTCHA point again
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/'. $captcha_point_form_id .'/disable', array(), t('Disable'));
+    $this->assertRaw(t('Disabled CAPTCHA for form %form_id.', array('%form_id' => $captcha_point_form_id)), 'Disabling of CAPTCHA point');
+
+    // Check in database
+    $result = $this->getCaptchaPointSettingFromDatabase($captcha_point_form_id);
+    $this->assertNull($result->module,
+      'Disabled CAPTCHA point should have NULL as module');
+    $this->assertNull($result->captcha_type,
+      'Disabled CAPTCHA point should have NULL as type');
+
+    // Set CAPTCHA point through admin/user/captcha/captcha/captcha_point/$form_id
+    $form_values = array(
+      'captcha_type' => $captcha_point_module .'/'. $captcha_point_type,
+    );
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/'. $captcha_point_form_id, $form_values, t('Save'));
+    $this->assertText(t('Saved CAPTCHA point settings.'),
+      'Saving of CAPTCHA point settings');
+
+    // Check in database
+    $result = $this->getCaptchaPointSettingFromDatabase($captcha_point_form_id);
+    $this->assertEqual($result->module, $captcha_point_module,
+      'Enabled CAPTCHA point should have module set');
+    $this->assertEqual($result->captcha_type, $captcha_point_type,
+      'Enabled CAPTCHA point should have type set');
+
+    // Delete CAPTCHA point
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/'. $captcha_point_form_id .'/delete', array(), t('Delete'));
+    $this->assertRaw(t('Deleted CAPTCHA for form %form_id.', array('%form_id' => $captcha_point_form_id)),
+      'Deleting of CAPTCHA point');
+
+    // Check in database
+    $result = $this->getCaptchaPointSettingFromDatabase($captcha_point_form_id);
+    $this->assertFalse($result, 'Deleted CAPTCHA point should be in database');
+  }
+
+  /**
+   * Method for testing the CAPTCHA point administration
+   */
+  function testCaptchaPointAdministrationByNonAdmin() {
+    // First add a CAPTCHA point (as admin)
+    $this->drupalLogin($this->admin_user);
+    $captcha_point_form_id = 'form_' . strtolower($this->randomName(32));
+    $captcha_point_module = 'captcha';
+    $captcha_point_type = 'Math';
+    $form_values = array(
+      'captcha_point_form_id' => $captcha_point_form_id,
+      'captcha_type' => $captcha_point_module .'/'. $captcha_point_type,
+    );
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/', $form_values, t('Save'));
+    $this->assertText(t('Saved CAPTCHA point settings.'),
+      'Saving of CAPTCHA point settings');
+
+    // Switch from admin to nonadmin
+    $this->drupalGet(url('logout', array('absolute' => TRUE)));
+    $this->drupalLogin($this->normal_user);
+
+
+    // Try to set CAPTCHA point through admin/user/captcha/captcha/captcha_point
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point');
+    $this->assertText(t('You are not authorized to access this page.'),
+      'Non admin should not be able to set a CAPTCHA point');
+
+    // Try to set CAPTCHA point through admin/user/captcha/captcha/captcha_point/$form_id
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/' . 'form_' . strtolower($this->randomName(32)));
+    $this->assertText(t('You are not authorized to access this page.'),
+      'Non admin should not be able to set a CAPTCHA point');
+
+    // Try to disable the CAPTCHA point
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/'. $captcha_point_form_id .'/disable');
+    $this->assertText(t('You are not authorized to access this page.'),
+      'Non admin should not be able to disable a CAPTCHA point');
+
+    // Try to delete the CAPTCHA point
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/'. $captcha_point_form_id .'/delete');
+    $this->assertText(t('You are not authorized to access this page.'),
+      'Non admin should not be able to delete a CAPTCHA point');
+
+    // Switch from nonadmin to admin again
+    $this->drupalGet(url('logout', array('absolute' => TRUE)));
+    $this->drupalLogin($this->admin_user);
+
+    // Check if original CAPTCHA point still exists in database
+    $result = $this->getCaptchaPointSettingFromDatabase($captcha_point_form_id);
+    $this->assertEqual($result->module, $captcha_point_module,
+      'Enabled CAPTCHA point should still have module set');
+    $this->assertEqual($result->captcha_type, $captcha_point_type,
+      'Enabled CAPTCHA point should still have type set');
+
+    // Delete CAPTCHA point
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH . '/captcha/captcha_point/'. $captcha_point_form_id .'/delete', array(), t('Delete'));
+    $this->assertRaw(t('Deleted CAPTCHA for form %form_id.', array('%form_id' => $captcha_point_form_id)),
+      'Deleting of CAPTCHA point');
+  }
+
+
+
+}
+
+
+
+class CaptchaPersistenceTestCase extends CaptchaBaseWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => t('CAPTCHA persistence functionality'),
+      'description' => t('Testing of the CAPTCHA persistence functionality.'),
+      'group' => t('CAPTCHA'),
+    );
+  }
+
+  /**
+   * Set up the persistence and CAPTCHA settings.
+   * @param int $persistence the persistence value.
+   */
+  private function setUpPersistence($persistence) {
+    // Log in as admin
+    $this->drupalLogin($this->admin_user);
+    // Set persistence.
+    $edit = array('captcha_persistence' => $persistence);
+    $this->drupalPost(self::CAPTCHA_ADMIN_PATH, $edit, 'Save configuration');
+    // Log admin out.
+    $this->drupalLogout();
+
+    // Set the Test123 CAPTCHA on user register and comment form.
+    // We have to do this with the function captcha_set_form_id_setting()
+    // (because the CATCHA admin form does not show the Test123 option).
+    // We also have to do this after all usage of the CAPTCHA admin form
+    // (because posting the CAPTCHA admin form would set the CAPTCHA to 'none').
+    captcha_set_form_id_setting('user_login', 'captcha/Test');
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+    captcha_set_form_id_setting('user_register_form', 'captcha/Test');
+    $this->drupalGet('user/register');
+    $this->assertCaptchaPresence(TRUE);
+  }
+
+  protected function assertPreservedCsid($captcha_sid_initial) {
+    $captcha_sid = $this->getCaptchaSidFromForm();
+    $this->assertEqual($captcha_sid_initial, $captcha_sid,
+      "CAPTCHA session ID should be preserved (expected: $captcha_sid_initial, found: $captcha_sid).");
+  }
+
+  protected function assertDifferentCsid($captcha_sid_initial) {
+    $captcha_sid = $this->getCaptchaSidFromForm();
+    $this->assertNotEqual($captcha_sid_initial, $captcha_sid,
+      "CAPTCHA session ID should be different.");
+  }
+
+  function testPersistenceAlways(){
+    // Set up of persistence and CAPTCHAs.
+    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SHOW_ALWAYS);
+
+    // Go to login form and check if there is a CAPTCHA on the login form (look for the title).
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+    $captcha_sid_initial = $this->getCaptchaSidFromForm();
+
+    // Try to with wrong user name and password, but correct CAPTCHA.
+    $edit = array(
+      'name' => 'foobar',
+      'pass' => 'bazlaz',
+      'captcha_response' => 'Test 123',
+    );
+    $this->drupalPost(NULL, $edit, t('Log in'));
+    // Check that there was no error message for the CAPTCHA.
+    $this->assertCaptchaResponseAccepted();
+
+    // Name and password were wrong, we should get an updated form with a fresh CAPTCHA.
+    $this->assertCaptchaPresence(TRUE);
+    $this->assertPreservedCsid($captcha_sid_initial);
+
+    // Post from again.
+    $this->drupalPost(NULL, $edit, t('Log in'));
+    // Check that there was no error message for the CAPTCHA.
+    $this->assertCaptchaResponseAccepted();
+    $this->assertPreservedCsid($captcha_sid_initial);
+
+  }
+
+  function testPersistencePerFormInstance(){
+    // Set up of persistence and CAPTCHAs.
+    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+
+    // Go to login form and check if there is a CAPTCHA on the login form.
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+    $captcha_sid_initial = $this->getCaptchaSidFromForm();
+
+    // Try to with wrong user name and password, but correct CAPTCHA.
+    $edit = array(
+      'name' => 'foobar',
+      'pass' => 'bazlaz',
+      'captcha_response' => 'Test 123',
+    );
+    $this->drupalPost(NULL, $edit, t('Log in'));
+    // Check that there was no error message for the CAPTCHA.
+    $this->assertCaptchaResponseAccepted();
+    // There shouldn't be a CAPTCHA on the new form.
+    $this->assertCaptchaPresence(FALSE);
+    $this->assertPreservedCsid($captcha_sid_initial);
+
+    // Start a new form instance/session
+    $this->drupalGet('node');
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+    $this->assertDifferentCsid($captcha_sid_initial);
+
+    // Check another form
+    $this->drupalGet('user/register');
+    $this->assertCaptchaPresence(TRUE);
+    $this->assertDifferentCsid($captcha_sid_initial);
+
+  }
+
+  function testPersistencePerFormType(){
+    // Set up of persistence and CAPTCHAs.
+    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE);
+
+    // Go to login form and check if there is a CAPTCHA on the login form.
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+    $captcha_sid_initial = $this->getCaptchaSidFromForm();
+
+    // Try to with wrong user name and password, but correct CAPTCHA.
+    $edit = array(
+      'name' => 'foobar',
+      'pass' => 'bazlaz',
+      'captcha_response' => 'Test 123',
+    );
+    $this->drupalPost(NULL, $edit, t('Log in'));
+    // Check that there was no error message for the CAPTCHA.
+    $this->assertCaptchaResponseAccepted();
+    // There shouldn't be a CAPTCHA on the new form.
+    $this->assertCaptchaPresence(FALSE);
+    $this->assertPreservedCsid($captcha_sid_initial);
+
+    // Start a new form instance/session
+    $this->drupalGet('node');
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(FALSE);
+    $this->assertDifferentCsid($captcha_sid_initial);
+
+    // Check another form
+    $this->drupalGet('user/register');
+    $this->assertCaptchaPresence(TRUE);
+    $this->assertDifferentCsid($captcha_sid_initial);
+  }
+
+  function testPersistenceOnlyOnce(){
+    // Set up of persistence and CAPTCHAs.
+    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL);
+
+    // Go to login form and check if there is a CAPTCHA on the login form.
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+    $captcha_sid_initial = $this->getCaptchaSidFromForm();
+
+    // Try to with wrong user name and password, but correct CAPTCHA.
+    $edit = array(
+      'name' => 'foobar',
+      'pass' => 'bazlaz',
+      'captcha_response' => 'Test 123',
+    );
+    $this->drupalPost(NULL, $edit, t('Log in'));
+    // Check that there was no error message for the CAPTCHA.
+    $this->assertCaptchaResponseAccepted();
+    // There shouldn't be a CAPTCHA on the new form.
+    $this->assertCaptchaPresence(FALSE);
+    $this->assertPreservedCsid($captcha_sid_initial);
+
+    // Start a new form instance/session
+    $this->drupalGet('node');
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(FALSE);
+    $this->assertDifferentCsid($captcha_sid_initial);
+
+    // Check another form
+    $this->drupalGet('user/register');
+    $this->assertCaptchaPresence(FALSE);
+    $this->assertDifferentCsid($captcha_sid_initial);
+  }
+
+}
+
+
+class CaptchaSessionReuseAttackTestCase extends CaptchaBaseWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => t('CAPTCHA session reuse attack tests'),
+      'description' => t('Testing of the protection against CAPTCHA session reuse attacks.'),
+      'group' => t('CAPTCHA'),
+    );
+  }
+
+  /**
+   * Assert that the CAPTCHA session ID reuse attack was detected.
+   */
+  protected function assertCaptchaSessionIdReuseAttackDetection() {
+    $this->assertText(t(CAPTCHA_SESSION_REUSE_ATTACK_ERROR_MESSAGE),
+      'CAPTCHA session ID reuse attack should be detected.',
+      'CAPTCHA');
+    // There should be an error message about wrong response.
+    $this->assertText(t(CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE),
+      'CAPTCHA response should flagged as wrong.',
+      'CAPTCHA');
+  }
+
+  function testCaptchaSessionReuseAttackDetectionOnCommentPreview() {
+    // Create commentable node
+    $node = $this->createNodeWithCommentsEnabled();
+    // Set Test CAPTCHA on comment form.
+    captcha_set_form_id_setting(self::COMMENT_FORM_ID, 'captcha/Math');
+    variable_set('captcha_persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+
+    // Log in as normal user.
+    $this->drupalLogin($this->normal_user);
+
+    // Go to comment form of commentable node.
+    $this->drupalGet('comment/reply/' . $node->nid);
+    $this->assertCaptchaPresence(TRUE);
+
+    // Get CAPTCHA session ID and solution of the challenge.
+    $captcha_sid = $this->getCaptchaSidFromForm();
+    $captcha_token = $this->getCaptchaTokenFromForm();
+    $solution = $this->getMathCaptchaSolutionFromForm();
+
+    // Post the form with the solution.
+    $edit = $this->getCommentFormValues();
+    $edit['captcha_response'] = $solution;
+    $this->drupalPost(NULL, $edit, t('Preview'));
+    // Answer should be accepted and further CAPTCHA ommitted.
+    $this->assertCaptchaResponseAccepted();
+    $this->assertCaptchaPresence(FALSE);
+
+    // Post a new comment, reusing the previous CAPTCHA session.
+    $edit = $this->getCommentFormValues();
+    $edit['captcha_sid'] = $captcha_sid;
+    $edit['captcha_token'] = $captcha_token;
+    $edit['captcha_response'] = $solution;
+    $this->drupalPost('comment/reply/' . $node->nid, $edit, t('Preview'));
+    // CAPTCHA session reuse attack should be detected.
+    $this->assertCaptchaSessionIdReuseAttackDetection();
+    // There should be a CAPTCHA.
+    $this->assertCaptchaPresence(TRUE);
+
+  }
+
+  function testCaptchaSessionReuseAttackDetectionOnNodeForm() {
+    // Set CAPTCHA on page form.
+    captcha_set_form_id_setting('page_node_form', 'captcha/Math');
+    variable_set('captcha_persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+
+    // Log in as normal user.
+    $this->drupalLogin($this->normal_user);
+
+    // Go to node add form.
+    $this->drupalGet('node/add/page');
+    $this->assertCaptchaPresence(TRUE);
+
+    // Get CAPTCHA session ID and solution of the challenge.
+    $captcha_sid = $this->getCaptchaSidFromForm();
+    $captcha_token = $this->getCaptchaTokenFromForm();
+    $solution = $this->getMathCaptchaSolutionFromForm();
+
+    // Page settings to post, with correct CAPTCHA answer.
+    $edit = $this->getNodeFormValues();
+    $edit['captcha_response'] = $solution;
+    // Preview the node
+    $this->drupalPost(NULL, $edit, t('Preview'));
+    // Answer should be accepted.
+    $this->assertCaptchaResponseAccepted();
+    // Check that there is no CAPTCHA after preview.
+    $this->assertCaptchaPresence(FALSE);
+
+    // Post a new comment, reusing the previous CAPTCHA session.
+    $edit = $this->getNodeFormValues();
+    $edit['captcha_sid'] = $captcha_sid;
+    $edit['captcha_token'] = $captcha_token;
+    $edit['captcha_response'] = $solution;
+    $this->drupalPost('node/add/page', $edit, t('Preview'));
+    // CAPTCHA session reuse attack should be detected.
+    $this->assertCaptchaSessionIdReuseAttackDetection();
+    // There should be a CAPTCHA.
+    $this->assertCaptchaPresence(TRUE);
+
+  }
+
+  function testCaptchaSessionReuseAttackDetectionOnLoginForm() {
+    // Set CAPTCHA on login form.
+    captcha_set_form_id_setting('user_login', 'captcha/Math');
+    variable_set('captcha_persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+
+    // Go to log in form.
+    $this->drupalGet('user');
+    $this->assertCaptchaPresence(TRUE);
+
+    // Get CAPTCHA session ID and solution of the challenge.
+    $captcha_sid = $this->getCaptchaSidFromForm();
+    $captcha_token = $this->getCaptchaTokenFromForm();
+    $solution = $this->getMathCaptchaSolutionFromForm();
+
+    // Log in through form.
+    $edit = array(
+      'name' => $this->normal_user->name,
+      'pass' => $this->normal_user->pass_raw,
+      'captcha_response' => $solution,
+    );
+    $this->drupalPost(NULL, $edit, t('Log in'));
+    $this->assertCaptchaResponseAccepted();
+    $this->assertCaptchaPresence(FALSE);
+    // If a "log out" link appears on the page, it is almost certainly because
+    // the login was successful.
+    $pass = $this->assertLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $this->normal_user->name)), t('User login'));
+
+    // Log out again.
+    $this->drupalLogout();
+
+    // Try to log in again, reusing the previous CAPTCHA session.
+    $edit += array(
+      'captcha_sid' => $captcha_sid,
+      'captcha_token' => $captcha_token,
+    );
+    $this->drupalPost('user', $edit, t('Log in'));
+    // CAPTCHA session reuse attack should be detected.
+    $this->assertCaptchaSessionIdReuseAttackDetection();
+    // There should be a CAPTCHA.
+    $this->assertCaptchaPresence(TRUE);
+  }
+
+
+  public function testMultipleCaptchaProtectedFormsOnOnePage()
+  {
+    // Set Test CAPTCHA on comment form and login block
+    captcha_set_form_id_setting(self::COMMENT_FORM_ID, 'captcha/Test');
+    captcha_set_form_id_setting('user_login_block', 'captcha/Math');
+    $this->allowCommentPostingForAnonymousVisitors();
+
+    // Create a node with comments enabled.
+    $node = $this->createNodeWithCommentsEnabled();
+
+    // Preview comment with correct CAPTCHA answer.
+    $edit = $this->getCommentFormValues();
+    $comment_subject = $edit['subject'];
+    $edit['captcha_response'] = 'Test 123';
+    $this->drupalPost('comment/reply/' . $node->nid, $edit, t('Preview'));
+    // Post should be accepted: no warnings,
+    // no CAPTCHA reuse detection (which could be used by user log in block).
+    $this->assertCaptchaResponseAccepted();
+    $this->assertText($comment_subject);
+
+  }
+
+}
+
+
+// Some tricks to debug:
+// drupal_debug($data) // from devel module
+// file_put_contents('tmp.simpletest.html', $this->drupalGetContent());
diff --git a/sites/all/modules/contrib/captcha/captcha_api.txt b/sites/all/modules/contrib/captcha/captcha_api.txt
new file mode 100644
index 0000000..3c8984f
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/captcha_api.txt
@@ -0,0 +1,217 @@
+This documentation is for developers that want to implement their own
+challenge type and integrate it with the base CAPTCHA module.
+
+
+=== Required: hook_captcha($op, $captcha_type='') ===
+
+The hook_captcha() hook is the only required function if you want to integrate
+with the base CAPTCHA module.
+Functionality depends on the first argument $op:
+  * 'list': you should return an array of possible challenge types
+    that your module implements.
+  * 'generate': generate a challenge.
+    You should return an array that offers form elements and the solution
+    of your challenge, defined by the second argument $captcha_type.
+    The returned array $captcha should have the following items:
+    $captcha['solution']: this is the solution of your challenge
+    $captcha['form']: an array of the form elements you want to add to the form.
+      There should be a key 'captcha_response' in this array, which points to
+      the form element where the user enters his answer.
+    An optional additional argument $captcha_sid with the captcha session ID is
+    available for more advanced challenges (e.g. the image CAPTCHA uses this
+    argument, see image_captcha_captcha()).
+
+Let's give a simple example to make this more clear.
+We create the challenge 'Foo CAPTCHA', which requires the user to
+enter "foo" in a textfield.
+
+"""
+/**
+ * Implementation of hook_captcha().
+ */
+function foo_captcha_captcha($op, $captcha_type='') {
+  switch ($op) {
+    case 'list':
+      return array('Foo CAPTCHA');
+    case 'generate':
+      if ($captcha_type == 'Foo CAPTCHA') {
+        $captcha = array();
+        $captcha['solution'] = 'foo';
+        $captcha['form']['captcha_response'] = array(
+          '#type' => 'textfield',
+          '#title' => t('Enter "foo"'),
+          '#required' => TRUE,
+        );
+        return $captcha;
+      }
+      break;
+  }
+}
+"""
+
+Validation of the answer against the solution and other stuff is done by the
+base CAPTCHA module.
+
+
+
+
+=== Required: the .info file ===
+
+You should specify that your module depends on the base CAPTCHA module.
+Optionally you could put your module in the "Spam control" package.
+
+For our simple foo CAPTCHA module this would mean the following lines in the
+file foo_captcha.info:
+
+"""
+name = "Foo CAPTCHA"
+description = "The foo CAPTCHA requires the user to enter the word 'foo'."
+package = "Spam control"
+dependencies[] = captcha
+core = 6.x
+"""
+
+
+
+
+=== Recommended: hook_menu($may_cache) ===
+
+More advanced CAPTCHA modules probably want some configuration page.
+To integrate nicely with the base CAPTCHA module you should offer your
+configuration page as a MENU_LOCAL_TASK menu entry under 'admin/config/people/captcha/'.
+
+For our simple foo CAPTCHA module this would mean:
+
+"""
+/**
+ * Implementation of hook_menu().
+ */
+function foo_captcha_menu($may_cache) {
+  $items = array();
+  if ($may_cache) {
+    $items['admin/config/people/captcha/foo_captcha'] = array(
+      'title' => t('Foo CAPTCHA'),
+      'page callback' => 'drupal_get_form',
+      'page arguments' => array('foo_captcha_settings_form'),
+      'type' => MENU_LOCAL_TASK,
+    );
+  }
+  return $items;
+}
+"""
+
+You should of course implement a function foo_captcha_settings_form() which
+returns the form of your configuration page.
+
+
+
+
+=== Optional: hook_help($section) ===
+To offer a description/explanation of your challenge, you can use the
+normal hook_help() system.
+
+For our simple foo CAPTCHA module this would mean:
+
+"""
+/**
+ * Implementation of hook_help().
+ */
+function foo_captcha_help($path, $arg) {
+  switch ($path) {
+    case 'admin/config/people/captcha/foo_captcha':
+      return '<p>'. t('This is a very simple challenge, which requires users to enter "foo" in a textfield.') .'</p>';
+  }
+}
+"""
+
+
+
+=== Optional: custom response validation ===
+The CAPTCHA module provides an option for case sensitive and case insensitve
+validation of the responses. If this is not sufficient, you can provide
+your own validation function with the 'captcha_validate' field, illustrated
+by the following example:
+
+"""
+/**
+ * Implementation of hook_captcha().
+ */
+function foo_captcha_captcha($op, $captcha_type='') {
+  switch ($op) {
+    ...
+    case 'generate':
+      if ($captcha_type == 'Foo CAPTCHA') {
+        $captcha = array();
+        $captcha['solution'] = ...
+        $captcha['form'] = ...
+        $captcha['captcha_validate'] = 'foo_captcha_custom_validation';
+        return $captcha;
+      }
+      break;
+  }
+}
+
+/**
+ * Custom CAPTCHA validation function.
+ *
+ * @param solution the solution for the challenge as reported by hook_captcha('generate', ...).
+ * @param response the answer given by the user.
+ * @return TRUE on succes and FALSE on failure.
+ */
+function foo_captcha_custom_validation($solution, $response) {
+  return $response == "foo" || $response == "bar";
+}
+"""
+
+Previous example shows the basic usage for custom validation with only a $solution
+and $response argument, which should be sufficient for most CAPTCHA modules.
+More advanced CAPTCHA modules can also use extra provided arguments $element
+and $form_state:
+"""
+function foo_captcha_custom_validation($solution, $response, $element, $form_state) {
+  return $form_state['foo']['#bar'] = 'baz';
+}
+"""
+These extra arguments are the $element and $form_state arguments of the validation function
+of the #captcha element. See captcha_validate() in captcha.module for more info about this.
+
+
+
+=== Hook into CAPTCHA placement ===
+The CAPTCHA module attempts to place the CAPTCHA element in an appropriate spot
+at the bottom of the targeted form, but this automatic detection may be insufficient
+for complex forms.
+The hook_captcha_placement_map hook allows to define the placement of the CAPTCHA element
+as desired. The hook should return an array, mapping form IDs to placement arrays, which are
+associative arrays with the following fields:
+  - 'path': path (array of path items) of the form's container element in which the
+    CAPTCHA element should be inserted.
+  - 'key': the key of the element before which the CAPTCHA element
+    should be inserted. If the field 'key' is undefined or NULL, the CAPTCHA will
+    just be appended in the container.
+  - 'weight': if 'key' is not NULL: should be the weight of the element defined by 'key'.
+    If 'key' is NULL and weight is not NULL/unset: set the weight property of the CAPTCHA element
+    to this value.
+
+For example:
+"""
+/**
+ * Implementation of hook_captcha_placement_map
+ */
+function hook_captcha_placement_map() {
+  return array(
+    'my_fancy_form' => array(
+      'path' => array('items', 'buttons'),
+      'key' => 'savebutton',
+    ),
+    'another_form' => array(
+      'path' => array(),
+      'weight' => 34,
+    ),
+  );
+}
+"""
+This will place the CAPTCHA element
+  - in the 'my_fancy_form' form inside the container $form['items']['buttons'],
+    just before the element $form['items']['buttons']['sacebutton'].
+  - in the 'another_form' form at the toplevel of the form, with a weight 34.
diff --git a/sites/all/modules/contrib/captcha/image_captcha/fonts/README.txt b/sites/all/modules/contrib/captcha/image_captcha/fonts/README.txt
new file mode 100644
index 0000000..0cf5c93
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/fonts/README.txt
@@ -0,0 +1,6 @@
+It possible to put your own fonts for the Image CAPTCHA in this folder.
+However, this is not the recommended way, as they can get lost easily during
+a module update. The recommended way to provide your own fonts is putting them
+in the files directory of your Drupal setup or, just like with contributed
+modules and themes, in the "libraries" folders sites/all/libraries/fonts
+or sites/<site>/libraries/fonts.
diff --git a/sites/all/modules/contrib/captcha/image_captcha/fonts/Tesox/tesox.ttf b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tesox/tesox.ttf
new file mode 100644
index 0000000..31f91d3
Binary files /dev/null and b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tesox/tesox.ttf differ
diff --git a/sites/all/modules/contrib/captcha/image_captcha/fonts/Tesox/tesox_readme.txt b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tesox/tesox_readme.txt
new file mode 100644
index 0000000..b747014
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tesox/tesox_readme.txt
@@ -0,0 +1,24 @@
+
+The Tesox typeface
+==================
+
+The Tesox typeface is created by Stefaan Lippens (also known as soxofaan on
+drupal.org, http://drupal.org/user/41478).
+It is based on hand drawn characters, converted to a TrueType font with the
+FontCapture web service (http://www.fontcapture.com).
+
+Background
+----------
+The Tesox typeface is created specifically for the image CAPTCHA module
+for Drupal (http://drupal.org/project/captcha). For a better out-of-the-box
+experience it was desired to include one or more typefaces with the CAPTCHA
+module package by default. However, this redistribution raised licensing issues.
+For example, according the code hosting policy of drupal.org, only GPL licensed
+code and resources are allowed in the drupal.org code repository (CVS).
+To avoid licensing and redistribution issues, it was decided to create a
+dedicated typeface for the image CAPTCHA module from scratch.
+
+Licencing
+---------
+The Tesox typeface is GPLv2 licenced to be compatible with the drupal.org code
+hosting and packaging policies, as explained above.
diff --git a/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/README.txt b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/README.txt
new file mode 100644
index 0000000..205343f
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/README.txt
@@ -0,0 +1,23 @@
+
+This directory contains a subset (Regular and Bold) of the Tuffy typeface
+created by Thatcher Ulrich (http://tulrich.com/fonts) and released in the
+public domain.
+
+Original licensing statement of the creator
+-------------------------------------------
+Here are my dabblings in font design. I have placed them in the Public Domain. 
+This is all 100% my own work. Usage is totally unrestricted. 
+If you want to make derivative works for any purpose, please go ahead.
+
+I welcome comments & constructive criticism.
+
+Put another way, a la PD-self (http://en.wikipedia.org/wiki/Template:PD-self):
+  I, the copyright holder of this work, hereby release it into the public 
+  domain. This applies worldwide.
+
+  In case this is not legally possible,
+
+  I grant any entity the right to use this work for any purpose, 
+  without any conditions, unless such conditions are required by law.
+
+-Thatcher Ulrich <tu@tulrich.com> http://tulrich.com
diff --git a/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/Tuffy.ttf b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/Tuffy.ttf
new file mode 100644
index 0000000..8ea6470
Binary files /dev/null and b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/Tuffy.ttf differ
diff --git a/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf
new file mode 100644
index 0000000..9574aab
Binary files /dev/null and b/sites/all/modules/contrib/captcha/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf differ
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.admin.inc b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.admin.inc
new file mode 100644
index 0000000..e4c0aeb
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.admin.inc
@@ -0,0 +1,436 @@
+<?php
+
+/**
+ * @file
+ * Functions for administration/settings interface.
+ */
+
+/**
+ * Configuration form for image_captcha.
+ */
+function image_captcha_settings_form() {
+
+  $form = array();
+
+  // Add CSS for theming of admin form.
+  $form['#attached']['css'] = array(drupal_get_path('module', 'image_captcha') . '/image_captcha.css');
+  // Use JavaScript for some added usability on admin form.
+  $form['#attached']['js'] = array(drupal_get_path('module', 'image_captcha') . '/image_captcha.js');
+
+  // First some error checking.
+  $setup_status = _image_captcha_check_setup(FALSE);
+  if ($setup_status & IMAGE_CAPTCHA_ERROR_NO_GDLIB) {
+    drupal_set_message(t(
+      'The Image CAPTCHA module can not generate images because your PHP setup does not support it (no <a href="!gdlib">GD library</a> with JPEG support).',
+      array('!gdlib' => 'http://php.net/manual/en/book.image.php')
+    ), 'error');
+    // It is no use to continue building the rest of the settings form.
+    return $form;
+  }
+
+  $form['image_captcha_example'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Example'),
+    '#description' => t('Presolved image CAPTCHA example, generated with the current settings.'),
+  );
+  $form['image_captcha_example']['image'] = array(
+    '#type' => 'captcha',
+    '#captcha_type' => 'image_captcha/Image',
+    '#captcha_admin_mode' => TRUE,
+  );
+
+  // General code settings.
+  $form['image_captcha_code_settings'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Code settings'),
+  );
+  $form['image_captcha_code_settings']['image_captcha_image_allowed_chars'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Characters to use in the code'),
+    '#default_value' => variable_get('image_captcha_image_allowed_chars', IMAGE_CAPTCHA_ALLOWED_CHARACTERS),
+  );
+  $form['image_captcha_code_settings']['image_captcha_code_length'] = array(
+    '#type' => 'select',
+    '#title' => t('Code length'),
+    '#options' => array(2 => 2, 3, 4, 5, 6, 7, 8, 9, 10),
+    '#default_value' => (int) variable_get('image_captcha_code_length', 5),
+    '#description' => t('The code length influences the size of the image. Note that larger values make the image generation more CPU intensive.'),
+  );
+  // RTL support option (only show this option when there are RTL languages).
+  $languages = language_list('direction');
+  if (isset($languages[LANGUAGE_RTL])) {
+    $form['image_captcha_code_settings']['image_captcha_rtl_support'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('RTL support'),
+      '#default_value' => variable_get('image_captcha_rtl_support', 0),
+      '#description' => t('Enable this option to render the code from right to left for right to left languages.'),
+    );
+  }
+
+  // Font related stuff.
+  $form['image_captcha_font_settings'] = _image_captcha_settings_form_font_section();
+
+  // Color and file format settings.
+  $form['image_captcha_color_settings'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Color and image settings'),
+    '#description' => t('Configuration of the background, text colors and file format of the image CAPTCHA.'),
+  );
+  $form['image_captcha_color_settings']['image_captcha_background_color'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Background color'),
+    '#description' => t('Enter the hexadecimal code for the background color (e.g. #FFF or #FFCE90). When using the PNG file format with transparent background, it is recommended to set this close to the underlying background color.'),
+    '#default_value' => variable_get('image_captcha_background_color', '#ffffff'),
+    '#maxlength' => 7,
+    '#size' => 8,
+  );
+  $form['image_captcha_color_settings']['image_captcha_foreground_color'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Text color'),
+    '#description' => t('Enter the hexadecimal code for the text color (e.g. #000 or #004283).'),
+    '#default_value' => variable_get('image_captcha_foreground_color', '#000000'),
+    '#maxlength' => 7,
+    '#size' => 8,
+  );
+  $form['image_captcha_color_settings']['image_captcha_foreground_color_randomness'] = array(
+    '#type' => 'select',
+    '#title' => t('Additional variation of text color'),
+    '#options' => array(
+      0 => t('No variation'),
+      50 => t('Little variation'),
+      100 => t('Medium variation'),
+      150 => t('High variation'),
+      200 => t('Very high variation'),
+    ),
+    '#default_value' => (int) variable_get('image_captcha_foreground_color_randomness', 100),
+    '#description' => t('The different characters will have randomized colors in the specified range around the text color.'),
+  );
+  $form['image_captcha_color_settings']['image_captcha_file_format'] = array(
+    '#type' => 'select',
+    '#title' => t('File format'),
+    '#description' => t('Select the file format for the image. JPEG usually results in smaller files, PNG allows tranparency.'),
+    '#default_value' => variable_get('image_captcha_file_format', IMAGE_CAPTCHA_FILE_FORMAT_JPG),
+    '#options' => array(
+      IMAGE_CAPTCHA_FILE_FORMAT_JPG => t('JPEG'),
+      IMAGE_CAPTCHA_FILE_FORMAT_PNG => t('PNG'),
+      IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG => t('PNG with transparent background'),
+    ),
+  );
+
+  // Distortion and noise settings.
+  $form['image_captcha_distortion_and_noise'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Distortion and noise'),
+    '#description' => t('With these settings you can control the degree of obfuscation by distortion and added noise. Do not exaggerate the obfuscation and assure that the code in the image is reasonably readable. For example, do not combine high levels of distortion and noise.'),
+  );
+  // Distortion.
+  $form['image_captcha_distortion_and_noise']['image_captcha_distortion_amplitude'] = array(
+    '#type' => 'select',
+    '#title' => t('Distortion level'),
+    '#options' => array(
+      0 => t('@level - no distortion', array('@level' => '0')),
+      1 => t('@level - low', array('@level' => '1')),
+      2 => '2',
+      3 => '3',
+      4 => '4',
+      5 => t('@level - medium', array('@level' => '5')),
+      6 => '6',
+      7 => '7',
+      8 => '8',
+      9 => '9',
+      10 => t('@level - high', array('@level' => '10')),
+    ),
+    '#default_value' => (int) variable_get('image_captcha_distortion_amplitude', 0),
+    '#description' => t('Set the degree of wave distortion in the image.'),
+  );
+  $form['image_captcha_distortion_and_noise']['image_captcha_bilinear_interpolation'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Smooth distortion'),
+    '#default_value' => variable_get('image_captcha_bilinear_interpolation', FALSE),
+    '#description' => t('This option enables bilinear interpolation of the distortion which makes the image look smoother, but it is more CPU intensive.'),
+  );
+  // Noise.
+  $form['image_captcha_distortion_and_noise']['image_captcha_dot_noise'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Add salt and pepper noise'),
+    '#default_value' => variable_get('image_captcha_dot_noise', 0),
+    '#description' => t('This option adds randomly colored point noise.'),
+  );
+  $form['image_captcha_distortion_and_noise']['image_captcha_line_noise'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Add line noise'),
+    '#default_value' => variable_get('image_captcha_line_noise', 0),
+    '#description' => t('This option enables lines randomly drawn on top of the text code.'),
+  );
+  $form['image_captcha_distortion_and_noise']['image_captcha_noise_level'] = array(
+    '#type' => 'select',
+    '#title' => t('Noise level'),
+    '#options' => array(
+      1 => '1 - ' . t('low'),
+      2 => '2',
+      3 => '3 - ' . t('medium'),
+      4 => '4',
+      5 => '5 - ' . t('high'),
+      7 => '7',
+      10 => '10 - ' . t('severe'),
+    ),
+    '#default_value' => (int) variable_get('image_captcha_noise_level', 5),
+  );
+
+  // Add a validation handler.
+  $form['#validate'] = array('image_captcha_settings_form_validate');
+
+  // Make it a settings form.
+  $form = system_settings_form($form);
+  // But also do some custom submission handling.
+  $form['#submit'][] = 'image_captcha_settings_form_submit';
+
+  return $form;
+}
+
+/**
+ * Form elements for the font specific setting.
+ *
+ * This is refactored to a separate function to avoid poluting the
+ * general form function image_captcha_settings_form with some
+ * specific logic.
+ *
+ * @return array
+ *   the font settings specific form elements.
+ */
+function _image_captcha_settings_form_font_section() {
+  // Put it all in a fieldset.
+  $form = array(
+    '#type' => 'fieldset',
+    '#title' => t('Font settings'),
+  );
+
+  // First check if there is TrueType support.
+  $setup_status = _image_captcha_check_setup(FALSE);
+  if ($setup_status & IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT) {
+    // Show a warning that there is no TrueType support.
+    $form['no_ttf_support'] = array(
+      '#type' => 'item',
+      '#title' => t('No TrueType support'),
+      '#markup' => t('The Image CAPTCHA module can not use TrueType fonts because your PHP setup does not support it. You can only use a PHP built-in bitmap font of fixed size.'),
+    );
+
+  }
+  else {
+    // Build a list of  all available fonts.
+    $available_fonts = array();
+
+    // List of folders to search through for TrueType fonts.
+    $fonts = _image_captcha_get_available_fonts_from_directories();
+    // Cache the list of previewable fonts. All the previews are done
+    // in separate requests, and we don't want to rescan the filesystem
+    // every time, so we cache the result.
+    variable_set('image_captcha_fonts_preview_map_cache', $fonts);
+    // Put these fonts with preview image in the list.
+    foreach ($fonts as $token => $font) {
+      $img_src = check_url(url('admin/config/people/captcha/image_captcha/font_preview/' . $token));
+      $title = t('Font preview of @font (@file)', array('@font' => $font->name, '@file' => $font->uri));
+      $available_fonts[$font->uri] = '<img src="' . $img_src . '" alt="' . $title . '" title="' . $title . '" />';
+    }
+
+    // Append the PHP built-in font at the end.
+    $img_src = check_url(url('admin/config/people/captcha/image_captcha/font_preview/BUILTIN'));
+    $title = t('Preview of built-in font');
+    $available_fonts['BUILTIN'] = t('PHP built-in font: !font_preview',
+      array('!font_preview' => '<img src="' . $img_src . '" alt="' . $title . '" title="' . $title . '" />')
+    );
+
+    $default_fonts = _image_captcha_get_enabled_fonts();
+    $form['image_captcha_fonts'] = array(
+      '#type' => 'checkboxes',
+      '#title' => t('Fonts'),
+      '#default_value' => $default_fonts,
+      '#description' => t('Select the fonts to use for the text in the image CAPTCHA. Apart from the provided defaults, you can also use your own TrueType fonts (filename extension .ttf) by putting them in %fonts_library_general or %fonts_library_specific.',
+        array(
+          '%fonts_library_general' => 'sites/all/libraries/fonts',
+          '%fonts_library_specific' => conf_path() . '/libraries/fonts',
+        )
+      ),
+      '#options' => $available_fonts,
+      '#attributes' => array('class' => array('image_captcha_admin_fonts_selection')),
+      '#process' => array('form_process_checkboxes'),
+    );
+
+    // Font size.
+    $form['image_captcha_font_size'] = array(
+      '#type' => 'select',
+      '#title' => t('Font size'),
+      '#options' => array(
+        9 => '9 pt - ' . t('tiny'),
+        12 => '12 pt - ' . t('small'),
+        18 => '18 pt',
+        24 => '24 pt - ' . t('normal'),
+        30 => '30 pt',
+        36 => '36 pt - ' . t('large'),
+        48 => '48 pt',
+        64 => '64 pt - ' . t('extra large'),
+      ),
+      '#default_value' => (int) variable_get('image_captcha_font_size', 30),
+      '#description' => t('The font size influences the size of the image. Note that larger values make the image generation more CPU intensive.'),
+    );
+
+  }
+
+  // Character spacing (available for both the TrueType fonts and the builtin font.
+  $form['image_captcha_font_settings']['image_captcha_character_spacing'] = array(
+    '#type' => 'select',
+    '#title' => t('Character spacing'),
+    '#description' => t('Define the average spacing between characters. Note that larger values make the image generation more CPU intensive.'),
+    '#default_value' => variable_get('image_captcha_character_spacing', '1.2'),
+    '#options' => array(
+      '0.75' => t('tight'),
+      '1' => t('normal'),
+      '1.2' => t('wide'),
+      '1.5' => t('extra wide'),
+    ),
+  );
+
+  return $form;
+}
+
+/**
+ * Helper function to get fonts from the given directories.
+ *
+ * @param array|null $directories
+ *   an array of directories
+ *   to recursively search through, if not given, the default
+ *   directories will be used.
+ *
+ * @return array
+ *   an array of fonts file objects (with fields 'name',
+ *   'basename' and 'filename'), keyed on the md5 hash of the font
+ *   path (to have an easy token that can be used in an url
+ *   without en/decoding issues).
+ */
+function _image_captcha_get_available_fonts_from_directories($directories = NULL) {
+  // If no fonts directories are given: use the default.
+  if ($directories === NULL) {
+    $directories = array(
+      drupal_get_path('module', 'image_captcha') . '/fonts',
+      'sites/all/libraries/fonts',
+      conf_path() . '/libraries/fonts',
+    );
+  }
+  // Collect the font information.
+  $fonts = array();
+  foreach ($directories as $directory) {
+    foreach (file_scan_directory($directory, '/\.[tT][tT][fF]$/') as $filename => $font) {
+      $fonts[md5($filename)] = $font;
+    }
+  }
+
+  return $fonts;
+}
+
+/**
+ * Validation function for image_captcha configuration form.
+ */
+function image_captcha_settings_form_validate($form, &$form_state) {
+  // Check image_captcha_image_allowed_chars for spaces.
+  if (preg_match('/\s/', $form_state['values']['image_captcha_image_allowed_chars'])) {
+    form_set_error('image_captcha_image_allowed_chars', t('The list of characters to use should not contain spaces.'));
+  }
+
+  if (!isset($form['image_captcha_font_settings']['no_ttf_support'])) {
+    // Check the selected fonts.
+    // Filter the image_captcha fonts array to pick out the selected ones.
+    $fonts = array_filter($form_state['values']['image_captcha_fonts']);
+    if (count($fonts) < 1) {
+      form_set_error('image_captcha_fonts', t('You need to select at least one font.'));
+    }
+    if ($form_state['values']['image_captcha_fonts']['BUILTIN']) {
+      // With the built in font, only latin2 characters should be used.
+      if (preg_match('/[^a-zA-Z0-9]/', $form_state['values']['image_captcha_image_allowed_chars'])) {
+        form_set_error('image_captcha_image_allowed_chars', t('The built-in font only supports Latin2 characters. Only use "a" to "z" and numbers.'));
+      }
+    }
+    list($readable_fonts, $problem_fonts) = _image_captcha_check_fonts($fonts);
+    if (count($problem_fonts) > 0) {
+      form_set_error('image_captcha_fonts', t('The following fonts are not readable: %fonts.', array('%fonts' => implode(', ', $problem_fonts))));
+    }
+  }
+
+  // Check color settings.
+  if (!preg_match('/^#([0-9a-fA-F]{3}){1,2}$/', $form_state['values']['image_captcha_background_color'])) {
+    form_set_error('image_captcha_background_color', t('Background color is not a valid hexadecimal color value.'));
+  }
+  if (!preg_match('/^#([0-9a-fA-F]{3}){1,2}$/', $form_state['values']['image_captcha_foreground_color'])) {
+    form_set_error('image_captcha_foreground_color', t('Text color is not a valid hexadecimal color value.'));
+  }
+}
+
+/**
+ * Submit function for image_captcha configuration form.
+ */
+function image_captcha_settings_form_submit($form, &$form_state) {
+  if (!isset($form['image_captcha_font_settings']['no_ttf_support'])) {
+    // Filter the image_captcha fonts array to pick out the selected ones.
+    $fonts = array_filter($form_state['values']['image_captcha_fonts']);
+    variable_set('image_captcha_fonts', $fonts);
+  }
+}
+
+/**
+ * Menu handler for font preview request.
+ */
+function image_captcha_font_preview($font_token) {
+
+  // Get the font from the given font token.
+  if ($font_token == 'BUILTIN') {
+    $font = 'BUILTIN';
+  }
+  else {
+    // Get the mapping of font tokens to font file objects.
+    $fonts = variable_get('image_captcha_fonts_preview_map_cache', array());
+    if (!isset($fonts[$font_token])) {
+      echo ('bad token');
+      exit();
+    }
+    // Get the font path.
+    $font = $fonts[$font_token]->uri;
+    // Some sanity checks if the given font is valid.
+    if (!is_file($font) || !is_readable($font)) {
+      echo ('bad font');
+      exit();
+    }
+  }
+
+  // Settings of the font preview.
+  $width = 120;
+  $text = 'AaBbCc123';
+  $font_size = 14;
+  $height = 2 * $font_size;
+
+  // Allocate image resource.
+  $image = imagecreatetruecolor($width, $height);
+  if (!$image) {
+    exit();
+  }
+  // White background and black foreground.
+  $background_color = imagecolorallocate($image, 255, 255, 255);
+  $color = imagecolorallocate($image, 0, 0, 0);
+  imagefilledrectangle($image, 0, 0, $width, $height, $background_color);
+
+  // Draw preview text.
+  if ($font == 'BUILTIN') {
+    imagestring($image, 5, 1, .5 * $height - 10, $text, $color);
+  }
+  else {
+    imagettftext($image, $font_size, 0, 1, 1.5 * $font_size, $color, realpath($font), $text);
+  }
+
+  // Set content type.
+  drupal_add_http_header('Content-Type', 'image/png');
+  // Dump image data to client.
+  imagepng($image);
+  // Release image memory.
+  imagedestroy($image);
+
+  // Close connection.
+  exit();
+}
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.css b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.css
new file mode 100644
index 0000000..dd7f478
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.css
@@ -0,0 +1,29 @@
+/**
+ * Styling of the font selection list (with previews)
+ * on the Image CAPTCHA settings page.
+ */
+
+/**
+ * Float the fonts with preview (with a fixed width)
+ * to create a multi-column layout.
+ */
+.image_captcha_admin_fonts_selection .form-item {
+  float: left;
+  width: 160px;
+}
+
+/**
+ * Stop floating with the item for the built in font.
+ */
+.image_captcha_admin_fonts_selection .form-item-image-captcha-fonts-BUILTIN {
+  clear: both;
+  float: none;
+  width: 100%;
+}
+
+/**
+ * Center the font previews vertically to the text.
+ */
+.image_captcha_admin_fonts_selection img {
+  vertical-align: middle;
+}
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.info b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.info
new file mode 100644
index 0000000..fdd2f6d
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.info
@@ -0,0 +1,19 @@
+name = "Image CAPTCHA"
+description = "Provides an image based CAPTCHA challenge."
+package = "Spam control"
+dependencies[] = captcha
+core = 7.x
+configure = admin/config/people/captcha/image_captcha
+
+files[] = image_captcha.install
+files[] = image_captcha.module
+files[] = image_captcha.admin.inc
+files[] = image_captcha.user.inc
+files[] = image_captcha.test
+
+; Information added by Drupal.org packaging script on 2017-09-06
+version = "7.x-1.5"
+core = "7.x"
+project = "captcha"
+datestamp = "1504724060"
+
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.install b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.install
new file mode 100644
index 0000000..3397235
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.install
@@ -0,0 +1,40 @@
+<?php
+
+/**
+ * @file
+ * Installation/uninstallation related functions for the image_captcha module.
+ */
+
+/**
+ * Implements hook_requirements().
+ */
+function image_captcha_requirements($phase) {
+  $requirements = array();
+  $t = get_t();
+  if ($phase == 'install') {
+    // _image_captcha_check_setup() is defined in image_captcha.module.
+    module_load_include('module', 'image_captcha');
+    // Check if the GD library is available and raise an error when not.
+    if (_image_captcha_check_setup(FALSE) & IMAGE_CAPTCHA_ERROR_NO_GDLIB) {
+      $requirements['image_captcha_requires_gd'] = array(
+        'title' => $t('Image CAPTCHA requires GD library'),
+        'description' => $t(
+          'The Image CAPTCHA module can not be installed because your PHP setup does not provide the <a href="!gddoc">GD library</a>, which is required to generate images.',
+          array('!gddoc' => 'http://www.php.net/manual/en/book.image.php')
+        ),
+        'severity' => REQUIREMENT_ERROR,
+      );
+    }
+  }
+  return $requirements;
+}
+
+/**
+ * On uninstall: remove module variables and clear variable cache.
+ */
+function image_captcha_uninstall() {
+  db_delete('variable')
+    ->condition('name', db_like('image_captcha_') . '%', 'LIKE')
+    ->execute();
+  cache_clear_all('variables', 'cache');
+}
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.js b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.js
new file mode 100644
index 0000000..e6d492b
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.js
@@ -0,0 +1,39 @@
+(function($) {
+
+  Drupal.behaviors.captchaAdmin = {
+    attach : function(context) {
+
+      // Helper function to show/hide noise level widget.
+      var noise_level_shower = function(speed) {
+        speed = (typeof speed == 'undefined') ? 'slow' : speed;
+        if ($("#edit-image-captcha-dot-noise").is(":checked") || $("#edit-image-captcha-line-noise").is(":checked")) {
+          $(".form-item-image-captcha-noise-level").show(speed);
+        } else {
+          $(".form-item-image-captcha-noise-level").hide(speed);
+        }
+      };
+      // Add onclick handler to the dot and line noise check boxes.
+      $("#edit-image-captcha-dot-noise").click(noise_level_shower);
+      $("#edit-image-captcha-line-noise").click(noise_level_shower);
+      // Show or hide appropriately on page load.
+      noise_level_shower(0);
+
+      // Helper function to show/hide smooth distortion widget.
+      var smooth_distortion_shower = function(speed) {
+        speed = (typeof speed == 'undefined') ? 'slow' : speed;
+        if ($("#edit-image-captcha-distortion-amplitude").val() > 0) {
+          $(".form-item-image-captcha-bilinear-interpolation").show(speed);
+        } else {
+          $(".form-item-image-captcha-bilinear-interpolation").hide(speed);
+        }
+      };
+      // Add onchange handler to the distortion level select widget.
+      $("#edit-image-captcha-distortion-amplitude").change(
+          smooth_distortion_shower);
+      // Show or hide appropriately on page load.
+      smooth_distortion_shower(0);
+
+    }
+  };
+
+})(jQuery);
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.module b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.module
new file mode 100644
index 0000000..1fd9c36
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.module
@@ -0,0 +1,283 @@
+<?php
+
+/**
+ * @file
+ * Implements image CAPTCHA for use with the CAPTCHA module
+ */
+
+define('IMAGE_CAPTCHA_ALLOWED_CHARACTERS', 'aAbBCdEeFfGHhijKLMmNPQRrSTtWXYZ23456789');
+
+// Setup status flags.
+define('IMAGE_CAPTCHA_ERROR_NO_GDLIB', 1);
+define('IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT', 2);
+define('IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM', 4);
+
+define('IMAGE_CAPTCHA_FILE_FORMAT_JPG', 1);
+define('IMAGE_CAPTCHA_FILE_FORMAT_PNG', 2);
+define('IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG', 3);
+
+/**
+ * Implements hook_help().
+ */
+function image_captcha_help($path, $arg) {
+  switch ($path) {
+    case 'admin/config/people/captcha/image_captcha':
+      $output = '<p>' . t('The image CAPTCHA is a popular challenge where a random textual code is obfuscated in an image. The image is generated on the fly for each request, which is rather CPU intensive for the server. Be careful with the size and computation related settings.') . '</p>';
+      return $output;
+  }
+}
+
+/**
+ * Implements hook_menu().
+ */
+function image_captcha_menu() {
+  $items = array();
+  // Add an administration tab for image_captcha.
+  $items['admin/config/people/captcha/image_captcha'] = array(
+    'title' => 'Image CAPTCHA',
+    'file' => 'image_captcha.admin.inc',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('image_captcha_settings_form'),
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_LOCAL_TASK,
+  );
+  // Menu path for generating font example.
+  $items['admin/config/people/captcha/image_captcha/font_preview'] = array(
+    'title' => 'Font example',
+    'file' => 'image_captcha.admin.inc',
+    'page callback' => 'image_captcha_font_preview',
+    'access arguments' => array('administer CAPTCHA settings'),
+    'type' => MENU_CALLBACK,
+  );
+  // Callback for generating an image.
+  $items['image_captcha'] = array(
+    'file' => 'image_captcha.user.inc',
+    'page callback' => 'image_captcha_image',
+    'access callback' => TRUE,
+    'type' => MENU_CALLBACK,
+  );
+  return $items;
+}
+
+/**
+ * Helper function for getting the fonts to use in the image CAPTCHA.
+ *
+ * @return array
+ *   a list of font paths.
+ */
+function _image_captcha_get_enabled_fonts() {
+  if (IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT & _image_captcha_check_setup(FALSE)) {
+    return array('BUILTIN');
+  }
+  else {
+    $default = array(
+      drupal_get_path('module', 'image_captcha') . '/fonts/Tesox/tesox.ttf',
+      drupal_get_path('module', 'image_captcha') . '/fonts/Tuffy/Tuffy.ttf',
+    );
+    return variable_get('image_captcha_fonts', $default);
+  }
+}
+
+/**
+ * Helper function for checking if the specified fonts are available.
+ *
+ * @param array $fonts
+ *   paths of fonts to check.
+ *
+ * @return array
+ *   list($readable_fonts, $problem_fonts)
+ */
+function _image_captcha_check_fonts($fonts) {
+  $readable_fonts = array();
+  $problem_fonts = array();
+  foreach ($fonts as $font) {
+    if ($font != 'BUILTIN' && (!is_file($font) || !is_readable($font))) {
+      $problem_fonts[] = $font;
+    }
+    else {
+      $readable_fonts[] = $font;
+    }
+  }
+  return array($readable_fonts, $problem_fonts);
+}
+
+/**
+ * Helper function for splitting an utf8 string correctly in characters.
+ *
+ * Assumes the given utf8 string is well formed.
+ * See http://en.wikipedia.org/wiki/Utf8 for more info
+ */
+function _image_captcha_utf8_split($str) {
+  $characters = array();
+  $len = strlen($str);
+  for ($i = 0; $i < $len;) {
+    $chr = ord($str[$i]);
+    // One byte character (0zzzzzzz)
+    if (($chr & 0x80) == 0x00) {
+      $width = 1;
+    }
+    else {
+      // Two byte character (first byte: 110yyyyy)
+      if (($chr & 0xE0) == 0xC0) {
+        $width = 2;
+      }
+      // Three byte character (first byte: 1110xxxx)
+      elseif (($chr & 0xF0) == 0xE0) {
+        $width = 3;
+      }
+      // Four byte character (first byte: 11110www)
+      elseif (($chr & 0xF8) == 0xF0) {
+        $width = 4;
+      }
+      else {
+        watchdog('CAPTCHA', 'Encountered an illegal byte while splitting an utf8 string in characters.', array(), WATCHDOG_ERROR);
+        return $characters;
+      }
+    }
+    $characters[] = substr($str, $i, $width);
+    $i += $width;
+  }
+  return $characters;
+}
+
+/**
+ * Helper function for checking the setup of the Image CAPTCHA.
+ *
+ * The image CAPTCHA requires at least the GD PHP library.
+ * Support for TTF is recommended and the enabled
+ * font files should be readable.
+ * This functions checks these things.
+ *
+ * @param bool $check_fonts
+ *   whether or not the enabled fonts should be checked.
+ *
+ * @return int
+ *   status code: bitwise 'OR' of status flags like
+ *   IMAGE_CAPTCHA_ERROR_NO_GDLIB, IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT,
+ *   IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM.
+ */
+function _image_captcha_check_setup($check_fonts = TRUE) {
+  // Start clean.
+  $status = 0;
+  // Check if we can use the GD library.
+  // We need at least the imagepng function (for font previews on the settings page).
+  // Note that the imagejpg function is optionally also used, but not required.
+  if (!function_exists('imagepng')) {
+    $status = $status | IMAGE_CAPTCHA_ERROR_NO_GDLIB;
+  }
+  if (!function_exists('imagettftext')) {
+    $status = $status | IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT;
+  }
+  if ($check_fonts) {
+    // Check availability of enabled fonts.
+    $fonts = _image_captcha_get_enabled_fonts();
+    list($readable_fonts, $problem_fonts) = _image_captcha_check_fonts($fonts);
+    if (count($problem_fonts) != 0) {
+      $status = $status | IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM;
+    }
+  }
+  return $status;
+}
+
+/**
+ * Helper function for calculating image height and width based on given code and current font/spacing settings.
+ *
+ * @return array
+ *   array($width, $heigh)
+ */
+function _image_captcha_image_size($code) {
+  // Get settings.
+  $font_size = (int) variable_get('image_captcha_font_size', 30);
+  $character_spacing = (float) variable_get('image_captcha_character_spacing', '1.2');
+  $characters = _image_captcha_utf8_split($code);
+  $character_quantity = count($characters);
+
+  // Calculate height and width.
+  $width = $character_spacing * $font_size * $character_quantity;
+  $height = 2 * $font_size;
+
+  return array($width, $height);
+}
+
+/**
+ * Implements hook_captcha().
+ */
+function image_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
+  switch ($op) {
+    case 'list':
+      // Only offer the image CAPTCHA if it is possible to generate an image on this setup.
+      if (!(_image_captcha_check_setup() & IMAGE_CAPTCHA_ERROR_NO_GDLIB)) {
+        return array('Image');
+      }
+      else {
+        return array();
+      }
+      break;
+
+    case 'generate':
+      if ($captcha_type == 'Image') {
+        // In maintenance mode, the image CAPTCHA does not work because the request
+        // for the image itself won't succeed (only ?q=user is permitted for
+        // unauthenticated users). We fall back to the Math CAPTCHA in that case.
+        global $user;
+        if (variable_get('maintenance_mode', 0) && $user->uid == 0) {
+          return captcha_captcha('generate', 'Math');
+        }
+        // Generate a CAPTCHA code.
+        $allowed_chars = _image_captcha_utf8_split(variable_get('image_captcha_image_allowed_chars', IMAGE_CAPTCHA_ALLOWED_CHARACTERS));
+        $code_length = (int) variable_get('image_captcha_code_length', 5);
+        $code = '';
+        for ($i = 0; $i < $code_length; $i++) {
+          $code .= $allowed_chars[array_rand($allowed_chars)];
+        }
+
+        // Build the result to return.
+        $result = array();
+
+        $result['solution'] = $code;
+        // Generate image source URL (add timestamp to avoid problems with
+        // client side caching: subsequent images of the same CAPTCHA session
+        // have the same URL, but should display a different code).
+        $options = array(
+          'query' => array(
+            'sid' => $captcha_sid,
+            'ts' => REQUEST_TIME,
+          ),
+        );
+        $img_src = drupal_strip_dangerous_protocols(url("image_captcha", $options));
+        list($width, $height) = _image_captcha_image_size($code);
+        $result['form']['captcha_image'] = array(
+          '#theme' => 'image',
+          '#weight' => -2,
+          '#path' => $img_src,
+          '#width' => $width,
+          '#height' => $height,
+          '#title' => t('Image CAPTCHA'),
+          '#alt' => t('Image CAPTCHA'),
+        );
+        $result['form']['captcha_response'] = array(
+          '#type' => 'textfield',
+          '#title' => t('What code is in the image?'),
+          '#description' => t('Enter the characters shown in the image.'),
+          '#weight' => 0,
+          '#required' => TRUE,
+          '#size' => 15,
+        );
+
+        // Handle the case insensitive validation option combined with ignoring spaces.
+        switch (variable_get('captcha_default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE)) {
+          case CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE:
+            $result['captcha_validate'] = 'captcha_validate_ignore_spaces';
+            break;
+
+          case CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE:
+            $result['captcha_validate'] = 'captcha_validate_case_insensitive_ignore_spaces';
+            break;
+        }
+
+        return $result;
+      }
+      break;
+
+  }
+}
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.test b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.test
new file mode 100644
index 0000000..6f5d5a3
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.test
@@ -0,0 +1,72 @@
+<?php
+
+/**
+ * @file
+ * Tests for the Image CAPTCHA module.
+ */
+
+class ImageCaptchaWebTestCase extends CaptchaBaseWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'General Image CAPTCHA functionality',
+      'description' => 'Testing of the basic Image CAPTCHA functions.',
+      'group' => 'CAPTCHA',
+    );
+  }
+
+  public function setUp() {
+    parent::setUp('image_captcha');
+  }
+
+  /**
+   * Helper function to get the CAPTCHA image element from the current form.
+   */
+  protected function getCaptchaImageFromForm() {
+    $elements = $this->xpath('//input[@name="captcha_sid"]/../img');
+    return $elements[0];
+  }
+
+  /**
+   * Helper function to get a CAPTCHA form.
+   */
+  protected function getImageCaptchaForm($form_id = 'user_login', $page = 'user') {
+    // Set a CAPTCHA on supplied form.
+    captcha_set_form_id_setting($form_id, 'image_captcha/Image');
+
+    // Fetch the page and make sure that we got a CAPTCHA.
+    $this->drupalGet($page);
+    $this->assertCaptchaPresence(TRUE);
+  }
+
+  /**
+   * Asserts that the image URL actually returns an image.
+   */
+  protected function assertNonEmptyImage() {
+    $img = $this->getCaptchaImageFromForm();
+
+    // Try to fetch the image.
+    $this->drupalGet($this->getAbsoluteUrl($img['src']));
+    $this->assertTrue($this->drupalGetHeader('Content-Length') > 0,
+                      'Image CAPTCHA image is not empty.');
+  }
+
+  /**
+   * Tests if the image URL actually returns an image with clean URLs enabled.
+   */
+  public function testNonEmptyImageCleanURLs() {
+    variable_set('clean_url', 1);
+    $this->getImageCaptchaForm();
+    $this->assertNonEmptyImage();
+  }
+
+  /**
+   * Tests if the image URL actually returns an image with clean URLs disabled.
+   */
+  public function testNonEmptyImageDirtyURLs() {
+    variable_set('clean_url', 0);
+    $this->getImageCaptchaForm();
+    $this->assertNonEmptyImage();
+  }
+
+}
diff --git a/sites/all/modules/contrib/captcha/image_captcha/image_captcha.user.inc b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.user.inc
new file mode 100644
index 0000000..18b81dd
--- /dev/null
+++ b/sites/all/modules/contrib/captcha/image_captcha/image_captcha.user.inc
@@ -0,0 +1,363 @@
+<?php
+
+/**
+ * @file
+ * Functions for the generation of the CAPTCHA image.
+ *
+ * Loosely Based on MyCaptcha by Heine Deelstra
+ * (http://heine.familiedeelstra.com/mycaptcha-download)
+ */
+
+/**
+ * Menu callback function that generates the CAPTCHA image.
+ */
+function image_captcha_image() {
+  // If output buffering is on: discard current content and disable further buffering.
+  if (ob_get_level()) {
+    ob_end_clean();
+  }
+
+  if (!isset($_GET['sid']) || is_array($_GET['sid'])) {
+    exit();
+  }
+  $captcha_sid = $_GET['sid'];
+
+  // Get solution (the code to show).
+  $code = db_query("SELECT solution FROM {captcha_sessions} WHERE csid = :csid",
+    array(':csid' => $captcha_sid)
+  )->fetchField();
+
+  // Only generate captcha if code exists in the session.
+  if ($code !== FALSE) {
+    // Seed the random generators used for image CAPTCHA distortion based on session and code
+    // to counter attacks that re-request the same challenge and pick the simplest image one or combine info.
+    $seed = hexdec(substr(md5($captcha_sid . $code), 0, 8));
+    srand($seed);
+    mt_srand($seed);
+    // Generate the image.
+    $image = @_image_captcha_generate_image($code);
+    // Check of generation was successful.
+    if (!$image) {
+      watchdog('CAPTCHA', 'Generation of image CAPTCHA failed. Check your image CAPTCHA configuration and especially the used font.', array(), WATCHDOG_ERROR);
+      exit();
+    }
+    // Send the image resource as an image file to the client.
+    $file_format = variable_get('image_captcha_file_format', IMAGE_CAPTCHA_FILE_FORMAT_JPG);
+    if ($file_format == IMAGE_CAPTCHA_FILE_FORMAT_JPG) {
+      drupal_add_http_header('Content-Type', 'image/jpeg');
+      imagejpeg($image);
+    }
+    else {
+      drupal_add_http_header('Content-Type', 'image/png');
+      imagepng($image);
+    }
+    // Clean up the image resource.
+    imagedestroy($image);
+  }
+  exit();
+}
+
+/**
+ * Small helper function for parsing a hexadecimal color to a RGB tuple.
+ */
+function _image_captcha_hex_to_rgb($hex) {
+  // Handle #RGB format/
+  if (strlen($hex) == 4) {
+    $hex = $hex[1] . $hex[1] . $hex[2] . $hex[2] . $hex[3] . $hex[3];
+  }
+  $c = hexdec($hex);
+  $rgb = array();
+  for ($i = 16; $i >= 0; $i -= 8) {
+    $rgb[] = ($c >> $i) & 0xFF;
+  }
+  return $rgb;
+}
+
+/**
+ * Base function for generating a image CAPTCHA.
+ */
+function _image_captcha_generate_image($code) {
+  // Get font.
+  $fonts = _image_captcha_get_enabled_fonts();
+
+  // Get other settings.
+  $font_size = (int) variable_get('image_captcha_font_size', 30);
+  list($width, $height) = _image_captcha_image_size($code);
+
+  // Create image resource.
+  $image = imagecreatetruecolor($width, $height);
+  if (!$image) {
+    return FALSE;
+  }
+
+  // Get the background color and paint the background.
+  $background_rgb = _image_captcha_hex_to_rgb(variable_get('image_captcha_background_color', '#ffffff'));
+  $background_color = imagecolorallocate($image, $background_rgb[0], $background_rgb[1], $background_rgb[2]);
+  // Set transparency if needed.
+  $file_format = variable_get('image_captcha_file_format', IMAGE_CAPTCHA_FILE_FORMAT_JPG);
+  if ($file_format == IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG) {
+    imagecolortransparent($image, $background_color);
+  }
+  imagefilledrectangle($image, 0, 0, $width, $height, $background_color);
+
+  // Do we need to draw in RTL mode?
+  global $language;
+  $rtl = $language->direction && ((bool) variable_get('image_captcha_rtl_support', 0));
+
+  // Draw text.
+  $result = _image_captcha_image_generator_print_string($image, $width, $height, $fonts, $font_size, $code, $rtl);
+  if (!$result) {
+    return FALSE;
+  }
+
+  // Add noise.
+  $noise_colors = array();
+  for ($i = 0; $i < 20; $i++) {
+    $noise_colors[] = imagecolorallocate($image, mt_rand(0, 255), mt_rand(0, 255), mt_rand(0, 255));
+  }
+  // Add additional noise.
+  if (variable_get('image_captcha_dot_noise', 0)) {
+    _image_captcha_image_generator_add_dots($image, $width, $height, $noise_colors);
+  }
+  if (variable_get('image_captcha_line_noise', 0)) {
+    _image_captcha_image_generator_add_lines($image, $width, $height, $noise_colors);
+  }
+
+  // Distort the image.
+  $distortion_amplitude = .25 * $font_size * variable_get('image_captcha_distortion_amplitude', 0) / 10.0;
+  if ($distortion_amplitude > 1) {
+    // Distortion parameters.
+    $wavelength_xr = (2 + 3 * mt_rand(0, 1000) / 1000) * $font_size;
+    $wavelength_yr = (2 + 3 * mt_rand(0, 1000) / 1000) * $font_size;
+    $freq_xr = 2 * 3.141592 / $wavelength_xr;
+    $freq_yr = 2 * 3.141592 / $wavelength_yr;
+    $wavelength_xt = (2 + 3 * mt_rand(0, 1000) / 1000) * $font_size;
+    $wavelength_yt = (2 + 3 * mt_rand(0, 1000) / 1000) * $font_size;
+    $freq_xt = 2 * 3.141592 / $wavelength_xt;
+    $freq_yt = 2 * 3.141592 / $wavelength_yt;
+
+    $distorted_image = imagecreatetruecolor($width, $height);
+    if ($file_format == IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG) {
+      imagecolortransparent($distorted_image, $background_color);
+    }
+    if (!$distorted_image) {
+      return FALSE;
+    }
+
+    if (variable_get('image_captcha_bilinear_interpolation', FALSE)) {
+      // Distortion with bilinear interpolation.
+      for ($x = 0; $x < $width; $x++) {
+        for ($y = 0; $y < $height; $y++) {
+          // Get distorted sample point in source image.
+          $r = $distortion_amplitude * sin($x * $freq_xr + $y * $freq_yr);
+          $theta = $x * $freq_xt + $y * $freq_yt;
+          $sx = $x + $r * cos($theta);
+          $sy = $y + $r * sin($theta);
+          $sxf = (int) floor($sx);
+          $syf = (int) floor($sy);
+          if ($sxf < 0 || $syf < 0 || $sxf >= $width - 1 || $syf >= $height - 1) {
+            $color = $background_color;
+          }
+          else {
+            // Bilinear interpolation: sample at four corners.
+            $color_00 = imagecolorat($image, $sxf, $syf);
+            $color_00_r = ($color_00 >> 16) & 0xFF;
+            $color_00_g = ($color_00 >> 8) & 0xFF;
+            $color_00_b = $color_00 & 0xFF;
+            $color_10 = imagecolorat($image, $sxf + 1, $syf);
+            $color_10_r = ($color_10 >> 16) & 0xFF;
+            $color_10_g = ($color_10 >> 8) & 0xFF;
+            $color_10_b = $color_10 & 0xFF;
+            $color_01 = imagecolorat($image, $sxf, $syf + 1);
+            $color_01_r = ($color_01 >> 16) & 0xFF;
+            $color_01_g = ($color_01 >> 8) & 0xFF;
+            $color_01_b = $color_01 & 0xFF;
+            $color_11 = imagecolorat($image, $sxf + 1, $syf + 1);
+            $color_11_r = ($color_11 >> 16) & 0xFF;
+            $color_11_g = ($color_11 >> 8) & 0xFF;
+            $color_11_b = $color_11 & 0xFF;
+            // Interpolation factors.
+            $u  = $sx - $sxf;
+            $v  = $sy - $syf;
+            // Interpolate.
+            $r = (int) ((1 - $v) * ((1 - $u) * $color_00_r + $u * $color_10_r) + $v * ((1 - $u) * $color_01_r + $u * $color_11_r));
+            $g = (int) ((1 - $v) * ((1 - $u) * $color_00_g + $u * $color_10_g) + $v * ((1 - $u) * $color_01_g + $u * $color_11_g));
+            $b = (int) ((1 - $v) * ((1 - $u) * $color_00_b + $u * $color_10_b) + $v * ((1 - $u) * $color_01_b + $u * $color_11_b));
+            // Build color.
+            $color = ($r<<16) + ($g<<8) + $b;
+          }
+          imagesetpixel($distorted_image, $x, $y, $color);
+        }
+      }
+    }
+    else {
+      // Distortion with nearest neighbor interpolation.
+      for ($x = 0; $x < $width; $x++) {
+        for ($y = 0; $y < $height; $y++) {
+          // Get distorted sample point in source image.
+          $r = $distortion_amplitude * sin($x * $freq_xr + $y * $freq_yr);
+          $theta = $x * $freq_xt + $y * $freq_yt;
+          $sx = $x + $r * cos($theta);
+          $sy = $y + $r * sin($theta);
+          $sxf = (int) floor($sx);
+          $syf = (int) floor($sy);
+          if ($sxf < 0 || $syf < 0 || $sxf >= $width - 1 || $syf >= $height - 1) {
+            $color = $background_color;
+          }
+          else {
+            $color = imagecolorat($image, $sxf, $syf);
+          }
+          imagesetpixel($distorted_image, $x, $y, $color);
+        }
+      }
+    }
+    // Release undistorted image.
+    imagedestroy($image);
+    // Return distorted image.
+    return $distorted_image;
+  }
+  else {
+    return $image;
+  }
+}
+
+/**
+ * Add lines.
+ */
+function _image_captcha_image_generator_add_lines(&$image, $width, $height, $colors) {
+  $line_quantity = $width * $height / 200.0 * ((int) variable_get('image_captcha_noise_level', 5)) / 10.0;
+  for ($i = 0; $i < $line_quantity; $i++) {
+    imageline($image, mt_rand(0, $width), mt_rand(0, $height), mt_rand(0, $width), mt_rand(0, $height), $colors[array_rand($colors)]);
+  }
+}
+
+/**
+ * Add dots.
+ */
+function _image_captcha_image_generator_add_dots(&$image, $width, $height, $colors) {
+  $noise_quantity = $width * $height * ((int) variable_get('image_captcha_noise_level', 5)) / 10.0;
+  for ($i = 0; $i < $noise_quantity; $i++) {
+    imagesetpixel($image, mt_rand(0, $width), mt_rand(0, $height), $colors[array_rand($colors)]);
+  }
+}
+
+/**
+ * Helper function for drawing text on the image.
+ */
+function _image_captcha_image_generator_print_string(&$image, $width, $height, $fonts, $font_size, $text, $rtl = FALSE) {
+  // Get characters.
+  $characters = _image_captcha_utf8_split($text);
+  $character_quantity = count($characters);
+
+  // Get colors.
+  $background_rgb = _image_captcha_hex_to_rgb(variable_get('image_captcha_background_color', '#ffffff'));
+  $foreground_rgb = _image_captcha_hex_to_rgb(variable_get('image_captcha_foreground_color', '#000000'));
+  $background_color = imagecolorallocate($image, $background_rgb[0], $background_rgb[1], $background_rgb[2]);
+  $foreground_color = imagecolorallocate($image, $foreground_rgb[0], $foreground_rgb[1], $foreground_rgb[2]);
+  // Precalculate the value ranges for color randomness.
+  $foreground_randomness = (int) (variable_get('image_captcha_foreground_color_randomness', 100));
+  if ($foreground_randomness) {
+    $foreground_color_range = array();
+    for ($i = 0; $i < 3; $i++) {
+      $foreground_color_range[$i] = array(
+        max(0, $foreground_rgb[$i] - $foreground_randomness),
+        min(255, $foreground_rgb[$i] + $foreground_randomness),
+      );
+    }
+  }
+
+  // Set default text color.
+  $color = $foreground_color;
+
+  // The image is seperated in different character cages, one for each character,
+  // each character will be somewhere inside that cage.
+  $ccage_width = $width / $character_quantity;
+  $ccage_height = $height;
+
+  foreach ($characters as $c => $character) {
+    // Initial position of character: in the center of its cage.
+    $center_x = ($c + 0.5) * $ccage_width;
+    if ($rtl) {
+      $center_x = $width - $center_x;
+    }
+    $center_y = 0.5 * $height;
+
+    // Pick a random font from the list.
+    $font = $fonts[array_rand($fonts)];
+
+    // Get character dimensions for TrueType fonts.
+    if ($font != 'BUILTIN') {
+      $bbox = imagettfbbox($font_size, 0, drupal_realpath($font), $character);
+      // In very rare cases with some versions of the GD library, the x-value
+      // of the left side of the bounding box as returned by the first call of
+      // imagettfbbox is corrupt (value -2147483648 = 0x80000000).
+      // The weird thing is that calling the function a second time
+      // can be used as workaround.
+      // This issue is discussed at http://drupal.org/node/349218.
+      if ($bbox[2] < 0) {
+        $bbox = imagettfbbox($font_size, 0, drupal_realpath($font), $character);
+      }
+    }
+    else {
+      $character_width = imagefontwidth(5);
+      $character_height = imagefontheight(5);
+      $bbox = array(
+        0,
+        $character_height,
+        $character_width,
+        $character_height,
+        $character_width,
+        0,
+        0,
+        0,
+      );
+    }
+
+    // Random (but small) rotation of the character.
+    // TODO: add a setting for this?
+    $angle = mt_rand(-10, 10);
+
+    // Determine print position: at what coordinate should the character be
+    // printed so that the bounding box would be nicely centered in the cage?
+    $bb_center_x = .5 * ($bbox[0] + $bbox[2]);
+    $bb_center_y = .5 * ($bbox[1] + $bbox[7]);
+    $angle_cos = cos($angle * 3.1415 / 180);
+    $angle_sin = sin($angle * 3.1415 / 180);
+    $pos_x = $center_x - ($angle_cos * $bb_center_x + $angle_sin * $bb_center_y);
+    $pos_y = $center_y - (-$angle_sin * $bb_center_x + $angle_cos * $bb_center_y);
+
+    // Calculate available room to jitter: how much can the character be moved
+    // so that it stays inside its cage?
+    $bb_width = $bbox[2] - $bbox[0];
+    $bb_height = $bbox[1] - $bbox[7];
+    $dev_x = .5 * max(0, $ccage_width - abs($angle_cos) * $bb_width - abs($angle_sin) * $bb_height);
+    $dev_y = .5 * max(0, $ccage_height - abs($angle_cos) * $bb_height - abs($angle_sin) * $bb_width);
+
+    // Add jitter to position.
+    $pos_x = $pos_x + mt_rand(-$dev_x, $dev_x);
+    $pos_y = $pos_y + mt_rand(-$dev_y, $dev_y);
+
+    // Calculate text color in case of randomness.
+    if ($foreground_randomness) {
+      $color = imagecolorallocate($image,
+        mt_rand($foreground_color_range[0][0], $foreground_color_range[0][1]),
+        mt_rand($foreground_color_range[1][0], $foreground_color_range[1][1]),
+        mt_rand($foreground_color_range[2][0], $foreground_color_range[2][1])
+      );
+    }
+
+    // Draw character.
+    if ($font == 'BUILTIN') {
+      imagestring($image, 5, $pos_x, $pos_y, $character, $color);
+    }
+    else {
+      imagettftext($image, $font_size, $angle, $pos_x, $pos_y, $color, drupal_realpath($font), $character);
+    }
+
+    // For debugging purposes: draw character bounding box (only valid when rotation is disabled).
+    // imagerectangle($image, $pos_x + $bbox[0], $pos_y + $bbox[1], $pos_x + $bbox[2], $pos_y + $bbox[7], $color);
+  }
+
+  // Return a sign of success.
+  return TRUE;
+}
diff --git a/sites/all/modules/contrib/webform_stripe/LICENSE.txt b/sites/all/modules/contrib/webform_stripe/LICENSE.txt
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.admin.inc b/sites/all/modules/contrib/webform_stripe/webform_stripe.admin.inc
new file mode 100644
index 0000000..9d118b5
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.admin.inc
@@ -0,0 +1,173 @@
+<?php
+
+/**
+ * Settings form.
+ */
+function webform_stripe_settings_form() {
+  // Keys.
+  $form['keys'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Stripe API Keys'),
+    '#description' => t('The API keys from <a href="!url">your Stripe dashboard</a>.', array(
+      '!url' => 'https://dashboard.stripe.com/account/apikeys',
+    )),
+  );
+  $form['keys']['webform_stripe_test_publishable_key'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Test Publishable Key'),
+    '#default_value' => variable_get('webform_stripe_test_publishable_key', ''),
+    '#required' => TRUE,
+  );
+  $form['keys']['webform_stripe_test_secret_key'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Test Secret Key'),
+    '#default_value' => variable_get('webform_stripe_test_secret_key', ''),
+    '#required' => TRUE,
+  );
+  $form['keys']['webform_stripe_live_publishable_key'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Live Publishable Key'),
+    '#default_value' => variable_get('webform_stripe_live_publishable_key', ''),
+    '#required' => TRUE,
+  );
+  $form['keys']['webform_stripe_live_secret_key'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Live Secret Key'),
+    '#default_value' => variable_get('webform_stripe_live_secret_key', ''),
+    '#required' => TRUE,
+  );
+
+  // Image type.
+  $form['image'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Default image'),
+  );
+  $form['image']['webform_stripe_default_image_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Image type'),
+    '#options' => array(
+      'none' => t('No image'),
+      'file' => t('Custom image upload'),
+      'url' => t('Custom image URL'),
+    ),
+    '#default_value' => variable_get('webform_stripe_default_image_type', 'none'),
+    '#required' => TRUE,
+  );
+
+  // Image upload.
+  $form['image']['webform_stripe_default_image_file'] = array(
+    '#type' => 'managed_file',
+    '#title' => t('Image upload'),
+    '#description' => t('Select an png, jpg, or gif image that with a minimum size of 128x128px.'),
+    '#default_value' => variable_get('webform_stripe_default_image_file', ''),
+    '#upload_validators' => array(
+      'file_validate_image_resolution' => array(0, '128x128'),
+      'file_validate_extensions' => array('png jpg gif'),
+    ),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="webform_stripe_default_image_type"]' => array('value' => 'file'),
+      ),
+    ),
+  );
+  if (module_exists('media')) {
+    $form['image']['webform_stripe_default_image_file']['#type'] = 'media';
+  }
+
+  // Image URL.
+  $form['image']['webform_stripe_default_image_url'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Image URL'),
+    '#description' => t('Enter an external URL or an internal path to a square image of your brand or product. It should be a png, jpg, or gif image with a minimum size of 128x128px.'),
+    '#default_value' => variable_get('webform_stripe_default_image_url', ''),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="webform_stripe_default_image_type"]' => array('value' => 'url'),
+      ),
+    ),
+  );
+
+  // Checkout settings.
+  $checkout_settings = webform_stripe_checkout_settings();
+  $form['webform_stripe_checkout_settings'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Checkout settings'),
+    '#tree' => TRUE,
+  );
+  $form['webform_stripe_checkout_settings']['name'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Name'),
+    '#description' => t('The name of your company or website.'),
+    '#default_value' => $checkout_settings['name'],
+  );
+  $form['webform_stripe_checkout_settings']['currency'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Currency'),
+    '#description' => t('The currency of the amount (3-letter <a href="!url">ISO code</a>).', array(
+      '!url' => 'https://support.stripe.com/questions/which-currencies-does-stripe-support',
+    )),
+    '#default_value' => $checkout_settings['currency'],
+    '#required' => TRUE,
+  );
+  $form['webform_stripe_checkout_settings']['locale'] = array(
+    '#type' => 'select',
+    '#title' => t('Locale'),
+    '#description' => t('Specify "auto" to display Checkout in the <a href="!url">user\'s preferred language</a>, if available.', array(
+      '!url' => 'https://support.stripe.com/questions/what-languages-does-stripe-checkout-support',
+    )),
+    '#default_value' => $checkout_settings['locale'],
+    '#options' => array(
+      'auto' => t('auto'),
+      'zh' => t('Chinese'),
+      'nl' => t('Dutch'),
+      'en' => t('English'),
+      'fr' => t('French'),
+      'de' => t('German'),
+      'it' => t('Italian'),
+      'ja' => t('Japanese'),
+      'es' => t('Spanish'),
+    ),
+  );
+  $form['webform_stripe_checkout_settings']['zip-code'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Validate the billing ZIP code'),
+    '#default_value' => $checkout_settings['zip-code'],
+  );
+  $form['webform_stripe_checkout_settings']['billing-address'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Collect billing address'),
+    '#default_value' => $checkout_settings['billing-address'],
+  );
+  $form['webform_stripe_checkout_settings']['shipping-address'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Collect shipping address'),
+    '#description' => t('This information will be available in the Stripe dashboard payment transaction.'),
+    '#default_value' => $checkout_settings['shipping-address'],
+  );
+  $form['webform_stripe_checkout_settings']['allow-remember-me'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Include option to "Remember Me" for future purchases'),
+    '#default_value' => $checkout_settings['allow-remember-me'],
+  );
+  $form['webform_stripe_checkout_settings']['bitcoin'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Accept Bitcoin payments'),
+    '#default_value' => $checkout_settings['bitcoin'],
+  );
+  $form['webform_stripe_checkout_settings']['alipay'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Accept Alipay payments'),
+    '#default_value' => $checkout_settings['alipay'],
+  );
+  $form['webform_stripe_checkout_settings']['alipay-reusable'] = array(
+    '#type' => 'checkbox',
+    '#title' => t("Request reusable access to customer's Alipay account"),
+    '#default_value' => $checkout_settings['alipay-reusable'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="webform_stripe_checkout_settings[alipay]"]' => array('checked' => TRUE),
+      ),
+    ),
+  );
+  return system_settings_form($form);
+}
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.api.php b/sites/all/modules/contrib/webform_stripe/webform_stripe.api.php
new file mode 100644
index 0000000..d1c15f2
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.api.php
@@ -0,0 +1,39 @@
+<?php
+
+/**
+ * Alters Stripe Checkout settings.
+ *
+ * @param $settings
+ *   An array of Stripe Checkout settings.
+ * @param $context
+ *   An array of contextual information with the following keys:
+ *   - node: The Webform node object.
+ *   - component: The Webform component array for the Stripe payment component.
+ *   - data: The array of submitted form values (see "state" for how this is
+ *     keyed).
+ *   - form: The array of submitted form values, keyed by form key.
+ *   - state: One of the following values:
+ *     - WEBFORM_STRIPE_SETTINGS_CHECKOUT: Before opening Stripe Checkout.
+ *       The 'data' array is keyed by component's 'form_key'.
+ *     - WEBFORM_STRIPE_SETTINGS_PROCESS: After user submits Stripe Checkout
+ *       form and before server processes Stripe charge/subscription.
+ *       The 'data' array is keyed by component's 'cid'.
+ */
+function hook_webform_stripe_checkout_settings_alter(&$settings, &$context) {
+  // Change Stripe Checkout title to Webform title.
+  $settings['name'] = $context['node']->title;
+
+  // Change Stripe Checkout currency based on a "Country" component value.
+  if (isset($context['form']['country']) && $context['form']['country'] === 'us') {
+    $settings['currency'] = 'USD';
+  }
+
+  // Dynamically calculate amount with custom logic. Don't forget about the
+  // amount multiplier!
+  $settings['amount'] = ((int) $context['form']['amount'] * (int) $context['form']['qty']) * $context['component']['extra']['amount_value_multiplier'];
+
+  // Do something only at checkout but not when processing Stripe token.
+  if ($context['state'] === WEBFORM_STRIPE_SETTINGS_CHECKOUT) {
+    // Can't think of an example!
+  }
+}
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.drush.inc b/sites/all/modules/contrib/webform_stripe/webform_stripe.drush.inc
new file mode 100644
index 0000000..489d537
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.drush.inc
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * Implements hook_drush_command().
+ */
+function webform_stripe_drush_command() {
+  $items['webform-stripe-download'] = array(
+    'description' => dt('Downloads the Stripe PHP library from https://github.com/stripe/stripe-php.'),
+  );
+  return $items;
+}
+
+/**
+ * Webform Stripe Download command.
+ */
+function drush_webform_stripe_download() {
+  // Require Libraries module.
+  if (!module_exists('libraries')) {
+    drush_log(dt('Webform Stripe requires the Libraries module (https://www.drupal.org/project/libraries) in order to install the Stripe PHP library.'), 'warning');
+    return;
+  }
+
+  // Download with Git.
+  $path = DRUPAL_ROOT . '/sites/all/libraries/stripe-php';
+  if (drush_shell_exec('git clone git://github.com/stripe/stripe-php.git ' . $path)) {
+    drush_log(dt('Stripe PHP library has been cloned via git to @path.', array('@path' => $path)), 'success');
+  }
+  else {
+    drush_log(dt('Drush was unable to clone Stripe PHP library to @path.', array('@path' => $path)), 'warning');
+  }
+}
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.info b/sites/all/modules/contrib/webform_stripe/webform_stripe.info
new file mode 100644
index 0000000..905f968
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.info
@@ -0,0 +1,12 @@
+name = Webform Stripe
+description = Adds Stripe integration with Webforms.
+package = Webform
+core = 7.x
+dependencies[] = libraries
+dependencies[] = webform (>= 4.x)
+
+; Information added by Drupal.org packaging script on 2018-07-16
+version = "7.x-1.14"
+core = "7.x"
+project = "webform_stripe"
+datestamp = "1531770524"
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.install b/sites/all/modules/contrib/webform_stripe/webform_stripe.install
new file mode 100644
index 0000000..e8df9be
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.install
@@ -0,0 +1,291 @@
+<?php
+
+/**
+ * Implements hook_requirements().
+ */
+function webform_stripe_requirements($phase) {
+  $requirements = array();
+
+  if ($phase == 'runtime') {
+    $t = get_t();
+
+    // Check for the Stripe PHP library.
+    $stripe = webform_stripe_load_library();
+    if ($stripe['loaded']) {
+      $requirements['webform_stripe_library'] = array(
+        'title' => $t('Webform Stripe PHP library'),
+        'value' => $t('Installed'),
+        'severity' => REQUIREMENT_OK,
+      );
+    }
+    else {
+      $requirements['webform_stripe_library'] = array(
+        'title' => $t('Webform Stripe PHP library'),
+        'value' => $t('Missing!'),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('Stripe library missing. Download the Stripe library from <a href="!url">!url</a> and place it at %path.', array(
+          '!url' => 'https://github.com/stripe/stripe-php',
+          '%path' => 'sites/all/libraries/stripe-php',
+        )),
+      );
+    }
+
+    // Check for Stripe keys.
+    if (variable_get('webform_stripe_test_secret_key', '') && variable_get('webform_stripe_test_publishable_key', '') && variable_get('webform_stripe_live_secret_key', '') && variable_get('webform_stripe_live_publishable_key', '')) {
+      $requirements['webform_stripe_keys'] = array(
+        'title' => $t('Webform Stripe API keys'),
+        'value' => $t('Configured'),
+        'severity' => REQUIREMENT_OK,
+      );
+    }
+    else {
+      $requirements['webform_stripe_keys'] = array(
+        'title' => $t('Webform Stripe API keys'),
+        'value' => $t('Not configured'),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('Stripe API keys are not configured. <a href="!url">Configure them here</a>.', array(
+          '!url' => url('admin/config/services/webform-stripe'),
+        )),
+      );
+    }
+  }
+
+  return $requirements;
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function webform_stripe_uninstall() {
+  // Delete variables.
+  variable_del('webform_stripe_test_secret_key');
+  variable_del('webform_stripe_test_publishable_key');
+  variable_del('webform_stripe_live_secret_key');
+  variable_del('webform_stripe_live_publishable_key');
+  variable_del('webform_stripe_default_image_type');
+  variable_del('webform_stripe_default_image_file');
+  variable_del('webform_stripe_default_image_url');
+  variable_del('webform_stripe_checkout_settings');
+
+  // Delete Stripe Payment components and their data from webforms.
+  $components = db_query("SELECT nid, cid FROM {webform_component} WHERE type = 'webform_stripe'")->fetchAll();
+  db_query("DELETE FROM {webform_component} WHERE type = 'webform_stripe'");
+  foreach ($components as $component) {
+    db_query("DELETE FROM {webform_submitted_data} WHERE nid = :nid AND cid = :cid", array(
+      ':nid' => $component->nid,
+      ':cid' => $component->cid,
+    ));
+  }
+}
+
+/**
+ * Grant "administer webform stripe" permission to appropriate users.
+ */
+function webform_stripe_update_7000() {
+  $roles = user_roles(TRUE, 'administer site configuration');
+  foreach ($roles as $rid => $role) {
+    user_role_grant_permissions($rid, array('administer webform stripe'));
+  }
+
+  if (!empty($roles)) {
+    return t('"Administer Webform Stripe settings" permission was granted to: @roles.', array(
+      '@roles' => check_plain(implode(', ', $roles)),
+    ));
+  }
+}
+
+/**
+ * Sets amount multiplier to 0 for existing Stripe components.
+ */
+function webform_stripe_update_7001() {
+  $components = db_query("SELECT * FROM {webform_component} WHERE type = 'webform_stripe'")->fetchAll();
+  foreach ($components as $component) {
+    $extra = unserialize($component->extra);
+    $extra['amount_multiplier'] = 0;
+    db_query("UPDATE {webform_component} SET extra = :extra WHERE nid = :nid AND cid = :cid", array(
+      ':extra' => serialize($extra),
+      ':nid' => $component->nid,
+      ':cid' => $component->cid,
+    ));
+  }
+}
+
+/**
+ * Converts API keys to separate live and test keys.
+ */
+function webform_stripe_update_7002() {
+  variable_set('webform_stripe_live_secret_key', variable_get('webform_stripe_secret_key', ''));
+  variable_set('webform_stripe_live_publishable_key', variable_get('webform_stripe_publishable_key', ''));
+  variable_set('webform_stripe_test_secret_key', variable_get('webform_stripe_secret_key', ''));
+  variable_set('webform_stripe_test_publishable_key', variable_get('webform_stripe_publishable_key', ''));
+  variable_del('webform_stripe_secret_key');
+  variable_del('webform_stripe_publishable_key');
+
+  return t('Each webform can now use either test or live API keys, so the existing API keys were converted to live keys. You should <a href="!url">set your test API keys</a>, and then configure each webform to use either test or live keys.', array(
+    '!url' => url('admin/config/services/webform-stripe'),
+  ));
+}
+
+/**
+ * Updates Stripe component settings and how charges are stored.
+ */
+function webform_stripe_update_7003() {
+  $components = db_query("SELECT * FROM {webform_component} WHERE type = 'webform_stripe'")->fetchAll();
+  foreach ($components as $component) {
+    // Convert old settings to new format.
+    $extra = unserialize($component->extra);
+    if (isset($extra['webform_stripe']['amount'])) {
+      $extra['amount_value'] = $extra['webform_stripe']['amount'];
+    }
+    if (isset($extra['webform_stripe']['description'])) {
+      $extra['description_value'] = $extra['webform_stripe']['description'];
+    }
+    if (isset($extra['webform_stripe']['panel-label'])) {
+      $extra['panel_label'] = $extra['webform_stripe']['panel-label'];
+    }
+    if (isset($extra['webform_stripe']['email'])) {
+      $extra['email_type'] = $extra['webform_stripe']['email'];
+    }
+    unset($extra['webform_stripe']);
+    if (isset($extra['amount_type']) && $extra['amount_type'] === 'component') {
+      $extra['amount_type'] = 'value_component';
+    }
+    if (isset($extra['amount_component'])) {
+      $extra['amount_value_component'] = $extra['amount_component'];
+    }
+    if (isset($extra['amount_mapping'])) {
+      $extra['amount_value_mapping'] = $extra['amount_mapping'];
+    }
+    if (isset($extra['amount_multiplier'])) {
+      $extra['amount_value_multiplier'] = $extra['amount_multiplier'];
+    }
+    unset($extra['amount_component'], $extra['amount_mapping'], $extra['amount_multiplier']);
+    if ($extra['description_type'] === 'component') {
+      $extra['description_type'] = 'value_component';
+    }
+    if (isset($extra['description_component'])) {
+      $extra['description_value_component'] = $extra['description_component'];
+    }
+    if (isset($extra['description_mapping'])) {
+      $extra['description_value_mapping'] = $extra['description_mapping'];
+    }
+    unset($extra['description_component'], $extra['description_mapping']);
+    db_query("UPDATE {webform_component} SET extra = :extra WHERE nid = :nid AND cid = :cid", array(
+      ':extra' => serialize($extra),
+      ':nid' => $component->nid,
+      ':cid' => $component->cid,
+    ));
+
+    // Update how charges are stored.
+    $submissions = db_query("SELECT * FROM {webform_submitted_data} WHERE nid = :nid AND cid = :cid", array(
+      ':nid' => $component->nid,
+      ':cid' => $component->cid,
+    ));
+    foreach ($submissions as $submission) {
+      if (substr($submission->data, 0, 3) === 'ch_') {
+        $submission->data = array(
+          'test' => isset($extra['test_mode']) ? $extra['test_mode'] : FALSE,
+          'charge' => $submission->data,
+        );
+        db_query("UPDATE {webform_submitted_data} SET data = :data WHERE nid = :nid AND sid = :sid AND cid = :cid", array(
+          ':data' => serialize($submission->data),
+          ':nid' => $submission->nid,
+          ':sid' => $submission->sid,
+          ':cid' => $submission->cid,
+        ));
+      }
+    }
+  }
+}
+
+/**
+ * Updates default image setting.
+ */
+function webform_stripe_update_7004() {
+  $settings = variable_get('webform_stripe_checkout_settings', array());
+  if (!empty($settings['image'])) {
+    variable_set('webform_stripe_default_image_type', 'url');
+    variable_set('webform_stripe_default_image_url', $settings['image']);
+  }
+  unset($settings['image']);
+  variable_set('webform_stripe_checkout_settings', $settings);
+}
+
+/**
+ * Retrieves amount values from Stripe for existing charges.
+ */
+function webform_stripe_update_7005() {
+  // Find all Stripe Payment submitted data.
+  $submitted_data = db_query("SELECT d.*
+    FROM {webform_component} c
+    INNER JOIN {webform_submitted_data} d ON d.nid = c.nid AND d.cid = c.cid
+    WHERE c.type = 'webform_stripe'")->fetchAll();
+
+  // If a Stripe Payment was found, check for dependencies.
+  if (!empty($submitted_data)) {
+    $library = webform_stripe_load_library();
+    if (!$library['loaded']) {
+      throw new DrupalUpdateException('The Stripe PHP API library is missing.');
+    }
+    if (!variable_get('webform_stripe_test_secret_key', '') || !variable_get('webform_stripe_live_secret_key', '')) {
+      throw new DrupalUpdateException('You need to configure your Stripe API secret keys.');
+    }
+  }
+
+  // For each submission, if it was a charge (not a subscription) and the
+  // amount is not set, then retrieve the amount and currency for that charge
+  // from Stripe.
+  foreach ($submitted_data as $data) {
+    $value = unserialize($data->data);
+    if (!empty($value['charge']) && !isset($value['amount'])) {
+      try {
+        \Stripe\Stripe::setApiKey(!empty($value['test']) ? variable_get('webform_stripe_test_secret_key', '') : variable_get('webform_stripe_live_secret_key', ''));
+        $charge = \Stripe\Charge::retrieve($value['charge']);
+        $value['amount'] = $charge->amount;
+        $value['currency'] = $charge->currency;
+        db_query("UPDATE {webform_submitted_data}
+          SET data = :data
+          WHERE nid = :nid AND sid = :sid AND cid = :cid AND no = :no", array(
+            ':data' => serialize($value),
+            ':nid' => $data->nid,
+            ':sid' => $data->sid,
+            ':cid' => $data->cid,
+            ':no' => $data->no,
+          ));
+      }
+      catch (Exception $e) {
+        // Don't do anything, just prevent the update script from dying.
+      }
+    }
+  }
+}
+
+/**
+ * Updates "submit text" option for webforms with a Stripe Payment component.
+ */
+function webform_stripe_update_7006() {
+  // Get Stripe Payment components and the corresponding Webform's submit text.
+  $components = db_query("SELECT c.*, w.submit_text
+    FROM {webform_component} c
+    INNER JOIN {webform} w ON w.nid = c.nid
+    WHERE c.type = 'webform_stripe'")->fetchAll();
+  foreach ($components as $component) {
+    $extra = unserialize($component->extra);
+
+    // If old Pay Text setting was set, update Webform submit text.
+    if (!empty($extra['pay_text'])) {
+      db_query("UPDATE {webform} SET submit_text = :submit_text WHERE nid = :nid", array(
+        ':submit_text' => $extra['pay_text'],
+        ':nid' => $component->nid,
+      ));
+    }
+
+    // Remove old settings.
+    unset($extra['continue_text'], $extra['pay_text'], $extra['cancel_text']);
+    db_query("UPDATE {webform_component} SET extra = :extra WHERE nid = :nid AND cid = :cid", array(
+      ':extra' => serialize($extra),
+      ':nid' => $component->nid,
+      ':cid' => $component->cid,
+    ));
+  }
+}
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.js b/sites/all/modules/contrib/webform_stripe/webform_stripe.js
new file mode 100644
index 0000000..80db165
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.js
@@ -0,0 +1,55 @@
+(function($) {
+
+  /**
+   * Overrides Ajax beforeSubmit callback to make request synchronous, which
+   * preserves the click event after the ajax response is received. This
+   * prevents popup blockers from "breaking" our checkout experience.
+   * @see https://www.drupal.org/node/2661330
+   * @see https://www.drupal.org/node/2782783
+   */
+  var beforeSubmit = Drupal.ajax.prototype.beforeSubmit;
+  Drupal.ajax.prototype.beforeSubmit = function(form_values, element, options) {
+    if (element.hasClass('webform-stripe-form')) {
+      options.async = false;
+    }
+    beforeSubmit();
+  };
+
+  /**
+   * Ajax command to open Stripe Checkout, store token and email in hidden
+   * token field, and submit form.
+   */
+  Drupal.ajax.prototype.commands.webformStripeCheckout = function(ajax, data, status) {
+    StripeCheckout.open($.extend(data.params, {
+      token: function(token) {
+        $('.webform-stripe-token', ajax.form.context).val(token.id + ':' + token.email);
+        ajax.form[0].submit();
+      }
+    }));
+  };
+
+  /**
+   * Scrolls to top of Webform with Stripe payment.
+   */
+  Drupal.ajax.prototype.commands.webformStripeScroll = function(ajax, response, status) {
+    // Determine what to scroll to, either our wrapper div, or a block, or a
+    // Panels pane.
+    var $el = $(response.selector).closest('.block.block-webform');
+    if (!$el.length) {
+      $el = $(response.selector).closest('.panel-pane.pane-block[class*="pane-webform-client-block-"]');
+      if (!$el.length) {
+        $el = $(response.selector);
+      }
+    }
+
+    // Get element top, and offset it if Adminimal Menu is in use.
+    var top = $el.offset().top;
+    if ($('body').hasClass('adminimal-menu')) {
+      top -= 29;
+    }
+
+    // Scroll!
+    $('html, body').animate({scrollTop: top}, 500);
+  };
+
+}(jQuery));
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.module b/sites/all/modules/contrib/webform_stripe/webform_stripe.module
new file mode 100644
index 0000000..f9aa1c9
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.module
@@ -0,0 +1,208 @@
+<?php
+
+/**
+ * Default button texts.
+ */
+define('WEBFORM_STRIPE_PAY_TEXT', t('Pay with Credit Card'));
+
+/**
+ * States for hook_webform_stripe_checkout_settings_alter().
+ */
+define('WEBFORM_STRIPE_SETTINGS_CHECKOUT', 'checkout');
+define('WEBFORM_STRIPE_SETTINGS_PROCESS', 'process');
+
+/**
+ * Implements hook_permission().
+ */
+function webform_stripe_permission() {
+  return array(
+    'administer webform stripe' => array(
+      'title' => t('Administer Webform Stripe settings'),
+      'description' => t('Grants access to change global Stripe Checkout credentials and settings.'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function webform_stripe_menu() {
+  $items['admin/config/services/webform-stripe'] = array(
+    'title' => 'Webform Stripe',
+    'description' => 'Configure Stripe API for Webform.',
+    'access arguments' => array('administer webform stripe'),
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('webform_stripe_settings_form'),
+    'file' => 'webform_stripe.admin.inc',
+  );
+  return $items;
+}
+
+/**
+ * Implements hook_webform_component_info().
+ */
+function webform_stripe_webform_component_info() {
+  $components['webform_stripe'] = array(
+    'label' => t('Stripe payment'),
+    'description' => t('Displays a payment button which opens the Stripe Checkout form.'),
+    'features' => array(
+      'analysis' => FALSE,
+      'conditional' => FALSE,
+      'default_value' => FALSE,
+      'email' => FALSE,
+      'description' => FALSE,
+      'required' => FALSE,
+      'private' => FALSE,
+      'title_display' => FALSE,
+      'css_classes' => FALSE,
+    ),
+    'file' => 'webform_stripe.webform.inc',
+  );
+  return $components;
+}
+
+/**
+ * Implements hook_libraries_info().
+ */
+function webform_stripe_libraries_info() {
+  return array(
+    'stripe-php' => array(
+      'name' => 'Stripe API Client Library for PHP',
+      'vendor url' => 'https://stripe.com',
+      'download url' => 'https://github.com/stripe/stripe-php',
+      'version arguments' => array(
+        'file' => 'VERSION',
+        'pattern' => '/(\d+\.\d+\.\d+)/',
+      ),
+      'files' => array(
+        'php' => array(
+          'init.php',
+        ),
+      ),
+    ),
+  );
+}
+
+/**
+ * Loads Stripe PHP library.
+ */
+function webform_stripe_load_library() {
+  $libraries = libraries_get_libraries();
+
+  // If library exists at 'stripe' and is defined by another module (such as
+  // Ubercart Stripe), use it to avoid conflicts with loading multiple Stripe
+  // PHP libraries.
+  if (isset($libraries['stripe'])) {
+    $library = libraries_load('stripe');
+    if ($library['loaded']) {
+      return $library;
+    }
+  }
+
+  return libraries_load('stripe-php');
+}
+
+/**
+ * Implements hook_image_default_styles().
+ */
+function webform_stripe_image_default_styles() {
+  $styles['webform_stripe'] = array(
+    'label' => 'Webform Stripe',
+    'effects' => array(
+      array(
+        'name' => 'image_scale_and_crop',
+        'data' => array(
+          'width' => 128,
+          'height' => 128,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+  return $styles;
+}
+
+/**
+ * Returns Stripe Checkout settings.
+ */
+function webform_stripe_checkout_settings() {
+  // Merge variable settings with default settings.
+  return variable_get('webform_stripe_checkout_settings', array()) + array(
+    'name' => variable_get('site_name', 'Drupal'),
+    'image' => '',
+    'currency' => 'USD',
+    'locale' => 'auto',
+    'zip-code' => FALSE,
+    'billing-address' => FALSE,
+    'shipping-address' => FALSE,
+    'allow-remember-me' => FALSE,
+    'bitcoin' => FALSE,
+    'alipay' => FALSE,
+    'alipay-reusable' => FALSE,
+  );
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for "webform_component_edit_form".
+ */
+function webform_stripe_form_webform_component_edit_form_alter(&$form, &$form_state) {
+  form_load_include($form_state, 'inc', 'webform_stripe', 'webform_stripe.webform');
+  _webform_stripe_form_webform_component_edit_form_alter($form, $form_state);
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for "webform_configure_form".
+ */
+function webform_stripe_form_webform_configure_form_alter(&$form, &$form_state) {
+  form_load_include($form_state, 'inc', 'webform_stripe', 'webform_stripe.webform');
+  _webform_stripe_form_webform_configure_form_alter($form, $form_state);
+}
+
+/**
+ * Implements hook_form_BASE_FORM_ID_alter() for "webform_client_form".
+ */
+function webform_stripe_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
+  form_load_include($form_state, 'inc', 'webform_stripe', 'webform_stripe.webform');
+  _webform_stripe_form_webform_client_form_alter($form, $form_state);
+}
+
+/**
+ * Attempts to format a Stripe charge amount in a format that makes sense for
+ * the currency. There's probably a better way to manage this, and it would be
+ * even better if the Stripe PHP API offered a way to do this.
+ *
+ * @see https://github.com/stripe/stripe-php/issues/286
+ * @see https://support.stripe.com/questions/which-currencies-does-stripe-support
+ */
+function webform_stripe_format_amount($amount, $currency) {
+  $currency = strtoupper($currency);
+
+  switch ($currency) {
+    // US dollar.
+    case 'USD':
+      return '$' . number_format($amount / 100, 2) . ' ' . $currency;
+
+    // Zero-decimal currencies.
+    // https://support.stripe.com/questions/which-zero-decimal-currencies-does-stripe-support
+    case 'BIF':
+    case 'CLP':
+    case 'DJF':
+    case 'GNF':
+    case 'JPY':
+    case 'KMF':
+    case 'KRW':
+    case 'MGA':
+    case 'PYG':
+    case 'RWF':
+    case 'VND':
+    case 'VUV':
+    case 'XAF':
+    case 'XOF':
+    case 'XPF':
+      return $amount . ' ' . $currency;
+
+    // Other currencies which use decimals. This needs work.
+    default:
+      return number_format($amount / 100, 2) . ' ' . $currency;
+  }
+}
diff --git a/sites/all/modules/contrib/webform_stripe/webform_stripe.webform.inc b/sites/all/modules/contrib/webform_stripe/webform_stripe.webform.inc
new file mode 100644
index 0000000..045e1b3
--- /dev/null
+++ b/sites/all/modules/contrib/webform_stripe/webform_stripe.webform.inc
@@ -0,0 +1,1355 @@
+<?php
+
+/**
+ * Implements _webform_defaults_component().
+ */
+function _webform_defaults_webform_stripe() {
+  return array(
+    'name' => '',
+    'form_key' => NULL,
+    'pid' => 0,
+    'weight' => 0,
+    'value' => '',
+    'required' => 0,
+    'extra' => array(
+      'test_mode' => FALSE,
+      'amount_type' => 'value',
+      'amount_value' => '',
+      'amount_value_component' => '',
+      'amount_value_mapping' => array(),
+      'amount_value_multiplier' => 100,
+      'amount_plan' => '',
+      'amount_plan_component' => '',
+      'amount_plan_mapping' => array(),
+      'amount_plan_qty_type' => 'value',
+      'amount_plan_qty_value' => 1,
+      'amount_plan_qty_component' => '',
+      'amount_plan_qty_mapping' => array(),
+      'description_type' => 'value',
+      'description_value' => '',
+      'description_value_component' => '',
+      'description_value_mapping' => array(),
+      'panel_label' => t('Pay {{amount}}'),
+      'email_type' => 'user',
+      'email_component' => '',
+      'image_type' => 'default',
+      'image_file' => '',
+      'image_url' => '',
+    ),
+  );
+}
+
+/**
+ * Gets Stripe plans.
+ *
+ * @param bool $test_mode
+ *   TRUE to get test plans, FALSE to get live plans.
+ *
+ * @return array
+ *   An array of Stripe subscription plans.
+ */
+function _webform_stripe_get_plans($test_mode) {
+  $plans = &drupal_static('webform_stripe_plans');
+
+  if (!isset($plans)) {
+    $plans = array();
+    $secret_key = $test_mode ? variable_get('webform_stripe_test_secret_key', '') : variable_get('webform_stripe_live_secret_key', '');
+
+    // Load list of Stripe plans.
+    if (($library = webform_stripe_load_library()) && $library['loaded'] && !empty($secret_key)) {
+      \Stripe\Stripe::setApiKey($secret_key);
+      try {
+        foreach (\Stripe\Plan::all()->data as $plan) {
+          $plans[$plan->id] = array(
+            'id' => $plan->id,
+            // As of 2/5/2018, 'name' was replaced with 'nickname'.
+            // https://stripe.com/docs/upgrades#2018-02-05
+            // https://stripe.com/docs/billing/migrating#new-plan-fields
+            'nickname' => isset($plan->nickname) ? $plan->nickname : (
+              isset($plan->name) ? $plan->name : ''
+            ),
+            'amount' => $plan->amount,
+          );
+        }
+      }
+      catch(\Stripe\Error\Base $e) {
+
+      }
+    }
+  }
+
+  return $plans;
+}
+
+/**
+ * Implements _webform_edit_component().
+ */
+function _webform_edit_webform_stripe($component) {
+  // Show notification if keys aren't configured.
+  if (!variable_get('webform_stripe_test_secret_key', '') || !variable_get('webform_stripe_test_publishable_key', '') || !variable_get('webform_stripe_live_secret_key', '') || !variable_get('webform_stripe_live_publishable_key', '')) {
+    drupal_set_message(t('You need to <a href="!url">configure your Stripe API keys</a>.', array(
+      '!url' => url('admin/config/services/webform-stripe'),
+    )), 'warning');
+  }
+
+  $node = node_load($component['nid']);
+
+  // Prevent multiple Stripe payment components per webform.
+  if (empty($component['cid'])) {
+    foreach ($node->webform['components'] as $other_component) {
+      if ($other_component['type'] === 'webform_stripe') {
+        drupal_set_message(t('Only one Stripe payment component is allowed.'), 'error');
+        drupal_goto("node/$node->nid/webform/components");
+      }
+    }
+  }
+
+  // Test mode.
+  $form['test_mode'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Test mode'),
+    '#description' => t('When enabled, the test API keys are used and the payment will not actually be charged. You can use <a href="!url">these test credit cards</a>.', array(
+      '!url' => url('https://stripe.com/docs/testing#cards'),
+    )),
+    '#default_value' => $component['extra']['test_mode'],
+    '#parents' => array('extra', 'test_mode'),
+  );
+
+  // Amount type.
+  $form['amount'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Amount'),
+    '#collapsible' => TRUE,
+    '#prefix' => '<div id="webform-stripe-amount">',
+    '#suffix' => '</div>',
+    '#tree' => TRUE,
+    '#parents' => array('extra'),
+  );
+  $form['amount']['amount_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Amount'),
+    '#description' => t('Choose "amount" for a one-time charge, or "subscription" for a recurring charge. Choose "fixed" to manually set the amount or subscription plan, or "dynamic" to determine it from another component on this form.'),
+    '#options' => array(
+      'value' => t('Fixed amount'),
+      'value_component' => t('Dynamic amount'),
+      'plan' => t('Fixed subscription'),
+      'plan_component' => t('Dynamic subscription'),
+    ),
+    '#default_value' => $component['extra']['amount_type'],
+    '#required' => TRUE,
+  );
+
+  // Fixed amount.
+  $form['amount']['amount_value'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Fixed amount'),
+    '#description' => t('The amount that will be charged. Stripe expects this value in cents, but you can enter a whole value here which will be multiplied by the multiplier below.'),
+    '#default_value' => $component['extra']['amount_value'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array('value' => 'value'),
+      ),
+    ),
+  );
+
+  // Dynamic amount, which can be determined by a textfield, number, or select
+  // component.
+  $amount_components = array();
+  foreach ($node->webform['components'] as $other_component) {
+    if (in_array($other_component['type'], array('textfield', 'number', 'select'))) {
+      if ($other_component['type'] === 'select' && $other_component['extra']['multiple']) {
+        continue;
+      }
+      $amount_components[$other_component['cid']] = $other_component['name'];
+    }
+  }
+  $form['amount']['amount_value_component'] = array(
+    '#type' => 'select',
+    '#title' => t('Dynamic amount'),
+    '#description' => t("Sets the component which will determine the amount charged. Eligible components include: Textfield, Number, Select options (not multiple)."),
+    '#options' => $amount_components,
+    '#empty_option' => '- ' . t('Select a component') . ' -',
+    '#default_value' => $component['extra']['amount_value_component'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array('value' => 'value_component'),
+      ),
+    ),
+  );
+
+  // Map select components to fixed amounts. The ajax handler is added in
+  // webform_stripe_form_webform_component_edit_form_alter().
+  $form['amount']['amount_value_mapping'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Amount options'),
+    '#description' => t('The selected amount component has multiple options. Enter an amount for each choice.'),
+    '#tree' => TRUE,
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array('value' => 'value_component'),
+      ),
+    ),
+  );
+
+  // Amount multiplier.
+  $form['amount']['amount_value_multiplier'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Amount multiplier'),
+    '#description' => t("Optionally multiply the amount by this value. This is useful if you don't want to deal with cents here, or require your users to enter values in cents on the form."),
+    '#default_value' => $component['extra']['amount_value_multiplier'],
+    '#size' => 10,
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array(
+          array('value' => 'value'),
+          array('value' => 'value_component')
+        ),
+      ),
+    ),
+  );
+
+  // Fixed plan.
+  $form['amount']['amount_plan'] = array(
+    '#type' => 'select',
+    '#title' => t('Subscription plan'),
+    '#description' => t('The Stripe subscription plan to which the user will be subscribed.'),
+    '#options' => array(),
+    '#empty_option' => '- ' . t('Select a plan') . ' -',
+    '#default_value' => $component['extra']['amount_plan'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array('value' => 'plan'),
+      ),
+    ),
+  );
+
+  // Dynamic plan, which can be determined by a select component.
+  $plan_components = array();
+  foreach ($node->webform['components'] as $other_component) {
+    if ($other_component['type'] === 'select' && !$other_component['extra']['multiple']) {
+      $plan_components[$other_component['cid']] = $other_component['name'];
+    }
+  }
+  $form['amount']['amount_plan_component'] = array(
+    '#type' => 'select',
+    '#title' => t('Dynamic subscription plan'),
+    '#description' => t("Sets the component which will determine the subscription plan. Eligible components include: Select options (not multiple)."),
+    '#options' => $plan_components,
+    '#empty_option' => '- ' . t('Select a component') . ' -',
+    '#default_value' => $component['extra']['amount_plan_component'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array('value' => 'plan_component'),
+      ),
+    ),
+  );
+
+  // Map select components to fixed plans. The ajax handler is added in
+  // webform_stripe_form_webform_component_edit_form_alter().
+  $form['amount']['amount_plan_mapping'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Plan options'),
+    '#description' => t('Select the subscription plan for each option.'),
+    '#tree' => TRUE,
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array('value' => 'plan_component'),
+      ),
+    ),
+  );
+
+  // Plan quantity.
+  $form['amount']['amount_plan_qty_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Subscription quantity'),
+    '#description' => t('The quantity of the subscription plan to which the customer should be subscribed.'),
+    '#options' => array(
+      'value' => t('Fixed quantity'),
+      'component' => t('Dynamic quantity'),
+    ),
+    '#default_value' => $component['extra']['amount_plan_qty_type'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array(
+          array('value' => 'plan'),
+          array('value' => 'plan_component')
+        ),
+      ),
+    ),
+  );
+
+  // Fixed plan quantity.
+  $form['amount']['amount_plan_qty_value'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Fixed subscription quantity'),
+    '#description' => t('The fixed quantity of the subscription plan to which the customer should be subscribed.'),
+    '#default_value' => $component['extra']['amount_plan_qty_value'],
+    '#size' => 10,
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array(
+          array('value' => 'plan'),
+          array('value' => 'plan_component')
+        ),
+        ':input[name="extra[amount_plan_qty_type]"]' => array('value' => 'value'),
+      ),
+    ),
+  );
+
+  // Dynamic plan quantity, which can be determined by a textfield, number, or
+  // select component.
+  $plan_qty_components = array();
+  foreach ($node->webform['components'] as $other_component) {
+    if (in_array($other_component['type'], array('textfield', 'number', 'select'))) {
+      if ($other_component['type'] === 'select' && $other_component['extra']['multiple']) {
+        continue;
+      }
+      $plan_qty_components[$other_component['cid']] = $other_component['name'];
+    }
+  }
+  $form['amount']['amount_plan_qty_component'] = array(
+    '#type' => 'select',
+    '#title' => t('Dynamic subscription quantity'),
+    '#description' => t("Sets the component which will determine the subscription quantity. Eligible components include: Textfield, Number, Select options (not multiple)."),
+    '#options' => $plan_qty_components,
+    '#empty_option' => '- ' . t('Select a component') . ' -',
+    '#default_value' => $component['extra']['amount_plan_qty_component'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[amount_type]"]' => array(
+          array('value' => 'plan'),
+          array('value' => 'plan_component')
+        ),
+        ':input[name="extra[amount_plan_qty_type]"]' => array('value' => 'component'),
+      ),
+    ),
+  );
+
+  // Map select components to fixed plan quantities. The ajax handler is added
+  // in webform_stripe_form_webform_component_edit_form_alter().
+  $form['amount']['amount_plan_qty_mapping'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Subscription quantity options'),
+    '#description' => t('Select the subscription quantity for each option.'),
+    '#tree' => TRUE,
+    '#states' => array(
+      'visible' => array(
+        'visible' => array(
+          ':input[name="extra[amount_type]"]' => array(
+            array('value' => 'plan'),
+            array('value' => 'plan_component')
+          ),
+          ':input[name="extra[amount_plan_qty_type]"]' => array('value' => 'component'),
+        ),
+      ),
+    ),
+  );
+
+  // Description type.
+  $form['description'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Description'),
+    '#collapsible' => TRUE,
+    '#prefix' => '<div id="webform-stripe-description">',
+    '#suffix' => '</div>',
+    '#tree' => TRUE,
+    '#parents' => array('extra'),
+  );
+  $form['description']['description_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Description'),
+    '#description' => t('Choose "fixed" to manually set the description, "dynamic" to determine it from another component on this form, or "subscription plan" to use the description of the selected plan.'),
+    '#options' => array(
+      'value' => t('Fixed description'),
+      'value_component' => t('Dynamic description'),
+      'plan' => t('Subscription plan description'),
+    ),
+    '#default_value' => $component['extra']['description_type'],
+    '#required' => TRUE,
+  );
+
+  // Fixed description.
+  $form['description']['description_value'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Fixed description'),
+    '#description' => t('A description of the product or service being purchased.'),
+    '#default_value' => $component['extra']['description_value'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[description_type]"]' => array('value' => 'value'),
+      ),
+    ),
+  );
+
+  // Dynamic description, which can be determined by a textfield or select
+  // component.
+  $description_components = array();
+  foreach ($node->webform['components'] as $other_component) {
+    if (in_array($other_component['type'], array('textfield', 'select'))) {
+      if ($other_component['type'] === 'select' && $other_component['extra']['multiple']) {
+        continue;
+      }
+      $description_components[$other_component['cid']] = $other_component['name'];
+    }
+  }
+  $form['description']['description_value_component'] = array(
+    '#type' => 'select',
+    '#title' => t('Dynamic description'),
+    '#description' => t("Sets the component which will determine the description. Eligible components include: Textfield, Select options (not multiple)."),
+    '#options' => $description_components,
+    '#empty_option' => '- ' . t('Select a component') . ' -',
+    '#default_value' => $component['extra']['description_value_component'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[description_type]"]' => array('value' => 'value_component'),
+      ),
+    ),
+  );
+
+  // Map select components to fixed descriptions. The ajax handler is added in
+  // webform_stripe_form_webform_component_edit_form_alter().
+  $form['description']['description_value_mapping'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Description options'),
+    '#description' => t('The selected description component has multiple options. Enter a description for each choice. If left blank, the selected option will be used as the description.'),
+    '#tree' => TRUE,
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[description_type]"]' => array('value' => 'value_component'),
+      ),
+    ),
+  );
+
+  // Email type.
+  $form['email'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Email'),
+    '#collapsible' => TRUE,
+    '#tree' => TRUE,
+    '#parents' => array('extra'),
+  );
+  $form['email']['email_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Email address'),
+    '#options' => array(
+      'user' => t('Use email address of logged-in user'),
+      'component' => t('Dynamic email address'),
+      'checkout' => t('Collect email address in Stripe Checkout form'),
+    ),
+    '#default_value' => $component['extra']['email_type'],
+    '#required' => TRUE,
+  );
+
+  // Dynamic email, which can be determined by an email component.
+  $email_components = array();
+  foreach ($node->webform['components'] as $other_component) {
+    if (in_array($other_component['type'], array('email'))) {
+      $email_components[$other_component['cid']] = $other_component['name'];
+    }
+  }
+  $form['email']['email_component'] = array(
+    '#type' => 'select',
+    '#title' => t('Dynamic email address'),
+    '#description' => t("Sets the component which will determine the email address. Eligible components include: Email."),
+    '#options' => $email_components,
+    '#empty_option' => '- ' . t('Select a component') . ' -',
+    '#default_value' => $component['extra']['email_component'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[email_type]"]' => array('value' => 'component'),
+      ),
+    ),
+  );
+
+  // Image type.
+  $form['image'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Image'),
+    '#collapsible' => TRUE,
+    '#tree' => TRUE,
+    '#parents' => array('extra'),
+  );
+  $form['image']['image_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Image'),
+    '#options' => array(
+      'default' => t('Default image'),
+      'file' => t('Custom image upload'),
+      'url' => t('Custom image URL'),
+      'none' => t('No image'),
+    ),
+    '#default_value' => $component['extra']['image_type'],
+    '#required' => TRUE,
+  );
+
+  // Image upload.
+  $form['image']['image_file'] = array(
+    '#type' => 'managed_file',
+    '#title' => t('Image upload'),
+    '#description' => t('Select an png, jpg, or gif image that with a minimum size of 128x128px.'),
+    '#default_value' => $component['extra']['image_file'],
+    '#upload_validators' => array(
+      'file_validate_image_resolution' => array(0, '128x128'),
+      'file_validate_extensions' => array('png jpg gif'),
+    ),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[image_type]"]' => array('value' => 'file'),
+      ),
+    ),
+  );
+  if (module_exists('media')) {
+    $form['image']['image_file']['#type'] = 'media';
+  }
+
+  // Image URL.
+  $form['image']['image_url'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Image URL'),
+    '#description' => t('Enter an external URL or an internal path to a square image of your brand or product. It should be a png, jpg, or gif image with a minimum size of 128x128px.'),
+    '#default_value' => $component['extra']['image_url'],
+    '#states' => array(
+      'visible' => array(
+        ':input[name="extra[image_type]"]' => array('value' => 'url'),
+      ),
+    ),
+  );
+
+  // Panel label.
+  $form['display']['panel_label'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Payment button label'),
+    '#description' => t('The label of the payment button in the Stripe Checkout payment form (e.g. "Pay {{amount}}", "Subscribe", etc.). If you include {{amount}}, it will be replaced by the provided amount. Otherwise, the amount will be appended to the end of your label. You can change the form submit button text on the <a href="!url">form settings page</a>, under Advanced settings.', array(
+      '!url' => url("node/$node->nid/webform/configure", array(
+        'fragment' => 'edit-submit-text',
+      )),
+    )),
+    '#default_value' => $component['extra']['panel_label'],
+    '#parents' => array('extra', 'panel_label'),
+  );
+
+  $form['#validate'][] = '_webform_edit_webform_stripe_validate';
+  return $form;
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for "webform_component_edit_form".
+ */
+function _webform_stripe_form_webform_component_edit_form_alter(&$form, &$form_state) {
+  // Alter the Stripe payment component edit form, since Webform doesn't pass
+  // the form state to _webform_edit_webform_stripe().
+  if ($form['type']['#value'] === 'webform_stripe') {
+    $component = $form_state['build_info']['args'][1];
+    webform_component_include('select');
+
+    // Add ajax handler to amount component field.
+    $form['amount']['amount_value_component']['#ajax'] = array(
+      'callback' => '_webform_edit_webform_stripe_amount_ajax_callback',
+      'wrapper' => 'webform-stripe-amount',
+    );
+
+    // Get the selected amount component. If it's a select field, add its
+    // options to the mapping container and display the fieldset. Otherwise,
+    // hide the mapping fieldset by converting it to a container.
+    $form['amount']['amount_value_mapping']['#type'] = 'container';
+    $cid = isset($form_state['values']['extra']['amount_value_component']) ? $form_state['values']['extra']['amount_value_component'] : $component['extra']['amount_value_component'];
+    if (!empty($cid) && isset($form['#node']->webform['components'][$cid])) {
+      $dynamic_component = $form['#node']->webform['components'][$cid];
+      if ($dynamic_component['type'] === 'select') {
+        $form['amount']['amount_value_mapping']['#type'] = 'fieldset';
+        $options = _webform_select_options($dynamic_component);
+        foreach ($options as $key => $value) {
+          $form['amount']['amount_value_mapping'][$key] = array(
+            '#type' => 'textfield',
+            '#field_suffix' => check_plain($value),
+            '#size' => 10,
+            '#default_value' => isset($component['extra']['amount_value_mapping'][$key]) ? $component['extra']['amount_value_mapping'][$key] : $key,
+          );
+        }
+      }
+    }
+
+    // Add test mode ajax callback.
+    $form['test_mode']['#ajax'] = array(
+      'callback' => '_webform_edit_webform_stripe_amount_ajax_callback',
+      'wrapper' => 'webform-stripe-amount',
+    );
+
+    // Determine if using test mode, and craft a message with an appropriate
+    // link to the Stripe dashboard.
+    $test_mode = isset($form_state['values']['extra']['test_mode']) ? $form_state['values']['extra']['test_mode'] : $component['extra']['test_mode'];
+    $plan_message = t('You can <a href="!url">manage your !option subscription plans here</a>.', array(
+      '!option' => $test_mode ? t('test') : t('live'),
+      '!url' => $test_mode ? 'https://dashboard.stripe.com/test/plans' : 'https://dashboard.stripe.com/plans',
+    ));
+
+    // Set plan options and update description.
+    $plan_options = array();
+    foreach (_webform_stripe_get_plans($test_mode) as $plan) {
+      $plan_options[$plan['id']] = format_string('@nickname (@id)', array(
+        '@nickname' => $plan['nickname'],
+        '@id' => $plan['id'],
+      ));
+    }
+    $form['amount']['amount_plan']['#options'] = $plan_options;
+    $form['amount']['amount_plan']['#description'] .= ' ' . $plan_message;
+
+    // Add ajax handler to plan component field.
+    $form['amount']['amount_plan_component']['#ajax'] = array(
+      'callback' => '_webform_edit_webform_stripe_amount_ajax_callback',
+      'wrapper' => 'webform-stripe-amount',
+    );
+
+    // Get the selected plan component and add its options to the mapping
+    // fieldset. Otherwise, hide the mapping fieldset by converting it to a
+    // container.
+    $form['amount']['amount_plan_mapping']['#type'] = 'container';
+    $cid = isset($form_state['values']['extra']['amount_plan_component']) ? $form_state['values']['extra']['amount_plan_component'] : $component['extra']['amount_plan_component'];
+    if (!empty($cid) && isset($form['#node']->webform['components'][$cid])) {
+      $form['amount']['amount_plan_mapping']['#type'] = 'fieldset';
+      $form['amount']['amount_plan_mapping']['#description'] .= ' ' . $plan_message;
+      $options = _webform_select_options($form['#node']->webform['components'][$cid]);
+      foreach ($options as $key => $value) {
+        $form['amount']['amount_plan_mapping'][$key] = array(
+          '#type' => 'select',
+          '#options' => $plan_options,
+          '#empty_option' => '- ' . t('Select a plan') . ' -',
+          '#field_suffix' => check_plain($value),
+          '#default_value' => isset($component['extra']['amount_plan_mapping'][$key]) ? $component['extra']['amount_plan_mapping'][$key] : '',
+        );
+      }
+    }
+
+    // Add ajax handler to plan quantity component field.
+    $form['amount']['amount_plan_qty_component']['#ajax'] = array(
+      'callback' => '_webform_edit_webform_stripe_amount_ajax_callback',
+      'wrapper' => 'webform-stripe-amount',
+    );
+
+    // Get the selected plan quantity component and add its options to the
+    // mapping fieldset. Otherwise, hide the mapping fieldset by converting it
+    // to a container.
+    $form['amount']['amount_plan_qty_mapping']['#type'] = 'container';
+    $cid = isset($form_state['values']['extra']['amount_plan_qty_component']) ? $form_state['values']['extra']['amount_plan_qty_component'] : $component['extra']['amount_plan_qty_component'];
+    if (!empty($cid) && isset($form['#node']->webform['components'][$cid])) {
+      $dynamic_component = $form['#node']->webform['components'][$cid];
+      if ($dynamic_component['type'] === 'select') {
+        $form['amount']['amount_plan_qty_mapping']['#type'] = 'fieldset';
+        $options = _webform_select_options($form['#node']->webform['components'][$cid]);
+        foreach ($options as $key => $value) {
+          $form['amount']['amount_plan_qty_mapping'][$key] = array(
+            '#type' => 'textfield',
+            '#field_suffix' => check_plain($value),
+            '#size' => 10,
+            '#default_value' => isset($component['extra']['amount_plan_qty_mapping'][$key]) ? $component['extra']['amount_plan_qty_mapping'][$key] : $key,
+          );
+        }
+      }
+    }
+
+    // Add ajax handler to description component field.
+    $form['description']['description_value_component']['#ajax'] = array(
+      'callback' => '_webform_edit_webform_stripe_description_ajax_callback',
+      'wrapper' => 'webform-stripe-description',
+    );
+
+    // Get the selected description component. If it's a select field, add its
+    // options to the mapping container and display the fieldset. Otherwise,
+    // hide the mapping fieldset by converting it to a container.
+    $form['description']['description_value_mapping']['#type'] = 'container';
+    $cid = isset($form_state['values']['extra']['description_value_component']) ? $form_state['values']['extra']['description_value_component'] : $component['extra']['description_value_component'];
+    if (!empty($cid) && isset($form['#node']->webform['components'][$cid])) {
+      $dynamic_component = $form['#node']->webform['components'][$cid];
+      if ($dynamic_component['type'] === 'select') {
+        $form['description']['description_value_mapping']['#type'] = 'fieldset';
+        $options = _webform_select_options($dynamic_component);
+        foreach ($options as $key => $value) {
+          $form['description']['description_value_mapping'][$key] = array(
+            '#type' => 'textfield',
+            '#field_suffix' => check_plain($value),
+            '#size' => 40,
+            '#default_value' => isset($component['extra']['description_value_mapping'][$key]) ? $component['extra']['description_value_mapping'][$key] : $value,
+          );
+        }
+      }
+    }
+  }
+
+  // When editing a Select component that's being used as the dynamic amount or
+  // description component, show a reminder message.
+  if ($form['type']['#value'] === 'select' && !empty($form_state['build_info']['args'][1]['cid'])) {
+    foreach ($form['#node']->webform['components'] as $cid => $component) {
+      if ($component['type'] === 'webform_stripe') {
+        foreach (array('amount', 'description') as $setting) {
+          foreach (array('value', 'plan') as $type) {
+            if (
+              $component['extra']["{$setting}_type"] === "{$type}_component"
+              && isset($component['extra']["{$setting}_{$type}_component"])
+              && $component['extra']["{$setting}_{$type}_component"] === $form_state['build_info']['args'][1]['cid']
+            ) {
+              drupal_set_message(t('The Stripe payment component is using this field to populate the %setting. If you add options to this field, be sure to also update the Stripe payment options.', array(
+                '%setting' => $setting,
+              )), 'warning');
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Amount ajax callback.
+ */
+function _webform_edit_webform_stripe_amount_ajax_callback($form, $form_state) {
+  return $form['amount'];
+}
+
+/**
+ * Description ajax callback.
+ */
+function _webform_edit_webform_stripe_description_ajax_callback($form, $form_state) {
+  return $form['description'];
+}
+
+/**
+ * Edit validate callback.
+ */
+function _webform_edit_webform_stripe_validate($form, &$form_state) {
+  // Fixed amount.
+  if ($form_state['values']['extra']['amount_type'] === 'value') {
+    // Ensure positive amount.
+    if (empty($form_state['values']['extra']['amount_value']) || $form_state['values']['extra']['amount_value'] <= 0) {
+      form_set_error('extra][amount_value', t('Enter a positive amount (in cents).'));
+    }
+
+    // Ensure amount is greater than Stripe's minimum charge amount.
+    // https://support.stripe.com/questions/what-is-the-minimum-amount-i-can-charge-with-stripe
+    else {
+      $settings = webform_stripe_checkout_settings();
+      $minimum = array(
+        'USD' => 50,
+        'CAD' => 50,
+        'GBP' => 30,
+        'EUR' => 50,
+        'DKK' => 2.5,
+        'NOK' => 3,
+        'SEK' => 3,
+        'CHF' => 50,
+        'AUD' => 50,
+        'JPY' => 50,
+        'MXN' => 10,
+        'SGD' => 50,
+      );
+      if (
+        array_key_exists($settings['currency'], $minimum)
+        && ($form_state['values']['extra']['amount_value'] * $form_state['values']['extra']['amount_value_multiplier']) < $minimum[$settings['currency']]
+      ) {
+        form_set_error('extra][amount_value', t('The minimum amount for %currency is %minimum (cents).', array(
+          '%currency' => $settings['currency'],
+          '%minimum' => $minimum[$settings['currency']],
+        )));
+      }
+    }
+  }
+
+  // Component amount.
+  if ($form_state['values']['extra']['amount_type'] === 'value_component') {
+    // Component field is required.
+    if (empty($form_state['values']['extra']['amount_value_component'])) {
+      form_set_error('extra][amount_value_component', t('Select a component to use for the amount.'));
+    }
+
+    // All amount mappings must be set.
+    if (!empty($form_state['values']['extra']['amount_value_mapping'])) {
+      foreach ($form_state['values']['extra']['amount_value_mapping'] as $key => $value) {
+        if (empty($value)) {
+          form_set_error('extra][amount_value_mapping', t('Enter an amount for each component option.'));
+          break;
+        }
+      }
+    }
+  }
+
+  // Amount multiplier must be numeric.
+  if (in_array($form_state['values']['extra']['amount_type'], array('value', 'value_component')) && !empty($form_state['values']['extra']['amount_value_multiplier']) && !is_numeric($form_state['values']['extra']['amount_value_multiplier'])) {
+    form_set_error('extra][amount_value_multiplier', t('Enter a numeric amount multiplier.'));
+  }
+
+  // Plan is required if plan amount type is chosen.
+  if ($form_state['values']['extra']['amount_type'] === 'plan' && empty($form_state['values']['extra']['amount_plan'])) {
+    form_set_error('extra][amount_plan', t('Select a subscription plan.'));
+  }
+
+  // Component plan.
+  if ($form_state['values']['extra']['amount_type'] === 'plan_component') {
+    // Component field is required.
+    if (empty($form_state['values']['extra']['amount_plan_component'])) {
+      form_set_error('extra][amount_plan_component', t('Select a component to use for the subscription plan.'));
+    }
+
+    // All plan mappings must be set.
+    if (!empty($form_state['values']['extra']['amount_plan_mapping'])) {
+      foreach ($form_state['values']['extra']['amount_plan_mapping'] as $key => $value) {
+        if (empty($value)) {
+          form_set_error('extra][amount_plan_mapping', t('Select a subscription plan for each component option.'));
+          break;
+        }
+      }
+    }
+  }
+
+  // Fixed plan quantity is required if fixed plan quantity type is chosen.
+  if ($form_state['values']['extra']['amount_plan_qty_type'] === 'value' && empty($form_state['values']['extra']['amount_plan_qty_value'])) {
+    form_set_error('extra][amount_plan_qty_type', t('Select a subscription quantity.'));
+  }
+
+  // Component plan quantity.
+  if ($form_state['values']['extra']['amount_plan_qty_type'] === 'component') {
+    // Component field is required.
+    if (empty($form_state['values']['extra']['amount_plan_qty_component'])) {
+      form_set_error('extra][amount_plan_qty_component', t('Select a component to use for the subscription quantity.'));
+    }
+
+    // All plan quantity mappings must be set.
+    if (!empty($form_state['values']['extra']['amount_plan_qty_mapping'])) {
+      foreach ($form_state['values']['extra']['amount_plan_qty_mapping'] as $key => $value) {
+        if (empty($value)) {
+          form_set_error('extra][amount_plan_qty_mapping', t('Select a subscription quantity for each component option.'));
+          break;
+        }
+      }
+    }
+  }
+
+  // Component description.
+  if ($form_state['values']['extra']['description_type'] === 'value_component' && empty($form_state['values']['extra']['description_value_component'])) {
+    form_set_error('extra][description_value_component', t('Select a component to use for the description.'));
+  }
+
+  // Validate eligibility of subscription plan description.
+  if ($form_state['values']['extra']['description_type'] === 'plan' && !in_array($form_state['values']['extra']['amount_type'], array('plan', 'plan_component'))) {
+    form_set_error('extra][description_type', t('The description can only be taken from the subscription plan if the amount is also using a subscription plan.'));
+  }
+
+  // Email component is require is email type is component.
+  if ($form_state['values']['extra']['email_type'] === 'component' && empty($form_state['values']['extra']['email_component'])) {
+    form_set_error('extra][email_component', t('Select a component to use for the email address.'));
+  }
+
+  // Image file is require is image type is file.
+  if ($form_state['values']['extra']['image_type'] === 'file' && empty($form_state['values']['extra']['image_file'])) {
+    form_set_error('extra][image_file', t('Select a custom image.'));
+  }
+
+  // Image URL is require is image type is URL.
+  if ($form_state['values']['extra']['image_type'] === 'url' && empty($form_state['values']['extra']['image_url'])) {
+    form_set_error('extra][image_url', t('Enter a custom image URL.'));
+  }
+}
+
+/**
+ * Implements _webform_render_component().
+ */
+function _webform_render_webform_stripe($component, $value = NULL, $filter = TRUE, $submission = NULL) {
+  // If a payment is already saved, don't attach anything to the form, and
+  // preserve the stored value.
+  if (isset($value[0]) && !empty($value[0]) && substr($value[0], 0, 4) !== 'tok_') {
+    return array(
+      '#type' => 'value',
+      '#default_value' => $value,
+      '#stripe_webform' => FALSE,
+    );
+  }
+
+  // At this point, this is a hidden field intended to store the Stripe token
+  // and email. After saving, it will store the Stripe charge ID.
+  $element = array(
+    '#type' => 'hidden',
+    '#attributes' => array('class' => array('webform-stripe-token')),
+    '#theme_wrappers' => array('webform_element'),
+    '#weight' => $component['weight'],
+    '#attached' => array(
+      'js' => array(
+        'https://checkout.stripe.com/checkout.js' => array('type' => 'external'),
+        drupal_get_path('module', 'webform_stripe') . '/webform_stripe.js',
+      ),
+    ),
+  );
+  return $element;
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for "webform_configure_form".
+ */
+function _webform_stripe_form_webform_configure_form_alter(&$form, &$form_state) {
+  // If form has Stripe payment component, change the Submit button help text.
+  foreach ($form['#node']->webform['components'] as $component) {
+    if ($component['type'] === 'webform_stripe') {
+      $form['advanced']['submit_text']['#description'] = t('By default the submit button on this form will have the label <em>!label</em>, because this form has a Stripe payment component. Enter a new title here to override the default.', array(
+        '!label' => WEBFORM_STRIPE_PAY_TEXT,
+      ));
+    }
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for "webform_client_form".
+ */
+function _webform_stripe_form_webform_client_form_alter(&$form, &$form_state) {
+  // Look for a Stripe payment component on a form that has a Submit button.
+  foreach ($form['#node']->webform['components'] as $cid => $component) {
+    if ($component['type'] === 'webform_stripe' && isset($form['actions']['submit'])) {
+      // New submission, or editing submission without a payment.
+      if (empty($form['#submission']) || empty($form['#submission']->data[$cid][0])) {
+        // Store component for easy access in our submit callback.
+        $form['#webform_stripe'] = $component;
+
+        // Wrap form.
+        $form['#webform_stripe_html_id'] = drupal_html_id('webform-stripe-form');
+        $form['#prefix'] = '<div id="' . $form['#webform_stripe_html_id'] . '">';
+        $form['#suffix'] = '</div>';
+
+        // Add class to form to help Drupal.ajax.prototype.beforeSubmit().
+        $form['#attributes']['class'][] = 'webform-stripe-form';
+
+        // Replace Webform's submit callback with our own.
+        $key = array_search('webform_client_form_submit', $form['#submit']);
+        $form['#submit'][$key] = '_webform_stripe_process_token';
+
+        // Creating; set default submit button text and attach ajax.
+        if (empty($form['#submission'])) {
+          if (empty($form['#node']->webform['submit_text'])) {
+            $form['actions']['submit']['#value'] = WEBFORM_STRIPE_PAY_TEXT;
+          }
+          $form['actions']['submit']['#ajax'] = array(
+            'callback' => '_webform_stripe_form_webform_client_form_ajax_callback',
+            'wrapper' => $form['#webform_stripe_html_id'],
+          );
+        }
+
+        // Editing; add ajax button to save and pay.
+        else {
+          $form['actions']['webform_stripe'] = array(
+            '#type' => 'submit',
+            '#value' => t('Save and Pay'),
+            '#weight' => 15,
+            '#ajax' => array(
+              'callback' => '_webform_stripe_form_webform_client_form_ajax_callback',
+              'wrapper' => $form['#webform_stripe_html_id'],
+            ),
+          );
+        }
+      }
+
+      // Only process one Stripe Payment component per form.
+      break;
+    }
+  }
+}
+
+/**
+ * Webform ajax callback.
+ */
+function _webform_stripe_form_webform_client_form_ajax_callback($form, $form_state) {
+  // Validate form.
+  drupal_validate_form($form['#form_id'], $form, $form_state);
+
+  // Form has errors; show errors and scroll to top of form.
+  if (form_get_errors()) {
+    $commands = ajax_prepare_response($form);
+    $commands[] = array(
+      'command' => 'webformStripeScroll',
+      'selector' => '#' . $form['#webform_stripe_html_id'],
+    );
+    $commands[] = array(
+      '#type' => 'ajax',
+      '#commands' => array(
+        array(
+          'command' => 'webformStripeScroll',
+          'selector' => '#' . $form['#webform_stripe_html_id'],
+        ),
+        ajax_command_alert('error'),
+      ),
+    );
+  }
+
+  // No errors; open Stripe Checkout.
+  else {
+    $commands[] = array(
+      'command' => 'webformStripeCheckout',
+      'params' => _webform_stripe_process_checkout_settings($form['#webform_stripe'], $form_state['values']['submitted'], WEBFORM_STRIPE_SETTINGS_CHECKOUT),
+    );
+  }
+
+  // Return ajax response.
+  return array(
+    '#type' => 'ajax',
+    '#commands' => $commands,
+  );
+}
+
+/**
+ * Builds final Stripe Checkout component settings.
+ */
+function _webform_stripe_process_checkout_settings($component, $data, $state) {
+  // Load node.
+  $node = node_load($component['nid']);
+
+  // Merge component settings, publishable key, and default settings.
+  $settings = array(
+    'panel-label' => $component['extra']['panel_label'],
+    'key' => $component['extra']['test_mode'] ? variable_get('webform_stripe_test_publishable_key', '') : variable_get('webform_stripe_live_publishable_key', ''),
+  ) + webform_stripe_checkout_settings();
+
+  // Determine amount or plan.
+  switch ($component['extra']['amount_type']) {
+    // Fixed amount.
+    case 'value':
+      $settings['amount'] = $component['extra']['amount_value'];
+      break;
+
+    // Dynamic amount.
+    case 'value_component':
+      $settings['amount'] = _webform_stripe_process_dynamic_value('amount_value', $component, $data);
+      break;
+
+    // Fixed plan.
+    case 'plan':
+      $settings['plan'] = $component['extra']['amount_plan'];
+      break;
+
+    // Dynamic plan.
+    case 'plan_component':
+      $settings['plan'] = _webform_stripe_process_dynamic_value('amount_plan', $component, $data);
+      break;
+  }
+
+  // Multiply amount (i.e. convert from pennies to dollars). This is not needed
+  // for plans because the amount is pulled in from Stripe.
+  if (!empty($settings['amount']) && !empty($component['extra']['amount_value_multiplier'])) {
+    $settings['amount'] *= $component['extra']['amount_value_multiplier'];
+  }
+
+  // Determine plan quantity and amount.
+  if (!empty($settings['plan'])) {
+    switch ($component['extra']['amount_plan_qty_type']) {
+      // Fixed quantity.
+      case 'value':
+        $settings['plan_quantity'] = $component['extra']['amount_plan_qty_value'];
+        break;
+
+      // Dynamic quantity.
+      case 'component':
+        $settings['plan_quantity'] = _webform_stripe_process_dynamic_value('amount_plan_qty', $component, $data);
+        break;
+    }
+
+    // Multiply amount by quantity.
+    $plans = _webform_stripe_get_plans($component['extra']['test_mode']);
+    if (array_key_exists($settings['plan'], $plans)) {
+      $settings['amount'] = $plans[$settings['plan']]['amount'] * $settings['plan_quantity'];
+    }
+  }
+
+  // Determine description.
+  switch ($component['extra']['description_type']) {
+    // Fixed description.
+    case 'value':
+      $settings['description'] = $component['extra']['description_value'];
+      break;
+
+    // Dynamic description.
+    case 'value_component':
+      $settings['description'] = _webform_stripe_process_dynamic_value('description_value', $component, $data);
+      break;
+
+    // Plan description.
+    case 'plan':
+      $plans = _webform_stripe_get_plans($component['extra']['test_mode']);
+      if (!empty($settings['plan']) && array_key_exists($settings['plan'], $plans)) {
+        $settings['description'] = $plans[$settings['plan']]['nickname'];
+      }
+      break;
+  }
+
+  // Determine email address.
+  switch ($component['extra']['email_type']) {
+    // Logged in user.
+    case 'user':
+      $settings['email'] = user_uid_optional_load()->mail;
+      break;
+
+    // From component.
+    case 'component':
+      $settings['email'] = _webform_stripe_process_dynamic_value('email', $component, $data);
+      break;
+  }
+
+  // Merge image default settings.
+  if ($component['extra']['image_type'] === 'default') {
+    $component['extra']['image_type'] = variable_get('webform_stripe_default_image_type', 'none');
+    $component['extra']['image_file'] = variable_get('webform_stripe_default_image_file', '');
+    $component['extra']['image_url'] = variable_get('webform_stripe_default_image_url', '');
+  }
+
+  // Determine image.
+  switch ($component['extra']['image_type']) {
+    // File.
+    case 'file':
+      $file = file_load($component['extra']['image_file']);
+      if ($file) {
+        $settings['image'] = image_style_url('webform_stripe', $file->uri);
+      }
+      break;
+
+    // URL.
+    case 'url':
+      if (!empty($component['extra']['image_url'])) {
+        $settings['image'] = url($component['extra']['image_url']);
+      }
+      break;
+
+    // None.
+    case 'none':
+      $settings['image'] = NULL;
+      break;
+  }
+
+  // Just in case amount is not an integer, round it.
+  if (!empty($settings['amount'])) {
+    $settings['amount'] = round($settings['amount']);
+  }
+
+  // Allow modules to alter Stripe Checkout settings, keying data by form key
+  // to assist hook implementations.
+  $form = array();
+  foreach ($node->webform['components'] as $component) {
+    if (!empty($component['form_key'])) {
+      $form[$component['form_key']] = isset($data[$component['form_key']]) ? $data[$component['form_key']] : (isset($data[$component['cid']]) ? $data[$component['cid']] : NULL);
+    }
+  }
+  $context = array(
+    'node' => $node,
+    'component' => $component,
+    'data' => $data,
+    'form' => $form,
+    'state' => $state,
+  );
+  drupal_alter('webform_stripe_checkout_settings', $settings, $context);
+
+  // Prepare for Javascript.
+  foreach ($settings as $key => $setting) {
+    // Ensure boolean values have correct type.
+    if (in_array($key, array('billing-address', 'zip-code', 'shipping-address', 'allow-remember-me', 'bitcoin', 'alipay', 'alipay-reusable'))) {
+      $setting = (bool) $setting;
+    }
+
+    // Skip if option is empty.
+    if ($setting === '' || $setting === NULL) {
+      unset($settings[$key]);
+      continue;
+    }
+
+    // Convert setting to camel case.
+    if (strpos($key, '-') !== FALSE) {
+      unset($settings[$key]);
+      $key = lcfirst(str_replace(' ', '', ucwords(str_replace('-', ' ', $key))));
+    }
+
+    $settings[$key] = $setting;
+  }
+
+  return $settings;
+}
+
+/**
+ * Returns value based on another component's value.
+ */
+function _webform_stripe_process_dynamic_value($type, $component, $data) {
+  $node = node_load($component['nid']);
+
+  // Make sure dynamic component exists.
+  if (!array_key_exists($component['extra']["{$type}_component"], $node->webform['components'])) {
+    return NULL;
+  }
+  $dynamic_component = $node->webform['components'][$component['extra']["{$type}_component"]];
+
+  // Find value in data, either from form_key or cid.
+  $value = isset($data[$dynamic_component['form_key']]) ? $data[$dynamic_component['form_key']] : (isset($data[$dynamic_component['cid']]) ? $data[$dynamic_component['cid']] : NULL);
+
+  // Select component.
+  if ($value !== NULL && $dynamic_component['type'] === 'select') {
+    $key = _webform_submit_select($dynamic_component, $value);
+    if (!is_array($value)) {
+      // Translate value from option/amount map.
+      if (array_key_exists($key, $component['extra']["{$type}_mapping"])) {
+        $value = $component['extra']["{$type}_mapping"][$key];
+      }
+      // Otherwise, use submitted value (aka, support for "Select or Other"
+      // fields or newly added but not yet mapped options).
+      else {
+        $value = $key;
+      }
+
+      // For descriptions, if the value is still empty, grab it from the select
+      // option's value.
+      if (empty($value) && $type === 'description_value') {
+        webform_component_include('select');
+        $options = _webform_select_options($dynamic_component);
+        $value = $options[$key];
+      }
+    }
+    else {
+      $value = NULL;
+    }
+  }
+
+  return $value;
+}
+
+/**
+ * Webform submit callback which processes a Stripe token.
+ */
+function _webform_stripe_process_token(&$form, &$form_state) {
+  $component = $form['#webform_stripe'];
+  $value = $form_state['values']['submitted'][$component['cid']];
+
+  // Nothing to process if we don't have a Stripe token.
+  if (substr($value, 0, 4) !== 'tok_') {
+    return;
+  }
+
+  // Process settings.
+  $settings = _webform_stripe_process_checkout_settings($component, $form_state['values']['submitted'], WEBFORM_STRIPE_SETTINGS_PROCESS);
+
+  // Parse Stripe token and email.
+  list($token, $email) = explode(':', $value);
+
+  // Include Stripe library.
+  webform_stripe_load_library();
+
+  // Set secret key.
+  \Stripe\Stripe::setApiKey($component['extra']['test_mode'] ? variable_get('webform_stripe_test_secret_key', '') : variable_get('webform_stripe_live_secret_key', ''));
+
+  try {
+    // Create a subscription, and save the customer and subscription IDs.
+    if (!empty($settings['plan'])) {
+      $customer = \Stripe\Customer::create(array(
+        'email' => $email,
+      ));
+      $subscription = $customer->subscriptions->create(array(
+        'source' => $token,
+        'plan' => $settings['plan'],
+        'quantity' => $settings['plan_quantity'],
+      ));
+      $value = array(
+        'test' => $component['extra']['test_mode'],
+        'customer' => $customer->id,
+        'subscription' => $subscription->id,
+        'plan' => $settings['plan'],
+        'quantity' => $settings['plan_quantity'],
+      );
+    }
+
+    // Charge a one-time amount, and save the charge ID, amount, and currency.
+    else {
+      $charge = \Stripe\Charge::create(array(
+        'source' => $token,
+        'amount' => $settings['amount'],
+        'description' => !empty($settings['description']) ? $settings['description'] : '',
+        'currency' => $settings['currency'],
+        'receipt_email' => $email,
+      ));
+      $value = array(
+        'test' => $component['extra']['test_mode'],
+        'charge' => $charge->id,
+        'amount' => $charge->amount,
+        'currency' => $settings['currency'],
+      );
+    }
+
+    // Update submission data.
+    $form_state['values']['submitted'][$component['cid']] = serialize($value);
+
+    // Charge was successful, so continue with saving the submission.
+    webform_client_form_submit($form, $form_state);
+
+    // Now that the submission has been saved, we have a submission ID and can
+    // update the Subscription's or Charge's metadata with a link to the
+    // submission.
+    $metadata['submission_url'] = url("node/{$component['nid']}/submission/{$form_state['values']['details']['sid']}", array('absolute' => TRUE));
+    if (isset($subscription)) {
+      \Stripe\Subscription::update($subscription->id, array('metadata' => $metadata));
+    }
+    else if (isset($charge)) {
+      \Stripe\Charge::update($charge->id, array('metadata' => $metadata));
+    }
+  }
+
+  // Transaction failed.
+  catch(\Stripe\Error\Base $e) {
+    drupal_set_message(t('The payment was unsuccessful: %message', array(
+      '%message' => $e->getMessage(),
+    )), 'error');
+    $form_state['rebuild'] = TRUE;
+  }
+}
+
+/**
+ * Implements _webform_display_component().
+ */
+function _webform_display_webform_stripe($component, $value, $format = 'html') {
+  if (isset($value[0]) && !empty($value[0]) && substr($value[0], 0, 4) !== 'tok_') {
+    $data = unserialize($value[0]);
+    if (is_array($data)) {
+      $link = user_access('administer webform stripe') && $format === 'html';
+      $text = isset($data['charge'])
+        ? !empty($data['amount']) ? webform_stripe_format_amount($data['amount'], $data['currency']) : t('paid')
+        : t('subscribed');
+      return array(
+        '#type' => 'markup',
+        '#title' => $component['name'],
+        '#markup' => isset($data['charge'])
+          ? ($link ? l($text, 'https://dashboard.stripe.com/' . ($data['test'] ? 'test/' : '') . 'payments/' . $data['charge']) : $text)
+          : ($link ? l($text, 'https://dashboard.stripe.com/' . ($data['test'] ? 'test/' : '') . 'customers/' . $data['customer']) : $text),
+        '#weight' => $component['weight'],
+        '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
+        '#translatable' => array('title'),
+      );
+    }
+  }
+}
+
+/**
+ * Implements _webform_table_component().
+ */
+function _webform_table_webform_stripe($component, $value) {
+  if (isset($value[0]) && !empty($value[0]) && substr($value[0], 0, 4) !== 'tok_') {
+    $data = unserialize($value[0]);
+    if (is_array($data)) {
+      return isset($data['charge'])
+        ? (!empty($data['amount']) ? webform_stripe_format_amount($data['amount'], $data['currency']) : t('paid'))
+        : t('subscribed');
+    }
+  }
+  return t('no');
+}
+
+/**
+ * Implements _webform_csv_headers_component().
+ */
+function _webform_csv_headers_webform_stripe($component, $export_options) {
+  $header = array();
+  $header[0] = '';
+  $header[1] = '';
+  $header[2] = $export_options['header_keys'] ? $component['form_key'] : $component['name'];
+  return $header;
+}
+
+/**
+ * Implements _webform_csv_data_component().
+ */
+function _webform_csv_data_webform_stripe($component, $export_options, $value) {
+  return _webform_table_webform_stripe($component, $value);
+}
